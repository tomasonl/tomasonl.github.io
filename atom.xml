<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李响的博客中心</title>
  
  
  <link href="http://tomasonl.github.io/atom.xml" rel="self"/>
  
  <link href="http://tomasonl.github.io/"/>
  <updated>2021-05-24T01:07:39.815Z</updated>
  <id>http://tomasonl.github.io/</id>
  
  <author>
    <name>Tomasonlee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安全开发规范</title>
    <link href="http://tomasonl.github.io/2021/05/24/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <id>http://tomasonl.github.io/2021/05/24/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</id>
    <published>2021-05-24T00:39:16.000Z</published>
    <updated>2021-05-24T01:07:39.815Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1,关闭蓝牙和无线连接<br>屏幕右下角</p><p>打开蓝牙设置确认未连接蓝牙</p><p> <img src="/assets/001.jpg"></p><p><img src="/img/pic/2021-05-24-08-45-53.png"></p><p>2、开启防火墙</p><p>如果是关闭状态就打开</p><p>3、关闭网络共享和网络发现</p><p> <img src="/img/pic/2021-05-24-08-46-51.png"></p><p>保存更改即可（专用、来宾、所有网络都要设置）<br>4、关闭远程桌面<br>右键我的电脑&gt;属性&gt;高级系统设置<br>去掉勾选，保存即可</p><p>5、关闭445和3389端口</p><p><img src="/img/pic/2021-05-24-08-47-16.png"></p><p>输入445,3389</p><p>选择阻止连接，然后一路下一步,完成界面需要起一个名字(自己能记住的名字就好)</p><p>配置出站规则是同样的操作</p><p>6、关闭guest账户<br>右键我的电脑，点击管理，选择  本地用户和组&gt;用户，<br>双击guest账户，即可以打开guest属性设置，这里勾选“账户已禁用”即是禁用这个guest账户了；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="http://tomasonl.github.io/2021/05/06/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>http://tomasonl.github.io/2021/05/06/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</id>
    <published>2021-05-06T01:26:37.000Z</published>
    <updated>2021-05-06T01:31:25.286Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="结婚了"><a href="#结婚了" class="headerlink" title="结婚了"></a>结婚了</h1><h2 id="婚礼前期准备"><a href="#婚礼前期准备" class="headerlink" title="婚礼前期准备"></a>婚礼前期准备</h2><h2 id=""><a href="#" class="headerlink" title="-"></a>-</h2><h2 id="-1"><a href="#-1" class="headerlink" title="-"></a>-</h2><h2 id="-2"><a href="#-2" class="headerlink" title="-"></a>-</h2><h2 id="婚礼进行时"><a href="#婚礼进行时" class="headerlink" title="婚礼进行时"></a>婚礼进行时</h2><h2 id="-3"><a href="#-3" class="headerlink" title="-"></a>-</h2><h2 id="-4"><a href="#-4" class="headerlink" title="-"></a>-</h2><h2 id="-5"><a href="#-5" class="headerlink" title="-"></a>-</h2><h2 id="美好回忆"><a href="#美好回忆" class="headerlink" title="美好回忆"></a>美好回忆</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="生活随笔" scheme="http://tomasonl.github.io/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>SofaBoot项目构建</title>
    <link href="http://tomasonl.github.io/2021/04/29/SofaBoot%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    <id>http://tomasonl.github.io/2021/04/29/SofaBoot%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/</id>
    <published>2021-04-29T08:13:34.000Z</published>
    <updated>2021-04-29T08:26:24.720Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SOFA微服务应用开发"><a href="#SOFA微服务应用开发" class="headerlink" title="SOFA微服务应用开发"></a>SOFA微服务应用开发</h1><p>快速入门</p><h2 id="1-搭建开发环境"><a href="#1-搭建开发环境" class="headerlink" title="1. 搭建开发环境"></a>1. 搭建开发环境</h2><p>    JDK版本 ≥ 8<br>    Apache Maven 版本 ≥ 3.2.5<br>    指定maven的配置文件为平台提供的setting.xml文件<br>    配置java以及maven的相关环境变量</p><h2 id="2-基于SOFABoot脚手架创建工程"><a href="#2-基于SOFABoot脚手架创建工程" class="headerlink" title="2. 基于SOFABoot脚手架创建工程"></a>2. 基于SOFABoot脚手架创建工程</h2><p>使用maven命令，通过内网maven私服创建SOFABoot工程（请勿直接复制 Maven 命令，请把“custom_settings_path”替换为真实的setting.xml路径），将创建的SOFABoot工程导入IDE中，即可直接编译本地运行。</p><ul><li>   Core工程：通常用于实现无页面展现的后端服务。当使用 SOFABoot 开发一个 J2SE 程序（无 Web 页面访问），相当于“基于 Spring Boot 的非 Web 应用（无 servlet 依赖）+ SOFA 中间件”进行开发。</li></ul><p> mvn -s “custom_settings_path” archetype:generate -DarchetypeGroupId=com.zjnx.sofa -DarchetypeArtifactId=core-app-parent-archetype -DarchetypeVersion=1.0-SNAPSHOT -DarchetypeCatalog=internal</p><ul><li> Web工程：通常用于需要 Web 页面展现的应用。当用该工程类型开发一个 Web 程序时，相当于基于“Spring Boot 的 Web 应用 + SOFA 中间件进行开发”。<br>mvn -s “custom_settings_path” archetype:generate -DarchetypeGroupId=com.zjnx.sofa -DarchetypeArtifactId=web-app-parent-archetype -DarchetypeVersion=1.0-SNAPSHOT -DarchetypeCatalog=internal<br>在创建过程中会提示输入以下信息，请根据开发使用规范进行输入：<br>groupId : maven项目组织唯一标识<br>artifactId ：工程名或者项目名<br>version ：版本号，默认为1.0-SNAPSHOT<br>package : 包名，可不填，默认和groupId一致<br>Y：确认 N :取消<br>提供的“应用SOFABoot开发脚手架工程”，使用的配置信息如下, 本文后续所有操作也都是基于此工程进行开发演示：<br>groupId : com.zjrcu.sofa<br>artifactId ：core-app<br>version ：1.0-SNAPSHOT<br>package : com.zjrcu.sofa<h2 id="3-更新SOFABoot版本"><a href="#3-更新SOFABoot版本" class="headerlink" title="3. 更新SOFABoot版本"></a>3. 更新SOFABoot版本</h2>访问私服地址：XXXX，获取最新SOFABoot版本，并更新工程中的版本为最新版本，比如当前私服最新版为3.4.7。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;com.alipay.sofa&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;sofaboot-enterprise-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;3.4.7&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br></pre></td></tr></table></figure><h2 id="4-引入SOFA-RPC-Starter及平台公共类"><a href="#4-引入SOFA-RPC-Starter及平台公共类" class="headerlink" title="4. 引入SOFA RPC Starter及平台公共类"></a>4. 引入SOFA RPC Starter及平台公共类</h2><h3 id="4-1-引入SOFA-RPC-Starter"><a href="#4-1-引入SOFA-RPC-Starter" class="headerlink" title="4.1 引入SOFA RPC Starter"></a>4.1 引入SOFA RPC Starter</h3>当前SOFA RPC同时支持BOLT和REST协议，所以无论服务是暴露BOLT还是REST协议，都只需引入rpc-enterprise-sofa-boot-starter，脚手架工程默认已经添加该依赖。另外注意引入SOFA中间件组件的Starter依赖时，不要设置版本号，由SOFABoot parent整体控制。<dependency><groupId>com.alipay.sofa</groupId><artifactId>rpc-enterprise-sofa-boot-starter</artifactId></dependency>### 4.2 引入平台公共类公共类中包含系统之间交互的公共报文头，并会统一捕获和封装异常信息，以服务响应码的形式反馈给接口调用方。系统的交互规范及服务响应码详见《ZJ-RC-SOFA微服务应用开发使用规范》。<dependency><groupId>com.zjrc.common</groupId><artifactId>zjrc-common</artifactId><version>1.0.0-SNAPSHOT</version></dependency>## 5. 发布和引用SOFARPC微服务### 5.1 定义接口    在接口模块core-app-facede中创建自定义入参和出参，出入参都需继承入参基类及出参基类：public class User extends BaseInput {  private String username;  private int    age;  private String userId;  public User() {  }  public User(String username, int age, String userId) {      this.username = username;      this.age = age;      this.userId = userId;  }  //getter以及setter方法}    定义接口，并发布接口到私服中根据定义的入参和出参，编写RPC服务的接口。参考示例：public interface UserService {  StringOutput getUserName(User user);}将接口模块core-app-facade打包并发布到私服中，使接口可以被其他服务依赖并调用：mvn deploy:deploy-file</li><li>DgroupId=com.zjrcu.sofa</li><li>DartifactId=core-app-facade</li><li>Dversion=1.0-SNAPSHOT</li><li>Dpackaging=jar</li><li>Dfile=E:\core-app-facade-1.0-SNAPSHOT.jar</li><li>Durl=<a href="http://158.222.68.166:8081/nexus/content/repositories/sofasnapshots/">http://158.222.68.166:8081/nexus/content/repositories/sofasnapshots/</a></li><li>DrepositoryId=rpc-facades<br>   DgroupId和DartifactId构成了该jar包在pom.xml的坐标，项目就是依靠这两个属性定位；Dversion表示版本信息；Dfile表示需要上传的jar包的绝对路径；Durl表示私服上仓库的位置；DrepositoryId表示仓库id，需要与setting.xml中server标签的id一致，否则上传会提示权限不足；<h3 id="5-2-发布SOFARPC服务"><a href="#5-2-发布SOFARPC服务" class="headerlink" title="5.2 发布SOFARPC服务"></a>5.2 发布SOFARPC服务</h3>在服务的实现类上添加@SofaService注解，希望暴露的协议通过bindingType设定（rest/bolt），也支持同时暴露两个协议<br>@SofaService(interfaceType = SampleRestFacade.class,bindings = { @SofaServiceBinding(bindingType = “bolt”) })<br>@Service<br>public class SampleRestFacadeImpl implements SampleRestFacade {</li></ul><p>}</p><h3 id="5-3-引用SOFARPC服务"><a href="#5-3-引用SOFARPC服务" class="headerlink" title="5.3 引用SOFARPC服务"></a>5.3 引用SOFARPC服务</h3><p>引入服务发布方的Facade包，并在定义该服务变量时添加@SofaReference注解，通过bindingType设定的协议与发布方保持一致。<br>@SofaReference(interfaceType = SampleRestFacade.class, binding = @SofaReferenceBinding(bindingType = “bolt”))<br>private SampleRestFacade sampleRestFacade;</p><h2 id="6-更新应用配置"><a href="#6-更新应用配置" class="headerlink" title="6. 更新应用配置"></a>6. 更新应用配置</h2><p>SOFABoot是基于Spring Boot的开发框架，因此application.properties的配置，除了Spring Boot本身默认自带的之外，还会有一些SOFABoot特有的配置，基础的主要有如下几个需要正确设置：<br>    应用名称：spring.application.name<br>按照微服务应用开发规范命名：系统标识-子系统名。便于在管控台中查到相应服务。<br>    运行模式：run.mode<br>应用发布到云上时，必须设置为NORMAL，本地调试可设置为DEV或者TEST。<br>    运行环境：com.alipay.env。<br>当前SOFA输出模式固定为共享模式，值必须是shared。<br>    实例标识：com.alipay.instanceid。<br>由于SOFA是共享模式，会基于工作空间做逻辑划分，每个工作空间有对应的instanceid。<br>    AntVIP地址：com.antcloud.antvip.endpoint。<br>由于SOFA是多个中间件组件的集合，为了避免应用客户端设置多个中间件组件的服务端地址，SOFA提供了AntVIP来做路由，因此应用只需配置AntVIP地址即可。<br>实例标识和AntVIP地址信息的获取在下一小节介绍。<br>通过这些配置，再无需额外配置SOFA中间件服务端地址，比如微服务发布和订阅所需的注册中心地址，因为通过AntVIP，SOFA框架会自动获取。<br>以发布到测试环境ant7这个工作空间的应用为例，对应的配置信息需为：<br>run.mode=NORMAL<br>com.alipay.env=shared<br>com.alipay.instanceid=R20HZU2ELEHA<br>com.antcloud.antvip.endpoint=acvip-inner.dev.zjnx.com</p><h2 id="7-获取环境实例标识和AntVIP地址"><a href="#7-获取环境实例标识和AntVIP地址" class="headerlink" title="7. 获取环境实例标识和AntVIP地址"></a>7. 获取环境实例标识和AntVIP地址</h2><p>登录PaaS平台中间件管理控制台，地址为<a href="http://sofa-portal.dev.zjnx.com/">http://sofa-portal.dev.zjnx.com/</a><br>请选择租户和环境-&gt; ANTCLOUD -&gt; dev</p><p>可在SOFA中间件的管控页面上查看到该工作空间对应的实例标识（com.alipay.instanceid）和AntVIP地址（com.antcloud.antvip.endpoint）信息，如下图所示。</p><h2 id="8-发布应用并查看服务"><a href="#8-发布应用并查看服务" class="headerlink" title="8. 发布应用并查看服务"></a>8. 发布应用并查看服务</h2><p>8.1 SOFABoot 健康检查<br>SOFABoot在Spring Boot 的健康检查能力上，增加了Readiness Check 的能力，使用SOFABoot的健康检查能力的扩展，来更优雅的上线应用实例。<br>    可以直接在浏览器中输入：<a href="http://localhost:8080/actuator/readiness">http://localhost:8080/actuator/readiness</a> 来查看Readiness Check 的结果<br>    也可以通过查看具体的日志来确定健康检查的结果，日志的目录位于health-check 目录下<br>8.2 管控台查看服务<br>应用启动后，通过健康检查，就会注册到注册中心，可以通过微服务控制台查看暴露的微服务。<br>SOFA中间件的管控页面-&gt;微服务控制台-&gt;服务管控</p><p>上图中红框显示的“提供服务的应用”就是spring.application.name，所以为了便于管控及查找对应应用，微服务应用服务名称要遵循开发使用规范。</p><h2 id="9-适配多个工作空间的配置"><a href="#9-适配多个工作空间的配置" class="headerlink" title="9. 适配多个工作空间的配置"></a>9. 适配多个工作空间的配置</h2><p>工作空间对应的是应用部署的不同环境，开发，功能测试，性能测试等，而不同环境的资源配置是不一样的，比如数据库连接，比如中间件的实例标识com.alipay.instanceid，等等。为了避免应用发布到不同工作空间时，需要修改application.properties里的值，PaaS平台通过SOFABoot技术栈发布应用时，会自动去按照当前所属工作空间名称寻找对应的application.properties文件，比如功能测试A1这个工作空间，那么PaaS平台发布应用时会优先选择application-A1.properties文件里的值。因此我们建议如下配置：<br>    相同配置放在application.properties文件中<br>    准备多份对应工作空间的application-XXX.properties文件，并在其中设置差异值</p><h2 id="10-使用动态配置"><a href="#10-使用动态配置" class="headerlink" title="10. 使用动态配置"></a>10. 使用动态配置</h2><p>10.1 引入依赖<br><dependency><br>    <groupId>com.alipay.sofa</groupId><br>    <artifactId>ddcs-enterprise-sofa-boot-starter</artifactId><br></dependency><br>10.2 使用步骤<br>10.2.1 创建动态配置类<br>    创建动态配置类ExampleConfig<br>    类上标注@DObject注解，region和appName属性与管控平台上的配置类保持一致<br>    类属性上标注@DAttribute注解，属性名与管控平台上配置类的属性名保持一致<br>    编写init方法，其上标注@PostContrust注解，用于初始化动态配置组件<br>    编写Getter、Setter方法<br>@DObject(region = “ExampleRegion”, appName = “core-app”)<br>public class ExampleConfig {<br>@DAttribute<br>private String greeting;</p><p>@PostConstruct<br>public void init() {<br>    DRMClient.getInstance().register(this);<br>}<br>    // setters, getters …<br>}<br>10.2.2 将动态配置类作为Spring Bean进行管理<br>在com.zjnx.sofa.config包下创建Spring配置类DdcsConfig，用于管理应用中所有动态配置类：<br>package com.zjnx.sofa.config;</p><p>@Configuration<br>public class DdcsConfig {<br>    @Bean<br>    public ExampleConfig exampleConfig() {<br>        return new ExampleConfig();<br>    }<br>}<br>在启动类中配置@ComponentScan注解以加载config包下的Spring配置类：<br>@SpringBootApplication<br>@ComponentScan(basePackages = {“com.zjnx.sofa.config”})<br>public class SOFABootSpringApplication {<br>    public static void main(String[] args) {<br>        // …<br>    }<br>}<br>10.2.3 使用动态配置类<br>通过@Autowired注解引用动态配置类Bean：<br>public class SampleServiceImpl implements SampleService {<br>private ExampleConfig exampleConfig;</p><p>@Override<br>public String message() {<br>    String greeting = exampleConfig.getGreeting();<br>    // …<br>}</p><p>@Autowired<br>public void setExampleConfig(ExampleConfig ec) {<br>    this.exampleConfig = ec;<br>}<br>}<br>10.3 在管控台上创建配置类</p><p>为该配置类创建属性，属性名与程序中的属性名一致：</p><p>推送属性值：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>生活随笔3</title>
    <link href="http://tomasonl.github.io/2021/04/25/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%943/"/>
    <id>http://tomasonl.github.io/2021/04/25/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%943/</id>
    <published>2021-04-25T08:28:52.000Z</published>
    <updated>2021-04-28T02:10:52.416Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="百无聊赖"><a href="#百无聊赖" class="headerlink" title="百无聊赖"></a>百无聊赖</h1><p>妈的，现在咋越来越难受；<br>无形的压力</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="生活随笔" scheme="http://tomasonl.github.io/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Nginx-进阶梳理</title>
    <link href="http://tomasonl.github.io/2021/04/13/Nginx%E8%BF%9B%E9%98%B6/"/>
    <id>http://tomasonl.github.io/2021/04/13/Nginx%E8%BF%9B%E9%98%B6/</id>
    <published>2021-04-13T02:09:06.000Z</published>
    <updated>2021-04-28T07:09:53.786Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Nginx-程序架构"><a href="#Nginx-程序架构" class="headerlink" title="Nginx 程序架构"></a>Nginx 程序架构</h2><h3 id="master-worker"><a href="#master-worker" class="headerlink" title="master/worker"></a>master/worker</h3><p>一个master进程：负载加载和分析配置文件、管理worker进程、平滑升级<br>一个或多个worker进程：处理并响应用户请求<br>缓存相关的进程：</p><p>cache loader    # 载入缓存对象<br>cache manager   # 管理缓存对象</p><h2 id="Nginx特性"><a href="#Nginx特性" class="headerlink" title="Nginx特性"></a>Nginx特性</h2><p>异步、事件驱动和非阻塞。</p><p>并发请求处理     # 通过epoll/select<br>文件IO          # 高级IO sendfile，异步，mmap</p><h2 id="Nginx-模块"><a href="#Nginx-模块" class="headerlink" title="Nginx 模块"></a>Nginx 模块</h2><p>高度模块化，但其模块早期不支持DSO机制；近期版本支持动态装载和卸载。</p><p>模块分类：</p><p>1、核心模块：core module<br>2、标准模块：<br>    HTTP modules：Http模块<br>        - Standard HTTP modules<br>        - Optional HTTP modules<br>    Mail modules：邮件相关<br>    Stream modules：传输层代理</p><h2 id="Nginx-作用"><a href="#Nginx-作用" class="headerlink" title="Nginx 作用"></a>Nginx 作用</h2><p>静态的web资源服务器；(图片服务器，或js/css/html/txt等静态资源服务器)<br>结合FastCGI/uwSGI/SCGI等协议反代动态资源请求<br>http/https协议的反向代理<br>imap4/pop3协议的反向代理<br>tcp/udp协议的请求转发</p><p>三台Tomcat搭建一个集群 Nginx代理</p><p>Nginx要是坏了呢？===KeepAlive<br>HA 高可用High Availability<br>两台Nginx不能同时去服务，主备节点关系。和tomcat集群不同；</p><p>使用KeepAlive实现高可用机制<br>基于VRRP协议，检测nginx状态，如果有故障还可以发送通知；主机修复好，自动让位；<br>这一些列都是由KeepAlive来做；<br>VRRP协议，虚拟路由冗余协议，解决内网单点故障；<br>keepalive==   </p><ol><li>./configure –prefix=/usr/local/keepalived –sysconf=/etc    (缺库就补一下)</li><li>make &amp;&amp; make install</li><li>whereis keepalived<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global_defs&#123;  </span><br><span class="line">notification_email&#123;   </span><br><span class="line">#通知email，根据实际情况配置    </span><br><span class="line">admin@example.com</span><br><span class="line">&#125;</span><br><span class="line">notification_email_from admin@example.com</span><br><span class="line">smtp_server 127.0.0.1</span><br><span class="line">stmp_connect_timeout 30</span><br><span class="line">router_id node1         </span><br><span class="line">#节点名标识，主要用于通知中</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_NODE &#123;</span><br><span class="line">state MASTER          </span><br><span class="line">#配置为主服务器</span><br><span class="line"></span><br><span class="line">interface eth0        </span><br><span class="line">#通讯网卡</span><br><span class="line">virtual_router_id 100 </span><br><span class="line">#路由标识</span><br><span class="line">priority 200          </span><br><span class="line">#优先级，0-254</span><br><span class="line">advert_int 5          </span><br><span class="line">#通知间隔，实际部署时可以设置小一点，减少延时</span><br><span class="line">authentication &#123;</span><br><span class="line">auth_type PASS</span><br><span class="line">auth_pass 123456    </span><br><span class="line">#验证密码，用于通讯主机间验证</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> virtual_ipaddress &#123;</span><br><span class="line">192.168.1.206      </span><br><span class="line">#虚拟ip，可以定义多个</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>写脚本实现全天候 检测nginx是否活着</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">A&#x3D; &#96;ps -C nginx --no-header |wc -l&#96;</span><br><span class="line">#判断 nginx是否宕机,如果宕机了,尝试重启</span><br><span class="line">if [$A -eq 0 ]; then</span><br><span class="line">&#x2F;usr&#x2F;locaL&#x2F;nginx&#x2F;sbin&#x2F;nginx</span><br><span class="line">#等待一小会再次检查 nginx,如果没有启动成功,则停止 keepalived,使其启动备用机</span><br><span class="line">sleep 3</span><br><span class="line">if [&#96;ps -C nginx --no-header |wc -l&#96; -eq 0 ]; then</span><br><span class="line">killall keepalived</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>但是备用机一般没啥事 也不能天天出事，所以为了资源合理利用</p><h3 id="配置Keepalived双主热备"><a href="#配置Keepalived双主热备" class="headerlink" title="配置Keepalived双主热备"></a>配置Keepalived双主热备</h3><p>规则：以一个虚拟ip分组归为同一个路由<br>主节点配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">router_id keep_171</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">state MASTER</span><br><span class="line">interface ens33</span><br><span class="line">virtual_router_id 51</span><br><span class="line">priority 100</span><br><span class="line">advert_int 1</span><br><span class="line">authentication &#123;</span><br><span class="line">auth_type PASS</span><br><span class="line">auth_pass 1111</span><br><span class="line">&#125;</span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">192.168.1.161</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">state BACKUP</span><br><span class="line">interface ens33</span><br><span class="line">virtual_router_id 52</span><br><span class="line">priority 80</span><br><span class="line">advert_int 1</span><br><span class="line">authentication &#123;</span><br><span class="line">auth_type PASS</span><br><span class="line">auth_pass 1111</span><br><span class="line">&#125;</span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">192.168.1.162</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备用节点配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">router_id keep_172</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">state BACKUP</span><br><span class="line">interface ens33</span><br><span class="line">virtual_router_id 51</span><br><span class="line">priority 80</span><br><span class="line">advert_int 1</span><br><span class="line">authentication &#123;</span><br><span class="line">auth_type PASS</span><br><span class="line">auth_pass 1111</span><br><span class="line">&#125;</span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">192.168.1.161</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相对而言，互为主备；</p><p>LVS-章文嵩博士</p><p>LVS负载能力超级高，LVS可以只接受不响应，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师考试指导</title>
    <link href="http://tomasonl.github.io/2021/03/18/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E8%80%83%E8%AF%95%E6%8C%87%E5%AF%BC/"/>
    <id>http://tomasonl.github.io/2021/03/18/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E8%80%83%E8%AF%95%E6%8C%87%E5%AF%BC/</id>
    <published>2021-03-18T08:29:32.000Z</published>
    <updated>2021-03-11T07:21:08.666Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1，计算机系统知识"><a href="#1，计算机系统知识" class="headerlink" title="1，计算机系统知识"></a>1，计算机系统知识</h1><ul><li>进制转换</li><li>数值表示</li><li>算数运算、逻辑运算</li><li>数学基础知识</li><li>计算机硬件</li><li>存储系统</li><li>可靠性与性能测评</li></ul><p>1.1 数据表示与校验码<br>数据在计算机表现为01表示的<em>机器数</em>,有无符号根据最高位确定。可采用原、反、补、移码四种编码方法表示带符号的机器数；<br>0正1负<br>原码：乘除简单，加减不便；0分 +0[00000000] -0[10000000];<br>反码：符号为1 则要把剩余的取反；0分 +0[00000000] -0[11111111];<br>补码：符号为1，其余取反且最低位+1；0[00000000];<br>移码：乘除简单，加减不便；0分 +0[00000000] -0[10000000];</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Java开发-规范起来3</title>
    <link href="http://tomasonl.github.io/2021/03/14/Java%E5%BC%80%E5%8F%91-%E8%A7%84%E8%8C%83%E8%B5%B7%E6%9D%A53/"/>
    <id>http://tomasonl.github.io/2021/03/14/Java%E5%BC%80%E5%8F%91-%E8%A7%84%E8%8C%83%E8%B5%B7%E6%9D%A53/</id>
    <published>2021-03-14T07:29:35.000Z</published>
    <updated>2021-03-04T08:42:18.224Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="四-OOP-规约"><a href="#四-OOP-规约" class="headerlink" title="(四) OOP 规约"></a>(四) OOP 规约</h2><ol><li>【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增<br>加编译器解析成本，直接用类名来访问即可。<br>解释：不是说语法错，而是增加 jvm 成本，每增加一个对象变量，new 一个<br>对象需要分配内存空间，增加无谓的内存消耗。调用时会去堆中检索对象，用类<br>名访问只需要去方法区中找，减少了堆中检索的成本。</li><li>【强制】所有的覆写方法，必须加@Override 注解。<br>说明：getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的<br>0，加@Override 可以准确判断是否覆盖成功。另外，如果在抽象类中对方法<br>签名进行修改，其实现类会马上编译报错。<br>解释：jdk5.0 才有这个注解，可以帮助我们做数据检测，上例中的 O 和 0 眼<br>睛看不出来。</li><li>【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使<br>用 Object。<br>说明：可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数<br>编程）<br>正例：public List<User> listUsers(String type, Long… ids) {…}<br>解释：可变参数本质上就是一个数组（经编译器编译后转化为对应类型的数<br>组）。因为如果遇到此种业务，绝对会定下类型，而不是 Object，可变参数会<br>增加 jdk 编译成本，会将它作为一个数组转换，增加编译成本，运行时也会预<br>留内存空间，额外增加运行空间。</li><li>【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对<br>接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采<br>用的新接口或者新服务是什么。<br>解释：因为现在微服务比较多，有 dubbo，rpc 调用，spring cloud rest<br>（特例，bean 参数不同）调用，如果方法签名改了，会对调用者造成麻烦。我们可<br>以用重写，重载的方式进行扩展。扩展接口升级 url 中加上版本号 v1,v2 等。但是原<br>来使用的接口不要停。</li><li>【强制】不能使用过时的类或方法。<br>说明：java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法<br>已经过时，应该使用双参数 decode(String source, String encode)。接口提<br>供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，<br>有义务去考证过时方法的新实现是什么。<br>解释：如果有可替代的，不要用过时的。肯定是有问题，才会声明过时。没人<br>喜欢过期的食物，为什么编程时就喜欢用过期的方法，而就不想着用新方法<br>呢？</li><li>【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的<br>对象来调用 equals。<br>正例：”test”.equals(object);<br>反例：object.equals(“test”);<br>说明：推荐使用 java.util.Objects#equals（JDK7 引入的工具类）。<br>解释：字面值做调用方。避免空指针。看代码：oop 包下 EqualsTest</li><li>【强制】所有整型包装类对象之间值的比较，全部使用 equals 方法比较。<br>说明：对于 Integer var = ? 在-128 至 127 范围内的赋值，Integer 对象是<br>在 IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值<br>可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产<br>生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判<br>断。<br>解释：面试大坑，Integer intA = 3,intB =3 ,用==判断是不是 true？不是基<br>本类型，都用 equals。equal 比较内容。看代码 oop.EqualsTest</li><li>【强制】浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类<br>型不能用 equals 来判断。<br>说明：浮点数采用“尾数+阶码”的编码方式，类似于科学计数法的“有效数<br>字+指数”的表示方式。二进制无法精确表示大部分的十进制小数，具体原理<br>参考《马士兵 Java 基础课程》。<br>反例：<br>float a = 1.0f - 0.9f;<br>float b = 0.9f - 0.8f;<br>if (a == b) {<br>// 预期进入此代码快，执行其它业务逻辑<br>// 但事实上 a==b 的结果为 false<br>}<br>Float x = Float.valueOf(a);<br>Float y = Float.valueOf(b);<br>if (x.equals(y)) {<br>// 预期进入此代码快，执行其它业务逻辑<br>// 但事实上 equals 的结果为 false<br>}<br>正例：<br>(1)指定一个误差范围，两个浮点数的差值在此范围之内，则认为是相等的。<br>float a = 1.0f - 0.9f;<br>float b = 0.9f - 0.8f;<br>float diff = 1e-6f;<br>if (Math.abs(a - b) &lt; diff) {<br>System.out.println(“true”);<br>}<br>(2)使用 BigDecimal 来定义值，再进行浮点数的运算操作。<br>BigDecimal a = new BigDecimal(“1.0”);<br>BigDecimal b = new BigDecimal(“0.9”);<br>BigDecimal c = new BigDecimal(“0.8”);<br>BigDecimal x = a.subtract(b);<br>BigDecimal y = b.subtract(c);<br>if (x.equals(y)) {<br>System.out.println(“true”);<br>}<br>解释：在 10 进制下，我们将 1 分成 10 份，还能表示 0.1，0.2 等，但表示<br>1/3，只能无限接近，永远达不到。所以精度不够。完全相等是不可能的。</li><li>【强制】定义数据对象 DO 类时，属性类型要与数据库字段类型相匹配。<br>正例：数据库字段的 bigint 必须与类属性的 Long 类型相对应。<br>反例：某个案例的数据库表 id 字段定义类型 bigint unsigned，实际类对象属性<br>为 Integer，随着 id 越来越大，超过 Integer 的表示范围而溢出成为负数。<br>解释：门当户对，否则匹配不上出问题。天天吵架调 bug，太费精力。</li><li>【强制】为了防止精度损失，禁止使用构造方法 BigDecimal(double)的方式把<br>double 值转化为 BigDecimal 对象。<br>说明：BigDecimal(double)存在精度损失风险，在精确计算或值比较的场景中可<br>能会导致业务逻辑异常。<br>如：BigDecimal g = new BigDecimal(0.1f); 实际的存储值为：0.10000000149<br>正例：优先推荐入参为 String 的构造方法，或使用 BigDecimal 的 valueOf 方<br>法，此方法内部其实执行了 Double 的 toString，而 Double 的 toString 按<br>double 的实际能表达的精度对尾数进行了截断。<br>BigDecimal recommend1 = new BigDecimal(“0.1”);<br>BigDecimal recommend2 = BigDecimal.valueOf(0.1);<br>解释：官方注释说了 unpredictable，你以为的你以为的不是你以为的。<br>BigDecimal(0.1)这货实际上等于</li><li>1000000000000000055511151231257827021181583404541015625，因为准<br>确的来说 0.1 本身不能算是一个 double（其实 0.1 不能代表任何一个定长二进制分<br>数）。去 EqualsTests 看源码 注释</li><li>关于基本数据类型与包装数据类型的使用标准如下：<br>1） 【强制】所有的 POJO 类属性必须使用包装数据类型。<br>2） 【强制】RPC 方法的返回值和参数必须使用包装数据类型。<br>3） 【推荐】所有的局部变量使用基本数据类型。<br>说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋<br>值，任何 NPE 问题，或者入库检查，都由使用者来保证。<br>正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有<br>NPE 风险。<br>反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC<br>服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该<br>显示成中划线。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调<br>用失败，异常退出。<br>解释：局部变量大多数用于计算，基本类型有优势，不需要拆箱装箱，效率高。<br>属性用包装类型：因为有可能序列化。看代码，当用 Integer 做参数时，num 为<br>空时，接受到的是 null，由使用者注意，但 为 int 时收到的是 0。如果使用者由<br>于没有 npe 忘了，上线会出问题。</li><li>【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。<br>反例：POJO 类的 createTime 默认值为 new Date()，但是这个属性在数据提取<br>时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被<br>修改成当前时间。<br>解释：<br>DO:data object 和数据库表对应，可以 1 个 do 对应多个表，。<br>Dto：trans 转换 dao 输出的对象，do 和 dto 不绝对一样。Dto 可以对数据做额<br>外的处理，do 整理后需要向上传递时用。<br>Vo：渲染视图。Vo 和 do 有时候也相同。<br>当 do 用于页面渲染用分页时，需要 vo，do 做一些特殊处理时，用 dto。<br>pojo：属性，set，get，object 方法，没有业务含义。<br>Pojo 是纯净的。<br>设置默认值，会让错误不好排查。</li><li>【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列<br>失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID<br>值。<br>说明：注意 serialVersionUID 不一致会抛出序列化运行时异常。<br>解释：用了版本号，如果改了版本号，有地方有序列化的对象，在反序列化时就会<br>报错。如果抛弃原来所有的，全部进行升级，无所谓了。Io 文件，内存，网络。<br>反序列化 会读取流中的 版本号，如果版本号和类中版本号不一致，会报错。也可<br>以让所以类版本号有的都是 1L，就像 2 个人同一个身份证号，正常活没问题。<br>Hashcode 方法，返回 0 也行，但是不建议。看代码：oop.SerializeTest</li><li>【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init<br>方法中。<br>解释：为了逻辑清晰，不要让孩子快出生的时候，干些他成为独立的人之后才能<br>干的活。先让他生出来再说，别着急。可以在 init 上加上，@PostConstruct 注解，<br>在构造方法执行结束后调用。在服务发现 DiscoveryClient 中构造方法执行了业务逻<br>辑，我们不学。国产标准。</li><li>【强制】POJO 类必须写 toString 方法。使用 IDE 中的工具：source&gt;<br>generate toString 时，如果继承了另一个 POJO 类，注意在前面加一下<br>super.toString。<br>说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性<br>值，便于排查问题。<br>解释：异常处理会用到。</li><li>【强制】禁止在 POJO 类中，同时存在对应属性 xxx 的 isXxx()和 getXxx()方<br>法。<br>说明：框架在调用属性 xxx 的提取方法时，并不能确定哪个方法一定是被优先调<br>用到。</li><li>【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔<br>符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。<br>说明：<br>String str = “a,b,c,,”;<br>String[] ary = str.split(“,”);<br>// 预期大于 3，结果是 3<br>System.out.println(ary.length);<br>解释：看代码：oop.SpiltTest</li><li>【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放<br>置在一起，便于阅读，此条规则优先于下一条。<br>解释：构造方法，overload，属性，getter/setter 分别放在一起。</li><li>【推荐】 类内方法定义的顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt;<br>getter / setter 方法。<br>说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽<br>然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般<br>不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有 Service 和<br>DAO 的 getter/setter 方法放在类体最后。<br>解释：方便看代码的人。</li><li>【推荐】setter 方法中，参数名称与类成员变量名称一致，this.成员名 = 参数名。在 getter/setter 方法中，不要增加业务逻辑，增加排查问题的难<br>度。<br>反例：<br>public Integer getData() {<br>if (condition) {<br>return this.data + 100;<br>} else {<br>return this.data - 100;<br>}<br>}<br>解释：加了业务逻辑，别人会误解。</li><li>【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进<br>行扩展。<br>说明：下例中，反编译出的字节码文件显示每次循环都会 new 出一个<br>StringBuilder 对象，然后进行 append 操作，最后通过 toString 方法返回<br>String 对象，造成内存资源浪费。<br>反例：<br>String str = “start”;<br>for (int i = 0; i &lt; 100; i++) {<br>str = str + “hello”;<br>}<br>解释：减少对象的构建过程，builder 用的时 char[]实现。减少堆中不必要对<br>象的创建过程。</li><li>【推荐】final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final<br>关键字：<br>1） 不允许被继承的类，如：String 类。<br>2） 不允许修改引用的域对象。<br>3） 不允许被覆写的方法，如：POJO 类的 setter 方法。<br>4） 不允许运行过程中重新赋值的局部变量。<br>5） 避免上下文重复使用一个变量，使用 final 可以强制重新定义一个变量，方便<br>更好地进行重构。</li><li>【推荐】慎用 Object 的 clone 方法来拷贝对象。<br>说明：对象 clone 方法默认是浅拷贝，若想实现深拷贝需覆写 clone 方法实现域<br>对象的深度遍历式拷贝。<br>解释：clone 是浅拷贝。就当没有 clone 这个方法。Oop.CloneTest<br><a href="https://blog.csdn.net/meism5/article/details/90414050">https://blog.csdn.net/meism5/article/details/90414050</a></li><li>【推荐】类成员与方法访问控制从严：<br>1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。<br>2） 工具类不允许有 public 或 default 构造方法。<br>3） 类非 static 成员变量并且与子类共享，必须是 protected。<br>4） 类非 static 成员变量并且仅在本类使用，必须是 private。<br>5） 类 static 成员变量如果仅在本类使用，必须是 private。<br>6） 若是 static 成员变量，考虑是否为 final。<br>7） 类成员方法只供类内部调用，必须是 private。<br>8） 类成员方法只对继承类公开，那么限制为 protected。<br>说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于<br>模块解耦。思考：如果是一个 private 的方法，想删除就删除，可是一个 public<br>的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小<br>孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。<br>解释：最小知道原则。阿里安全条例，关于信息传递也</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Element-ui和vue-element-admin</title>
    <link href="http://tomasonl.github.io/2021/03/11/Element-ui%E5%92%8Cvue-element-admin/"/>
    <id>http://tomasonl.github.io/2021/03/11/Element-ui%E5%92%8Cvue-element-admin/</id>
    <published>2021-03-11T08:14:01.000Z</published>
    <updated>2021-03-11T08:36:04.123Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Element-ui和vue-element-admin学习"><a href="#Element-ui和vue-element-admin学习" class="headerlink" title="Element-ui和vue-element-admin学习"></a>Element-ui和vue-element-admin学习</h1><h2 id="Element-ui"><a href="#Element-ui" class="headerlink" title="Element-ui"></a>Element-ui</h2><p>什么是Element-ui？</p><p>根据官网的说法，Element-ui，是一套为开发者、设计师和产品经理准备的基于Vue 2.0的由饿了么公司出品的桌面端组件库。<br>官网：<a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></p><p>级联选择器（cascader）<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMTQwNTU1OC01OWQ5ZTliZWNiMTkzN2ZkLnBuZw?x-oss-process=image/format,png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;block&quot;&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;demonstration&quot;&gt;默认 click 触发子菜单&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;el-cascader</span><br><span class="line">    v-model&#x3D;&quot;value&quot;</span><br><span class="line">    :options&#x3D;&quot;options&quot;</span><br><span class="line">    @change&#x3D;&quot;handleChange&quot;&gt;&lt;&#x2F;el-cascader&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;block&quot;&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;demonstration&quot;&gt;hover 触发子菜单&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;el-cascader</span><br><span class="line">    v-model&#x3D;&quot;value&quot;</span><br><span class="line">    :options&#x3D;&quot;options&quot;</span><br><span class="line">    :props&#x3D;&quot;&#123; expandTrigger: &#39;hover&#39; &#125;&quot;</span><br><span class="line">    @change&#x3D;&quot;handleChange&quot;&gt;&lt;&#x2F;el-cascader&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        value: [],</span><br><span class="line">        options: [&#123;</span><br><span class="line">          value: &#39;zhinan&#39;,</span><br><span class="line">          label: &#39;指南&#39;,</span><br><span class="line">          children: [&#123;</span><br><span class="line">            value: &#39;shejiyuanze&#39;,</span><br><span class="line">            label: &#39;设计原则&#39;,</span><br><span class="line">            children: [&#123;</span><br><span class="line">              value: &#39;yizhi&#39;,</span><br><span class="line">              label: &#39;一致&#39;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              value: &#39;fankui&#39;,</span><br><span class="line">              label: &#39;反馈&#39;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              value: &#39;xiaolv&#39;,</span><br><span class="line">              label: &#39;效率&#39;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              value: &#39;kekong&#39;,</span><br><span class="line">              label: &#39;可控&#39;</span><br><span class="line">            &#125;]</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            value: &#39;daohang&#39;,</span><br><span class="line">            label: &#39;导航&#39;,</span><br><span class="line">            children: [&#123;</span><br><span class="line">              value: &#39;cexiangdaohang&#39;,</span><br><span class="line">              label: &#39;侧向导航&#39;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              value: &#39;dingbudaohang&#39;,</span><br><span class="line">              label: &#39;顶部导航&#39;</span><br><span class="line">            &#125;]</span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="vue-element-admin"><a href="#vue-element-admin" class="headerlink" title="vue-element-admin"></a>vue-element-admin</h2><p>什么是vue-element-admin？</p><p>vue-element-admin是一款基于Vue和Element-ui的后台管理的集成解决方案（60%的前后端分离项目都使用它）。<br>官网：<a href="https://panjiachen.github.io/vue-element-admin-site/zh/">https://panjiachen.github.io/vue-element-admin-site/zh/</a></p><p>如何分析一个前端项目？</p><p>1、查看config、index.js，了解项目的基本配置。<br>2、查看main.js，了解导入了哪些组件。<br>3、查看路由配置文件index.js，寻找到所有的页面组件。<br>4、分析页面组件，准备的组件化操作：template/script/style。</p><p>ElementUI   VS  Ant Design<br>官网：<br>el-vue: <a href="https://element.eleme.cn/">https://element.eleme.cn</a><br>a-vue: <a href="https://www.antdv.com/docs/vue">https://www.antdv.com/docs/vue</a><br>a-react: <a href="https://ant.design/docs/react/introduce-cn">https://ant.design/docs/react/introduce-cn</a><br>源码：<br>el-vue: <a href="https://github.com/ElemeFE/element">https://github.com/ElemeFE/element</a><br>a-vue: <a href="https://github.com/vueComponent/ant-design-vue">https://github.com/vueComponent/ant-design-vue</a><br>a-react: <a href="https://github.com/ant-design/ant-design">https://github.com/ant-design/ant-design</a><br>人民币版<br><a href="https://github.com/PanJiaChen/vue-element-admin">https://github.com/PanJiaChen/vue-element-admin</a><br><a href="https://pro.ant.design/">https://pro.ant.design/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java开发-规范起来2</title>
    <link href="http://tomasonl.github.io/2021/03/09/Java%E5%BC%80%E5%8F%91-%E8%A7%84%E8%8C%83%E8%B5%B7%E6%9D%A52/"/>
    <id>http://tomasonl.github.io/2021/03/09/Java%E5%BC%80%E5%8F%91-%E8%A7%84%E8%8C%83%E8%B5%B7%E6%9D%A52/</id>
    <published>2021-03-09T07:27:40.000Z</published>
    <updated>2021-03-04T08:41:43.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="三-代码格式"><a href="#三-代码格式" class="headerlink" title="(三) 代码格式"></a>(三) 代码格式</h2><ol><li><p>【强制】如果是大括号内为空，则简洁地写成{}即可，大括号中间无需换行和<br>空格；如果是非空代码块则：<br>1） 左大括号前不换行。<br>2） 左大括号后换行。<br>3） 右大括号前换行。<br>4） 右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。</p></li><li><p>【强制】左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格；而左大括号前需要空格。详见第 5 条下方正提示。<br>反例：if (空格 a == b 空格)</p></li><li><p>【强制】if/for/while/switch/do 等保留字与括号之间都必须加空格。</p></li><li><p>【强制】任何二目、三目运算符的左右两边都需要加一个空格。<br>说明：运算符包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号等。<br>解释：小时候第一次看马老师视频，才知道要加运算符两边的空格这个东西。<br>所以花钱学东西很值得，如果花 1 万，马上知道这个知识点，不花这个钱，有可能 2、3 年后知道，损失的就不止 1 万了。</p></li><li><p>【强制】采用 4 个空格缩进，禁止使用 tab 字符。<br>说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab为 4 个空格时，请勿勾选 Use tab character；而在 eclipse 中，必须勾选insert spaces for tabs。<br> public static void main(String[] args) {</p><pre><code> // 缩进 4 个空格 String say = &quot;hello&quot;; // 运算符的左右必须有一个空格 int flag = 0; // 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格 if (flag == 0) &#123; System.out.println(say); &#125; // 左大括号前加空格且不换行；左大括号后换行 if (flag == 1) &#123; System.out.println(&quot;world&quot;); // 右大括号前换行，右大括号后有 else，不用换行 &#125; else &#123; System.out.println(&quot;ok&quot;); // 在右大括号后直接结束，则必须换行</code></pre><p> }<br>}</p></li><li><p>【强制】注释的双斜线与注释内容之间有且仅有一个空格。<br>正例：<br>// 这是示例注释，请注意在双斜线之后有一个空格<br>String param = new String();</p></li><li><p>【强制】在进行类型强制转换时，右括号与强制转换值之间不需要任何空格隔开。<br>正例：<br>long first = 1000000000000L;<br>int second = (int)first + 2;</p></li><li><p>【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：<br>1）第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示<br>例。<br>2）运算符与下文一起换行。<br>3）方法调用的点符号与下文一起换行。<br>4）方法调用中的多个参数需要换行时，在逗号后进行。<br>5）在括号前不要换行，见反例。<br>正例：<br>StringBuilder sb = new StringBuilder();<br>// 超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行<br>sb.append(“Jack”).append(“Ma”)…<br>.append(“alibaba”)…<br>.append(“alibaba”)…<br>.append(“alibaba”);<br>反例：<br>StringBuilder sb = new StringBuilder();<br>// 超过 120 个字符的情况下，不要在括号前换行<br>sb.append(“Jack”).append(“Ma”)…append<br>(“alibaba”);<br>// 参数很多的方法调用可能超过 120<br>个字符，不要在逗号前换行<br>method(args1, args2, args3, …<br>, argsX);</p></li><li><p>【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。<br>正例：下例中实参的 args1，后边必须要有一个空格。<br>method(args1, args2, args3);</p></li><li><p>【强制】IDE 的 text file encoding 设置为 UTF-8; IDE 中文件的换行符使用Unix 格式，不要使用 Windows 格式。<br>解释：很多 windows 格式会有问题，比如记事本开头添加 0xefbbbf（十六进制）的字符。会导致文本问题。</p></li><li><p>【推荐】单个方法的总行数不超过 80 行。<br>说明：除注释之外的方法签名、左右大括号、方法内代码、空行、回车及任何不可见字符的总行数不超过80行。<br>正例：代码逻辑分清红花和绿叶，个性和共性，绿叶逻辑单独出来成为额外方法，使主干代码更加清晰；共性逻辑抽取成为共性方法，便于复用和维护。<br>解释：不仅仅写代码，生活中方方面面也一样，绿叶就当好绿叶，否则惹人烦。比如重要会议高层讲话，一个低层员工总插嘴，那就很可能会被单独抽取出来。放到公司外面。</p></li><li><p>【推荐】没有必要增加若干空格来使变量的赋值等号与上一行对应位置的等号对齐。<br>正例：<br>int one = 1;<br>long two = 2L;<br>float three = 3F;<br>StringBuilder sb = new StringBuilder();<br>说明：增加 sb 这个变量，如果需要对齐，则给 one、two、three 都要增加几个空格，在变量比较多的情况下，是非常累赘的事情。</p></li><li><p>【推荐】不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。<br>说明：任何情形，没有必要插入多个空行进行隔开。<br>解释：点到为止，不要过分。否则会激发逆反情绪，小时候玩 CS，人已经被打死了，就不要一直突突了，小时候在网吧有一次因为游戏中的鞭尸发生肢体冲突。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Java日常开发-规范起来1</title>
    <link href="http://tomasonl.github.io/2021/03/04/Java%E5%BC%80%E5%8F%91-%E8%A7%84%E8%8C%83%E8%B5%B7%E6%9D%A51/"/>
    <id>http://tomasonl.github.io/2021/03/04/Java%E5%BC%80%E5%8F%91-%E8%A7%84%E8%8C%83%E8%B5%B7%E6%9D%A51/</id>
    <published>2021-03-04T07:25:59.000Z</published>
    <updated>2021-03-04T08:34:10.241Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、编程规约"><a href="#一、编程规约" class="headerlink" title="一、编程规约"></a>一、编程规约</h1><h2 id="命名风格"><a href="#命名风格" class="headerlink" title="命名风格"></a>命名风格</h2><ol><li><p>【强制】命名不能以下划线或美元符号开始或者结束。<br>反例：<em>name / __name / $name / name</em> / name$ / name__ </p></li><li><p>【强制】严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。<br>正例：renminbi / alibaba / taobao / youku / hangzhou 等国际通用的名称，可视同英文。<br>反例：DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量= 3<br>说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。纯拼音命名避免采用。中文同音字，汉字编码，Pingfen：评分，平分。</p></li><li><p>【强制】类名使用 首字母大写驼峰UpperCamelCase 风格，例外：DO / BO / DTO / VO / AO / PO / UID 等。<br>正例：JavaServerlessPlatform / UserDAO / XmlService / TcpUdpDeal /TaPromotion<br>反例：javaserverlessplatform / UserDo / XMLService / TCPUDPDeal /TAPromotion<br>TIPS：<br>DO（ Data Object）：与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。<br>DTO（ Data Transfer Object）：数据传输对象，Service 或 Manager 向外传输的对象。<br>BO（ Business Object）：业务对象。 由 Service 层输出的封装业务逻辑的对象。<br>VO（ View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。<br>AO (Application Object) :应用对象,在 Web 层与 Service 层之间抽象的复用对象模型,类似展示层,复用度不高。<br>POJO 是 DO / DTO / BO / VO 的统称</p></li><li><p>【强制】方法名、参数名、成员变量、局部变量都统一使用 首字母小写驼峰lowerCamelCase风格。<br>正例： localValue / getHttpMessage() / inputUserId</p></li></ol><p><em>开发小坑1</em>. 【强制】POJO 类中布尔类型变量都不要加 is 前缀，否则部分框架解析会引起序列化错误。</p><p>反例：定义为基本数据类型 Boolean isDeleted 的属性，它的方法也是isDeleted()，RPC 框架在反向解析的时候，“误以为”对应的属性名称是deleted，导致属性获取不到，进而抛出异常。<br>解释：这是开发中的一个坑，很难发现问题。<br>debug，com.p3c.controller.ApiTestController，在 postman 中传入<br>{ “num”:1, “isSuccess”:true}但是 controller 收到的却是 false;</p><ol start="5"><li>【参考】各层命名规约：<br>A) Service/DAO 层方法命名规约<br>1） 获取单个对象的方法用 get 做前缀。<br>2） 获取多个对象的方法用 list 做前缀，复数形式结尾如：listObjects。<br>3） 获取统计值的方法用 count 做前缀。<br>4） 插入的方法用 save/insert 做前缀。<br>5） 删除的方法用 remove/delete 做前缀。<br>6） 修改的方法用 update 做前缀。<br>B) 领域模型命名规约<br>1） 数据对象：xxxDO，xxx 即为数据表名。<br>2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。<br>3） 展示对象：xxxVO，xxx 一般为网页名称。<br>4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</li></ol><h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2><ol><li>【强制】不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。<br>反例：String key = “Id#taobao_” + tradeId;<br>cache.put(key, value);<br>// 缓存 get 时，由于在代码复制时，漏掉下划线，导致缓存击穿而出现<br>问题</li><li>【强制】在 long 或者 Long 赋值时，数值后使用大写的 L，不能是小写的 l，<br>小写容易跟数<br>字 1 混淆，造成误解。<br>说明：Long a = 2l; 写的是数字的 21，还是 Long 型的 2。</li><li>【推荐】不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维<br>护。<br>说明：大而全的常量类，杂乱无章，使用查找功能才能定位到修改的常量，不<br>利于理解和维护。<br>正例：缓存相关常量放在类 CacheConsts 下；系统配置相关常量放在类<br>ConfigConsts 下。<br>解释：大而全其实相当于没有，比如读书，重点划线，如果一本书都划线，和<br>没划线有什么区别呢？</li><li>【推荐】常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。<br>1） 跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。<br>2） 应用内共享常量：放置在一方库中，通常是子模块中的 constant 目录下。<br>反例：易懂变量也要统一定义成应用内共享常量，两位工程师在两个类中分别定义了“YES”的变量：<br>类 A 中：public static final String YES = “yes”;<br>类 B 中：public static final String YES = “y”;<br>A.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。</li></ol><p>3） 子工程内部共享常量：即在当前子工程的 constant 目录下。<br>4） 包内共享常量：即在当前包下单独的 constant 目录下。<br>5） 类内共享常量：直接在类内部 private static final 定义。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Nginx实战部署</title>
    <link href="http://tomasonl.github.io/2021/03/01/Nginx%E5%AE%9E%E6%88%98%E9%83%A8%E7%BD%B2/"/>
    <id>http://tomasonl.github.io/2021/03/01/Nginx%E5%AE%9E%E6%88%98%E9%83%A8%E7%BD%B2/</id>
    <published>2021-03-01T01:38:09.000Z</published>
    <updated>2021-03-09T07:18:37.092Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="WHAT—Nginx？"><a href="#WHAT—Nginx？" class="headerlink" title="WHAT—Nginx？"></a>WHAT—Nginx？</h1><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，2004年发布。2011年，nginx 1.0.4发布。</p><p>其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。在全球活跃的网站中有12.18%的使用比率，大约为2220万个网站。</p><p>Nginx 是一个安装非常的简单、配置文件非常简洁（还能够支持perl语法）、Bug非常少的服务。Nginx 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够不间断服务的情况下进行软件版本的升级。</p><p>Nginx代码完全用C语言从头写成。官方数据测试表明能够支持高达 50,000 个并发连接数的响应。</p><h1 id="WHY—Nginx？"><a href="#WHY—Nginx？" class="headerlink" title="WHY—Nginx？"></a>WHY—Nginx？</h1><p>负载均衡，反向代理，静态缓存。</p><p>1 负载均衡<br>Nginx提供的负载均衡策略有2种：内置策略和扩展策略。<br>内置策略：轮询，加权轮询，IP-hash。<br>扩展策略，形式多样。</p><p>轮询—-依次循环<br>加权轮询—按权重比例分发请求<br>iphash—对ip进行hash操作，固定IP永远打一台服务器，解决Session共享。但是现在都是用Redis做共享；</p><p>2 代理<br>正向代理—代理客户端<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy46bdad36-d3e0-43b0-a223-43360b7e8fc7.png"></p><p>反向代理—代理服务端<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy62a15097-6e2a-4dbe-bcf5-f0d7cab81089.png"></p><p>3 缓存<br>动静分离可以根据静态资源的特点将其做缓存操作。提高资源响应的速度。</p><h1 id="HOW—Nginx"><a href="#HOW—Nginx" class="headerlink" title="HOW—Nginx?"></a>HOW—Nginx?</h1><p>Nginx的安装<br>1、下载nginx<br><a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a> 下载稳定版本。</p><p>2、启动nginx<br>有很多种方法启动nginx<br>(1)直接双击nginx.exe，双击后一个黑色的弹窗一闪而过<br>(2)打开cmd命令窗口，切换到nginx解压目录下，输入命令 nginx.exe ，回车即可</p><p>3、检查nginx是否启动成功<br>直接在浏览器地址栏输入网址 <a href="http://localhost/">http://localhost:80</a> 回车，出现以下页面说明启动成功！<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudya21688c8-159e-4caa-8e65-3dc056b6b78e.png"></p><p>4、配置监听<br>nginx的配置文件是conf目录下的nginx.conf，默认配置的nginx监听的端口。<br>重启：nginx -s reload</p><p>5、关闭nginx<br>如果使用cmd命令窗口启动nginx， 关闭cmd窗口是不能结束nginx进程的，可使用两种方法关闭nginx<br>(1)输入nginx命令 nginx -s stop(快速停止nginx) 或 nginx -s quit(完整有序的停止nginx)<br>(2)使用taskkill taskkill /f /t /im nginx.exe</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nginx常用命令</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;</span><br><span class="line">.&#x2F;nginx  启动</span><br><span class="line">.&#x2F;nginx -s stop  停止</span><br><span class="line">.&#x2F;nginx -s quit  安全退出</span><br><span class="line">.&#x2F;nginx -s reload  重新加载配置文件</span><br><span class="line">ps aux|grep nginx  查看nginx进程</span><br><span class="line">启动成功访问 服务器ip:80</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TIPS：连接不上阿里云或者LINUX服务器，检查安全组是否开放端口，或者服务器防火墙是否开放端口！</span><br><span class="line">相关命令：</span><br><span class="line"># 开启</span><br><span class="line">service firewalld start</span><br><span class="line"># 重启</span><br><span class="line">service firewalld restart</span><br><span class="line"># 关闭</span><br><span class="line">service firewalld stop</span><br><span class="line"># 查看防火墙规则</span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"># 查询端口是否开放</span><br><span class="line">firewall-cmd --query-port&#x3D;8080&#x2F;tcp</span><br><span class="line"># 开放80端口</span><br><span class="line">firewall-cmd --permanent --add-port&#x3D;80&#x2F;tcp</span><br><span class="line"># 移除端口</span><br><span class="line">firewall-cmd --permanent --remove-port&#x3D;8080&#x2F;tcp</span><br><span class="line">#重启防火墙(修改配置后要重启防火墙)</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"># 参数解释</span><br><span class="line">1、firwall-cmd：是Linux提供的操作firewall的一个工具；</span><br><span class="line">2、--permanent：表示设置为持久；</span><br><span class="line">3、--add-port：标识添加的端口；</span><br><span class="line">演示</span><br><span class="line">upstream lb&#123;</span><br><span class="line">    server 127.0.0.1:8080 weight&#x3D;1;</span><br><span class="line">    server 127.0.0.1:8081 weight&#x3D;1;</span><br><span class="line">&#125;</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;lb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>爱乐之城</title>
    <link href="http://tomasonl.github.io/2021/02/23/%E7%88%B1%E4%B9%90%E4%B9%8B%E5%9F%8E/"/>
    <id>http://tomasonl.github.io/2021/02/23/%E7%88%B1%E4%B9%90%E4%B9%8B%E5%9F%8E/</id>
    <published>2021-02-23T06:05:21.000Z</published>
    <updated>2021-02-23T06:30:15.150Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Five-Hundred-Miles"><a href="#Five-Hundred-Miles" class="headerlink" title="Five Hundred Miles"></a>Five Hundred Miles</h2><p>If you miss the train I’m on,   You will know that I am gone,</p><p>You can hear the whistle blow a hundred miles.</p><p>A hundred miles, a hundred miles, A hundred miles, A hundred miles,</p><p>You can hear the whistle blow A hundred miles.</p><p>Lord, I’m one,  Lord, I’m two,  Lord I’m three,  Lord, I’m four,</p><p>Lord, I’m five hundred miles away from home. Away from home,</p><p>away from home, away from home,  away from home,</p><p>Lord, I’m five hundred miles away from home</p><p>Not a shirt on my back, Not a penny to my name.</p><p>Lord. I can’t go back home this-a way.</p><p>This-a way, this-a way, This-a way, this-a way,</p><p>Lord, I can’t go back home this-a way.</p><p><img src="https://img-blog.csdnimg.cn/20210223140949220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="成都"><a href="#成都" class="headerlink" title="成都"></a>成都</h2><p><img src="https://img-blog.csdnimg.cn/20210223141027909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_16,color_FFFFFF,t_70" alt="img"><br><img src="https://img-blog.csdnimg.cn/20210223141047112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="My-love"><a href="#My-love" class="headerlink" title="My love"></a>My love</h2><p><img src="https://img-blog.csdnimg.cn/20210223141105333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="盛夏的果实"><a href="#盛夏的果实" class="headerlink" title="盛夏的果实"></a>盛夏的果实</h2><p>C　　G 　　Am 　　E 　　　F 　　G 　　　C 　G<br>也许放弃　才能靠近你　不再见你　你才会把我记起<br>你曾说过　会永远爱我　也许承诺　不过证明没把握<br>C　　G 　　Am 　　E    　C 　　　G 　　　Am<br>时间累积　这盛夏的果实　回忆里　寂寞的香气<br>不用难过　不用掩饰什么　当结果是那么赤裸裸<br>　　F 　　　G 　    C-G- Am  　　F　　　 　Am<br>我要试着离开你　不要再想 你　虽然这并不是我本意<br>其实不用说什么　才能离开 我　起码那些经过属于我<br>C　　G 　　Am 　　E 　　　F 　　G 　　　C 　G<br>你曾说过　会永远爱我　也许承诺　不过因为没把握<br>也许放弃　才能靠近你　不再见你　你才会把我记起<br>C　　G 　　Am 　　E    　C 　　　G 　　　Am<br>别用沉默　再去掩饰什么　当结果是那么赤裸裸<br>时间累积　这剩下的果实　回忆里　爱情的香气<br>　　F 　　　G 　    C-G- Am  　　F　　　 　Am<br>以为你会说什么　才会离开 我　你只是转过头不看我<br>我以为不露痕迹　思念却满 溢　或许这代表了我的心<br>F2  　C2 　F  　AM   F  　　 C G  Am　   D 　    Am<br>不要刻意说你还爱我　 当看尽潮起潮 落　只要　 你记得我<br>F  　   C G　Am    D 　 Em  Am　　　<br>如果你会梦见 我　请你　 再抱紧我<br><img src="https://img-blog.csdnimg.cn/20210223141117629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_16,color_FFFFFF,t_70" alt="img"> </p><h2 id="好久不见"><a href="#好久不见" class="headerlink" title="好久不见"></a>好久不见</h2><p>C      Em    Am    F             G   C     Am               F     G<br>我来到你的城市  走过你 来时的路 想像着没我的日子 你是怎样的孤独<br>C      Am            F         G  C        Am            F    G    C<br>拿着你给的照片 熟悉的那一条街 只是没了你的画面 我们回不到那天<br>C      Em   Am(G)  Fm            G    Dm      Em    Am   Dm          G<br>你会不忽然的出现 在街角的咖啡店 我会带笑脸挥手寒喧 和你坐着聊聊 天<br>C           G      Am(G)  Fm        G   Dm          Em    Am  Dm<br>我多么想和你见一面 看看你最近改变 不再去说从前 只是寒喧 对你说一句<br>    C   G$      C<br>只是说一句好久不见<br><img src="https://img-blog.csdnimg.cn/20210223141136708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="声声慢"><a href="#声声慢" class="headerlink" title="声声慢"></a>声声慢</h2><p><img src="https://img-blog.csdnimg.cn/20210223141325194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="南方姑娘"><a href="#南方姑娘" class="headerlink" title="南方姑娘"></a>南方姑娘</h2><p><img src="https://img-blog.csdnimg.cn/20210223141347803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_16,color_FFFFFF,t_70" alt="img"><br><img src="https://img-blog.csdnimg.cn/20210223141354281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_16,color_FFFFFF,t_70" alt="img"><br><img src="https://img-blog.csdnimg.cn/20210223141401582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_16,color_FFFFFF,t_70" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="生活随笔" scheme="http://tomasonl.github.io/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>阿里云CDN架构梳理</title>
    <link href="http://tomasonl.github.io/2021/02/20/%E9%98%BF%E9%87%8C%E4%BA%91CDN%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98/"/>
    <id>http://tomasonl.github.io/2021/02/20/%E9%98%BF%E9%87%8C%E4%BA%91CDN%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98/</id>
    <published>2021-02-20T08:29:32.000Z</published>
    <updated>2021-02-23T07:12:39.848Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>阿里云CDN-演变之路</strong></p><p>​                                                                  ——阿里云高级开发工程师 邓茜(沐沂)</p><ul><li>静态资源分发</li><li>动态资源加速</li><li>源站保护机制</li><li>SSL、HTTP</li></ul><p>5000+边缘节点，中美节点之间解决网络延迟大的问题；</p><p><strong>Service-Mesh Webinar</strong></p><p>“Webinar”——网络视频研讨会,是基于互联网实现点对点连接,可以集成幻灯片演示文稿、音频或视频文件于一体,能将企业所要求推广的信息立体呈现.</p><p><strong>节点架构:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/tomasonl/CDNRepo@1.2/Pic/article/1.png" alt="img"></p><p><strong>从以上架构看到一些问题：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/tomasonl/CDNRepo@1.2/Pic/article/2.png" alt="img"></p><p><strong>所以调整了微服务架构如下：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/tomasonl/CDNRepo@1.2/Pic/article/3.png" alt="img"></p><p><strong>技术方案—第一阶段：基于CoreDNS的服务发现</strong></p><p><img src="https://cdn.jsdelivr.net/gh/tomasonl/CDNRepo@1.2/Pic/article/4.png" alt="img"></p><p>修改DNS IP和策略</p><p><img src="https://cdn.jsdelivr.net/gh/tomasonl/CDNRepo@1.2/Pic/article/5.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/tomasonl/CDNRepo@1.2/Pic/article/6.png" alt="img"></p><p>UDP转发、伪连接；</p><p><img src="https://cdn.jsdelivr.net/gh/tomasonl/CDNRepo@1.2/Pic/article/7.png" alt="img"></p><p>广播，向所有host 转发请求，在streamFilter里面实现。</p><p><img src="https://cdn.jsdelivr.net/gh/tomasonl/CDNRepo@1.2/Pic/article/8.png" alt="img"></p><p><strong>技术方案—第二阶段：ServiceMesh架构</strong></p><p><img src="https://cdn.jsdelivr.net/gh/tomasonl/CDNRepo@1.2/Pic/article/9.png" alt="img"></p><p>pilot </p><p><img src="https://cdn.jsdelivr.net/gh/tomasonl/CDNRepo@1.2/Pic/article/10.png" alt="img"></p><p>小特点：跨容器的热升级；</p><p><img src="https://cdn.jsdelivr.net/gh/tomasonl/CDNRepo@1.2/Pic/article/11.png" alt="img"></p><p>Istio适配</p><p><img src="https://cdn.jsdelivr.net/gh/tomasonl/CDNRepo@1.2/Pic/article/12.png" alt="img"></p><p>协议</p><p><img src="https://cdn.jsdelivr.net/gh/tomasonl/CDNRepo@1.2/Pic/article/13.png" alt="img"></p><p>新增服务，导入顺序</p><p><img src="https://cdn.jsdelivr.net/gh/tomasonl/CDNRepo@1.2/Pic/article/14.png" alt="img"></p><p><strong>总结</strong></p><p>目前落地几十个IDC、完善节点动态监控等</p><p>后面需要加入虚机服务发现：</p><p><img src="https://cdn.jsdelivr.net/gh/tomasonl/CDNRepo@1.2/Pic/article/15.png" alt="img"></p><p> <a href="/download/%E9%98%BF%E9%87%8C%E4%BA%91CDN-%E6%BC%94%E5%8F%98%E4%B9%8B%E8%B7%AF.pdf">您也可以点击此处下载该文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>牛年大吉</title>
    <link href="http://tomasonl.github.io/2021/02/10/%E7%89%9B%E5%B9%B4%E5%A4%A7%E5%90%89/"/>
    <id>http://tomasonl.github.io/2021/02/10/%E7%89%9B%E5%B9%B4%E5%A4%A7%E5%90%89/</id>
    <published>2021-02-10T01:07:49.000Z</published>
    <updated>2021-04-13T02:23:02.653Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="辞旧迎新，牛年大吉"><a href="#辞旧迎新，牛年大吉" class="headerlink" title="辞旧迎新，牛年大吉"></a>辞旧迎新，牛年大吉</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;腊月二十九，今天还在公司上班。今天上午的主要任务就是帮姥爷完成答应他老人家两年的家谱；这一点就体现了明日复明日，明日何其多的精髓。总是拖到最后才会做，这一点非常不好。2021，改掉自己的坏脾气、坏毛病，从践行自己的承诺开始；</p><p><strong>新的一年，新的希望。越努力，越幸运</strong></p><img src='https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=286867552,4021368242&fm=26&gp=0.jpg'><h3 id="牛牛来，希望新的一年，工作更加顺利！"><a href="#牛牛来，希望新的一年，工作更加顺利！" class="headerlink" title="牛牛来，希望新的一年，工作更加顺利！"></a>牛牛来，希望新的一年，工作更加顺利！</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;ZJRCU，福利待遇真的是太好了。机缘巧合能来到杭州工作也是老天馈赠的一份礼物吧。单位的人文关怀和工作氛围可能就是为我这样的人量身打造的。既要努力奋进也要乐在其中。毕竟生活就是这些元素的组成，所以不要忘了努力和快乐！</p><img src='http://pic1.win4000.com/wallpaper/5/554ac4a42321d.jpg'><h3 id="牛牛来，希望新的一年，世界和平！"><a href="#牛牛来，希望新的一年，世界和平！" class="headerlink" title="牛牛来，希望新的一年，世界和平！"></a>牛牛来，希望新的一年，世界和平！</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;希望我的家庭更加和美，亲人之间更加理解包容。希望国家之间协同发展，世界和平！</p><h3 id="牛牛来，希望新的一年，继续平安喜乐！"><a href="#牛牛来，希望新的一年，继续平安喜乐！" class="headerlink" title="牛牛来，希望新的一年，继续平安喜乐！"></a>牛牛来，希望新的一年，继续平安喜乐！</h3><p>越努力，越幸运！</p><img src='http://pic1.win4000.com/m00/4f/e6/22d5f52dbe12ed6493f300db3fc8fa56.jpg'>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="生活随笔" scheme="http://tomasonl.github.io/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>秒杀系统001</title>
    <link href="http://tomasonl.github.io/2021/01/18/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F001/"/>
    <id>http://tomasonl.github.io/2021/01/18/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F001/</id>
    <published>2021-01-18T08:29:32.000Z</published>
    <updated>2021-04-13T02:23:55.235Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://note.youdao.com/yws/public/resource/a9fa894e69fd68f9fca3297d13845d51/xmlnote/676E09E270FA44A89E3A64AE97285858/7215"><img src="https://note.youdao.com/yws/public/resource/a9fa894e69fd68f9fca3297d13845d51/xmlnote/75FA9F00EE11448BADD8DCC5D5F352BE/7222"><h3 id="utf8和utf8mb4的区别"><a href="#utf8和utf8mb4的区别" class="headerlink" title="utf8和utf8mb4的区别"></a>utf8和utf8mb4的区别</h3><p>   MySQL在5.5.3之后增加了这个utf8mb4的编码，mb4就是most bytes 4的意思，专门用来兼容四字节的unicode。好在utf8mb4是utf8的超集，除了将编码改为utf8mb4外不需要做其他转换。一般情况下使用utf8也就够了。<br>   既然utf8能够存下大部分中文汉字,那为什么还要使用utf8mb4呢? 原来mysql支持的 utf8 编码最大字符长度为 3 字节，如果遇到 4 字节的宽字符就会插入异常了。三个字节的 UTF-8 最大能编码的 Unicode 字符是 0xffff，也就是 Unicode 中的基本多文种平面(BMP)。utf8 不支持任何不在基本多文本平面的 Unicode字符。包括 Emoji 表情(Emoji 是一种特殊的 Unicode 手机上常见)、生僻字等等。</p><p>秒杀用户SQL</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> Navicat Premium Data Transfer</span><br><span class="line"></span><br><span class="line"> Source Server         : 本地数据库</span><br><span class="line"> Source Server Type    : MySQL</span><br><span class="line"> Source Server Version : 80022</span><br><span class="line"> Source Host           : localhost:3306</span><br><span class="line"> Source Schema         : seckill</span><br><span class="line"></span><br><span class="line"> Target Server Type    : MySQL</span><br><span class="line"> Target Server Version : 80022</span><br><span class="line"> File Encoding         : 65001</span><br><span class="line"></span><br><span class="line"> Date: 18&#x2F;01&#x2F;2021 10:38:24</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for t_user</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;t_user&#96;;</span><br><span class="line">CREATE TABLE &#96;t_user&#96;  (</span><br><span class="line">  &#96;id&#96; bigint NOT NULL COMMENT &#39;用户id-手机号码&#39;,</span><br><span class="line">  &#96;nickname&#96; varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  &#96;password&#96; varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#39;Md5加密两次&#39;,</span><br><span class="line">  &#96;slat&#96; varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#39; 加盐&#39;,</span><br><span class="line">  &#96;head&#96; varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#39;头像&#39;,</span><br><span class="line">  &#96;register_date&#96; datetime NULL DEFAULT NULL COMMENT &#39;注册时间&#39;,</span><br><span class="line">  &#96;last_login_date&#96; datetime NULL DEFAULT NULL,</span><br><span class="line">  &#96;login_count&#96; int NULL DEFAULT 0 COMMENT &#39;登录次数&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8mb4 COLLATE &#x3D; utf8mb4_0900_ai_ci ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of t_user</span><br><span class="line">-- ----------------------------</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Md5加密Util</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.xxxx.seckill.util;</span><br><span class="line">import org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line">&#x2F;*</span><br><span class="line"> *@program:seckill-demo</span><br><span class="line"> *@author: Tomasonlee</span><br><span class="line"> *@Time: 2021&#x2F;1&#x2F;18  10:43</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Md5Util &#123;</span><br><span class="line">    public static String md5(String args) &#123;</span><br><span class="line">        return DigestUtils.md5Hex(args);</span><br><span class="line">    &#125;</span><br><span class="line">    private static final String salt&#x3D;&quot;1a2b3c4d&quot;;</span><br><span class="line"></span><br><span class="line">    public static String inputPassToFormPass(String inputPass)&#123;</span><br><span class="line">        String str &#x3D; salt.charAt(0)+salt.charAt(2)+inputPass+salt.charAt(5)+salt.charAt(4);</span><br><span class="line">        return md5(str);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;二次加密  后端密码到数据库密码</span><br><span class="line">    public static String fromPassToDBPass(String formPass,String salt)&#123;</span><br><span class="line">        String str &#x3D; salt.charAt(0)+salt.charAt(2)+formPass+salt.charAt(5)+salt.charAt(4);</span><br><span class="line">        return md5(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String inputPassToDBPass(String inputPass,String salt)&#123;</span><br><span class="line">        String fromPass &#x3D; inputPassToFormPass(inputPass);</span><br><span class="line">        String dbPass &#x3D; fromPassToDBPass(fromPass,salt);</span><br><span class="line">        return dbPass;</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;    public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;        System.out.println(inputPassToFormPass(&quot;123456&quot;));</span><br><span class="line">&#x2F;&#x2F;        System.out.println(fromPassToDBPass(&quot;ce21b747de5af71ab5c2e20ff0a60eea&quot;,&quot;1a2b3c4d&quot;));</span><br><span class="line">&#x2F;&#x2F;        System.out.println(inputPassToDBPass(&quot;123456&quot;,&quot;1a2b3c4d&quot;));</span><br><span class="line">&#x2F;&#x2F;    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码JSR303参数校验简化代码"><a href="#代码JSR303参数校验简化代码" class="headerlink" title="代码JSR303参数校验简化代码"></a>代码JSR303参数校验简化代码</h3><h4 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1.依赖"></a>1.依赖</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- validation组件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-validation&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="Valid注解"><a href="#Valid注解" class="headerlink" title="@Valid注解"></a>@Valid注解</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public RespBean doLogin(@Valid LoginVo loginVo)&#123;</span><br><span class="line">    log.info(&quot;输入的登录信息为&#123;&#125;&quot;,loginVo);</span><br><span class="line">    return userService.doLogin(loginVo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@notnull等注解 + 自定义注解</span><br><span class="line">@Data</span><br><span class="line">public class LoginVo &#123;</span><br><span class="line">    @NotNull</span><br><span class="line">    @IsMobile</span><br><span class="line">    private String mobile;</span><br><span class="line">    @NotNull</span><br><span class="line">    @Length(min&#x3D;32)</span><br><span class="line">    private String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义注解-IsMobile"><a href="#自定义注解-IsMobile" class="headerlink" title="自定义注解@IsMobile"></a>自定义注解@IsMobile</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.xxxx.seckill.validator;</span><br><span class="line">import javax.validation.Constraint;</span><br><span class="line">import javax.validation.Payload;</span><br><span class="line">import java.lang.annotation.*;</span><br><span class="line">&#x2F;*</span><br><span class="line"> *@program:seckill-demo</span><br><span class="line"> *@author: Tomasonlee</span><br><span class="line"> *@Time: 2021&#x2F;1&#x2F;18  19:16</span><br><span class="line"> * lee写的第一个自定义注解</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Constraint(</span><br><span class="line">        validatedBy &#x3D; &#123;IsMobileValidator.class&#125;</span><br><span class="line">)</span><br><span class="line">public @interface IsMobile &#123;</span><br><span class="line"></span><br><span class="line">    boolean required() default true;</span><br><span class="line"></span><br><span class="line">    String message() default &quot;手机号码格式错误&quot;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IsMobileValidator </span><br><span class="line">package com.xxxx.seckill.validator;</span><br><span class="line"></span><br><span class="line">import com.xxxx.seckill.util.ValidatorUtil;</span><br><span class="line">import org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line">import javax.validation.ConstraintValidator;</span><br><span class="line">import javax.validation.ConstraintValidatorContext;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> *@program:seckill-demo</span><br><span class="line"> *@author: Tomasonlee</span><br><span class="line"> *@Time: 2021&#x2F;1&#x2F;18  19:19</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class IsMobileValidator implements ConstraintValidator&lt;IsMobile, String&gt; &#123;</span><br><span class="line">    private boolean required &#x3D; false;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void initialize(IsMobile constraintAnnotation) &#123;</span><br><span class="line">        required &#x3D; constraintAnnotation.required();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isValid(String value, ConstraintValidatorContext context) &#123;</span><br><span class="line">        if (required) &#123;</span><br><span class="line">            return ValidatorUtil.isMobile(value);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (StringUtils.isEmpty(value)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return ValidatorUtil.isMobile(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ValidatorUtil"><a href="#ValidatorUtil" class="headerlink" title="ValidatorUtil"></a>ValidatorUtil</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.xxxx.seckill.util;</span><br><span class="line">import org.springframework.util.StringUtils;</span><br><span class="line">import java.util.regex.Matcher;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> *@program:seckill-demo</span><br><span class="line"> *@author: Tomasonlee</span><br><span class="line"> *@Time: 2021&#x2F;1&#x2F;18  19:23</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ValidatorUtil &#123;</span><br><span class="line">    private static final Pattern mobile_pattern &#x3D; Pattern.compile(&quot;[1]([3-9])[0-9]&#123;9&#125;$&quot;);</span><br><span class="line"></span><br><span class="line">    public static boolean isMobile(String mobile) &#123;</span><br><span class="line">        if (StringUtils.isEmpty(mobile)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        Matcher matcher &#x3D; mobile_pattern.matcher(mobile);</span><br><span class="line">        return matcher.matches();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>生活随笔2</title>
    <link href="http://tomasonl.github.io/2021/01/17/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%942/"/>
    <id>http://tomasonl.github.io/2021/01/17/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%942/</id>
    <published>2021-01-17T12:34:29.000Z</published>
    <updated>2021-04-15T01:06:40.865Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一切都在往好的方向发展"><a href="#一切都在往好的方向发展" class="headerlink" title="一切都在往好的方向发展"></a>一切都在往好的方向发展</h1><h2 id="心动2021！干就完了！！！"><a href="#心动2021！干就完了！！！" class="headerlink" title="心动2021！干就完了！！！"></a>心动2021！干就完了！！！</h2><p>冲，越努力，越幸运！ </p><p>今年过年可能因为疫情原因，就留在杭州了。万事如意，大吉大利！冲！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="生活随笔" scheme="http://tomasonl.github.io/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>前端进阶学习记录</title>
    <link href="http://tomasonl.github.io/2021/01/15/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://tomasonl.github.io/2021/01/15/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2021-01-15T08:29:32.000Z</published>
    <updated>2021-03-11T07:21:32.380Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、前端开发和前端开发工具</span><br><span class="line">2、Nodejs安装及快速入门</span><br><span class="line">3、Es6的新语法糖</span><br><span class="line">4、Npm包管理器</span><br><span class="line">5、Babel的安装作用</span><br><span class="line">6、模块化管理</span><br><span class="line">7、Webpack打包和编译</span><br><span class="line">8、如何快速构建一个nodejs项目vue-element-admin</span><br></pre></td></tr></table></figure><h1 id="01、概述和前端工具vscode安装"><a href="#01、概述和前端工具vscode安装" class="headerlink" title="01、概述和前端工具vscode安装"></a>01、概述和前端工具vscode安装</h1><p>前端开发是创建Web页面或app等前端界面呈现给用户的过程，通过HTML，CSS及JavaScript以及衍生出来的各种技术、框架、解决方案，来实现互联网产品的用户界面交互 [1] 。它从网页制作演变而来，名称上有很明显的时代特征。在互联网的演化进程中，网页制作是Web1.0时代的产物，==早期网站主要内容都是静态，以图片和文字为主==，用户使用网站的行为也以浏览为主。随着互联网技术的发展和HTML5、CSS3的应用，现代网页更加美观，交互效果显著，功能更加强大。 [2]</p><p>移动互联网带来了大量高性能的移动终端设备以及快速的无线网络，HTML5，node.jS的广泛应用，各类框架类库层出不穷。 [1]</p><p>当下国内的大部分互联网公司只有前端工程师和后端工程师，中间层的工作有的由前端来完成，有的由后端来完成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>华为云PaaS平台-服务引擎CSE开发-（2）</title>
    <link href="http://tomasonl.github.io/2021/01/02/PaaS2/"/>
    <id>http://tomasonl.github.io/2021/01/02/PaaS2/</id>
    <published>2021-01-02T08:29:32.000Z</published>
    <updated>2021-01-11T05:54:20.638Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="华为云实战"><a href="#华为云实战" class="headerlink" title="华为云实战"></a>华为云实战</h1><h2 id="ServiceComb-项目接入CSE"><a href="#ServiceComb-项目接入CSE" class="headerlink" title="ServiceComb 项目接入CSE"></a>ServiceComb 项目接入CSE</h2><p>父工程依赖管理配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;      </span><br><span class="line">&lt;dependencies&gt;  </span><br><span class="line">&lt;dependency&gt;              </span><br><span class="line">      &lt;groupId&gt;com.huawei.paas.cse&lt;&#x2F;groupId&gt;              </span><br><span class="line">      &lt;artifactId&gt;cse‐dependency&lt;&#x2F;artifactId&gt;              </span><br><span class="line">      &lt;version&gt;2.3.20&lt;&#x2F;version&gt;              </span><br><span class="line">      &lt;type&gt;pom&lt;&#x2F;type&gt;              </span><br><span class="line">      &lt;scope&gt;import&lt;&#x2F;scope&gt;          </span><br><span class="line">&lt;&#x2F;dependency&gt;  </span><br><span class="line">&lt;&#x2F;dependencies&gt;  </span><br><span class="line">&lt;&#x2F;dependencyManagement&gt;</span><br></pre></td></tr></table></figure><p>消费和服务方引入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.huawei.paas.cse&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cse‐solution‐service‐engine&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>注册中心配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PPLICATION_ID: helloworld</span><br><span class="line">service_description:</span><br><span class="line">  name: helloworld‐provider</span><br><span class="line">  version: 1.0.0</span><br><span class="line">cse:</span><br><span class="line">  service:</span><br><span class="line">    registry:</span><br><span class="line">      address: https:&#x2F;&#x2F;cse.cn‐north‐1.myhuaweicloud.com</span><br><span class="line">      instance:</span><br><span class="line">        watch: false</span><br><span class="line">  credentials:</span><br><span class="line">    accessKey: CMPEUCGEDINQKGWBGHVB</span><br><span class="line">    secretKey: HEYSZL5zTw6HLfPEOxzGnWpbzLwHWAylUc99vMtd</span><br><span class="line">    akskCustomCipher: default</span><br><span class="line">  rest:</span><br><span class="line">    address: 0.0.0.0:8080</span><br></pre></td></tr></table></figure><p>然后就可以访问和消费服务了。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>华为云PaaS平台-服务引擎CSE开发-（1）</title>
    <link href="http://tomasonl.github.io/2021/01/01/%E5%8D%8E%E4%B8%BA%E4%BA%91PaaS%E5%B9%B3%E5%8F%B0-%E6%9C%8D%E5%8A%A1%E5%BC%95%E6%93%8ECSE%E5%BC%80%E5%8F%91/"/>
    <id>http://tomasonl.github.io/2021/01/01/%E5%8D%8E%E4%B8%BA%E4%BA%91PaaS%E5%B9%B3%E5%8F%B0-%E6%9C%8D%E5%8A%A1%E5%BC%95%E6%93%8ECSE%E5%BC%80%E5%8F%91/</id>
    <published>2021-01-01T04:29:32.000Z</published>
    <updated>2021-01-11T06:03:19.021Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="初识华为云"><a href="#初识华为云" class="headerlink" title="初识华为云"></a>初识华为云</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;华为云PaaS平台以华为FusionStage2.0项目为基础，基于Docker、Kubernetes等主流开源容器项目，提供了开发、测试、部署、运维的全流程自动化流水线能力，提供先进的微服务框架和丰富的服务组件，致力于让开发者专注于代码开发本身，提升开发效率，支持丰富的应用生态，推动企业更好的云化转型。<br>&nbsp;&nbsp;&nbsp;&nbsp;华为云PaaS平台不光提供云容器部署、微服务治理的功能，而且提供微服务开发、测试、部署、运维一站式解决方 案，支持Dubbo、SpringCloud等技术开发的微服务接入PaaS平台，也支持老系统的接入，并且对于Apache ServiceComb开的微服务应用更是零修改代码接入。华为云PaaS平台提供微服务引擎CSE框架，此框架在ServiceComb框架的基础上另外提供更多的商业功能支持。</p><h2 id="华为WeatherMap案例体验"><a href="#华为WeatherMap案例体验" class="headerlink" title="华为WeatherMap案例体验"></a>华为WeatherMap案例体验</h2><img src="https://img-blog.csdnimg.cn/20210107155857525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_16,color_FFFFFF,t_70"><ul><li>Weathermapweb ：前端界面服务，提供天气信息展示及查询界面。</li><li>Fusionweather ：汇聚服务，前端请求查询天气统一Fusionweather服务，它相当于一个网关。</li><li>Weather ：当前天气查询，前端请求汇聚服务查询天气，汇聚服务请求Weather查询天气。</li><li>Forecast ：预报天气，查询未来天气信息，同Weather服务，汇聚服务请求Forecast查询未来天气信息。</li></ul><ol><li>配置环境<br>华为云环境部署-微服务会连接华为云上的CSE服务中心、配置中心、仪表盘，本节配置华为云账号。</li></ol><p><strong>AK/SK访问密钥</strong>验证调用API发起请求的访问者身份，与密码的功能相似，需要使用成对的AK/SK进行加密签名确保请求的机密性、完整性和请求双方身份的正确性。用户可以在“我的凭证”中生成并管理访问密钥。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取步骤：</span><br><span class="line">1. 单击用户名，在下拉列表中单击“基本信息”。</span><br><span class="line">2. 在基本信息页面单击“管理我的凭证”。</span><br><span class="line">3. 单击“管理访问密钥”。</span><br><span class="line">4. 单击“新增访问密钥”，进入“新增访问密钥”页面。</span><br><span class="line">5. 输入当前用户的登录密码。</span><br><span class="line">6. 通过邮箱或者手机进行验证，输入对应的验证码。</span><br><span class="line">7. 下载credentials.csv文件，文件内容包括了 AK和SK。</span><br></pre></td></tr></table></figure><p>也就是一个服务注册的东西。本地没有注册中心，注册中心在云上，本地启动服务注册到云平台。微服务引擎CSE，里面的服务目录就知道你跑了多少实例微服务。<br>所以需要解决问题1：怎样把我们的微服务注册到云平台注册中心。<br>2. 服务治理<br><img src="https://img-blog.csdnimg.cn/20210107161954345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_16,color_FFFFFF,t_70"><br>治理过程主要包括{服务的监控、服务降级（合理分配资源，砍掉不重要服务）、负载均衡等}</p><h2 id="微服务框架ServiceComb"><a href="#微服务框架ServiceComb" class="headerlink" title="微服务框架ServiceComb"></a>微服务框架ServiceComb</h2><p>2017年华为开源的微服务框架，主要也是微服务开发治理。相比于SpringCloud，华为积淀了很多企业级开发经验。service comb（service koumu）服务们的大梳子，梳理服务<br>ServiceComb相比SpringCloud的优势有什么？</p><ol><li>通信协议方面<br>SpringCloud仅支持Http的Rest。ServiceComb支持多种通信协议, Rest、RPC等;Highway（RPC）协议性能更高，Highway是基于二进制的序列化方式传输数据，性能远高于采用文本的HTTP协议。</li><li>集成与服务提供方面<br>ServiceComb的商业版本CSE相比SpringCloud不仅提供了微服务开发框架，还提供了微服务云部署，管理、治理等一站式解决方案。而且华为自己当然和自家产品无缝集成。</li></ol><p><strong>最小服务搭建</strong><br>通过@RestSchema替换@RestController<br>需要显示声明@RequestMapping</p><ul><li>provider服务提供方：<br>microservice.yaml：<figure class="highlight plain"><figcaption><span>helloworldproject</span></figcaption><table><tr><td class="code"><pre><span class="line">service_description:</span><br><span class="line">  name: helloworld‐provider</span><br><span class="line">  version: 1.0.0</span><br><span class="line">servicecomb:</span><br><span class="line">  rest:</span><br><span class="line">    address: 0.0.0.0:8080</span><br><span class="line">  service:</span><br><span class="line">    registry:</span><br><span class="line">      address: http:&#x2F;&#x2F;127.0.0.1:30100</span><br></pre></td></tr></table></figure></li><li>启动类：<br>@EnableServiceComb：启用java.chassis核心功能。<br>@SpringBootApplication：springBoot提供的注解，实现包扫描、自动配置。</li><li>provider服务消费方：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">APPLICATION_ID: helloworldproject</span><br><span class="line">service_description:</span><br><span class="line">  name: helloworld‐consumer</span><br><span class="line">  version: 1.0.0</span><br><span class="line">servicecomb:</span><br><span class="line">  rest:</span><br><span class="line">    address: 0.0.0.0:8081</span><br><span class="line">  service:</span><br><span class="line">    registry:</span><br><span class="line">      address: http:&#x2F;&#x2F;127.0.0.1:30100</span><br></pre></td></tr></table></figure></li></ul><p>至于调用方式：<br>SServiceComb提供RestTemplate、AsynRestTemplate、透明RPC方式调用服务接口。</p><ul><li>RestTemplate：Spring提供的RESTful访问接口，ServiceComb提供该接口的实现类用于服务的调用。</li><li>AsynRestTemplate：允许用户异步的进行服务调用。</li><li>透明RPC方式：允许用户通过简单的java interface像本地调用一样进行服务调用。透明在与与服务接口的协议、开发方式（使用SpringMVC方式、RPC/Jax-RS）无关，所以推荐。<br>采用透明PRC方式向服务调用controller中注入接口代理对象：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RpcReference(microserviceName&#x3D;&quot;helloworld‐provider&quot;,schemaId&#x3D;&quot;helloworld&quot;)</span><br><span class="line">HelloWorldInterface helloWorldInterface;</span><br></pre></td></tr></table></figure><h2 id="华为云Paas平台微服务引擎CSE"><a href="#华为云Paas平台微服务引擎CSE" class="headerlink" title="华为云Paas平台微服务引擎CSE"></a>华为云Paas平台微服务引擎CSE</h2><p>接触设施-平台-软件   Infrastructure 、Paltform、Software as a Service；<br>华为云：FusionCloud分为三部分</p><ul><li>Iaas-FusionSphere</li><li>Paas-FusionStage</li><li>大数据-FusionInsight</li></ul><p><strong>CSE</strong>cloudServiceEngine是华为云Paas提供的企业微服务应用管理平台。<br>提供：服务SDK（开发）、服务注册、配置和治理中心;<br>快速构建、实时监控和高可用。兼容主流开源生态，不绑定特定开发框架和平台。</p><p><strong>ServiceComb与CSE有什么不同？</strong><br>1、 CSE是ServiceComb的商业版本，CSE的大部分组件来自于开源的ServiceComb，CSE没有开源但可以免费使用。<br>2、 使用ServiceComb开发的微服务不依赖华为云，使用CSE开发的微服务则依赖华为云。</p><p><strong>所以为什么要用微服务引擎CSE？</strong><br>在云上使用CSE，用户无需关心自己业务之外的微服务基础设施，保证系统整体稳定性。<br>微服务部署，管理、治理全部开箱即用，还可以获得开发时期的指导和帮助，以及后续技术发展的最新信息。</p><p>英语角哈哈ヾ(≧▽≦*)o</p><ol><li>Fusion[ˈfjuːʒn]<br>n. 融合; 熔接; 结合; 核聚变; —fusionstage聚合平台；</li><li>Comb[kəʊm]<br>n. 梳子; 篦子; 压发梳; (作为装饰物的)发插; 梳理(头发); (公鸡的)鸡冠;<br>v. 梳，梳理(头发); 仔细搜索; 搜寻; 梳理(羊毛、棉花等) —serviceComb服务梳理；</li><li>KuberNets 库伯耐踢死 K8s 类似I18n（internationalization）<br>管理云平台中多个主机上的容器化，提供了应用部署，规划，更新，维护的一种机制。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>责任链设计模式</title>
    <link href="http://tomasonl.github.io/2020/12/23/%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://tomasonl.github.io/2020/12/23/%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-12-23T03:36:46.000Z</published>
    <updated>2020-12-23T03:52:11.637Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>抽象、归纳。总结</p><p>比如缓存，抽离出来功能，降低复杂度和耦合性！</p><p>每一个实现指向下一个，沿着链条传递。<br>1，扩展强。<br>2，灵活性。<br>3，独立性。</p><p>责任链模式：由多个部件，基于引用组成链条。行为上请求从链条的头部传递到各个节点，从而触发执行各个节点要负责的业务逻辑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
