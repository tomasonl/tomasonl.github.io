<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李响的技术博客</title>
  
  
  <link href="http://tomasonl.github.io/atom.xml" rel="self"/>
  
  <link href="http://tomasonl.github.io/"/>
  <updated>2021-01-19T00:27:26.829Z</updated>
  <id>http://tomasonl.github.io/</id>
  
  <author>
    <name>Tomasonlee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>秒杀系统001</title>
    <link href="http://tomasonl.github.io/2021/01/18/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F001/"/>
    <id>http://tomasonl.github.io/2021/01/18/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F001/</id>
    <published>2021-01-18T08:29:32.000Z</published>
    <updated>2021-01-19T00:27:26.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="http://note.youdao.com/noteshare?id=a9fa894e69fd68f9fca3297d13845d51&sub=7DC841B52F2A417C96BB88827B5B2929"><img src="http://note.youdao.com/noteshare?id=a9fa894e69fd68f9fca3297d13845d51&sub=7DC841B52F2A417C96BB88827B5B2929"><p>utf8和utf8mb4的区别<br>   MySQL在5.5.3之后增加了这个utf8mb4的编码，mb4就是most bytes 4的意思，专门用来兼容四字节的unicode。好在utf8mb4是utf8的超集，除了将编码改为utf8mb4外不需要做其他转换。一般情况下使用utf8也就够了。<br>   既然utf8能够存下大部分中文汉字,那为什么还要使用utf8mb4呢? 原来mysql支持的 utf8 编码最大字符长度为 3 字节，如果遇到 4 字节的宽字符就会插入异常了。三个字节的 UTF-8 最大能编码的 Unicode 字符是 0xffff，也就是 Unicode 中的基本多文种平面(BMP)。utf8 不支持任何不在基本多文本平面的 Unicode字符。包括 Emoji 表情(Emoji 是一种特殊的 Unicode 手机上常见)、生僻字等等。</p><p>/*<br> Navicat Premium Data Transfer</p><p> Source Server         : 本地数据库<br> Source Server Type    : MySQL<br> Source Server Version : 80022<br> Source Host           : localhost:3306<br> Source Schema         : seckill</p><p> Target Server Type    : MySQL<br> Target Server Version : 80022<br> File Encoding         : 65001</p><p> Date: 18/01/2021 10:38:24<br>*/</p><p>SET NAMES utf8mb4;<br>SET FOREIGN_KEY_CHECKS = 0;</p><hr><p>– Table structure for t_user</p><hr><p>DROP TABLE IF EXISTS <code>t_user</code>;<br>CREATE TABLE <code>t_user</code>  (<br>  <code>id</code> bigint NOT NULL COMMENT ‘用户id，手机号码’,<br>  <code>nickname</code> varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,<br>  <code>password</code> varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT ‘Md5加密 两次’,<br>  <code>slat</code> varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT ‘ 加盐’,<br>  <code>head</code> varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT ‘头像’,<br>  <code>register_date</code> datetime NULL DEFAULT NULL COMMENT ‘注册时间’,<br>  <code>last_login_date</code> datetime NULL DEFAULT NULL,<br>  <code>login_count</code> int NULL DEFAULT 0 COMMENT ‘登录次数’,<br>  PRIMARY KEY (<code>id</code>) USING BTREE<br>) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</p><hr><p>– Records of t_user</p><hr><p>SET FOREIGN_KEY_CHECKS = 1;</p><p>Md5加密Util<br>package com.xxxx.seckill.util;</p><p>import org.apache.commons.codec.digest.DigestUtils;</p><p>/*<br> *@program:seckill-demo<br> *@author: Tomasonlee<br> *@Time: 2021/1/18  10:43<br> */<br>public class Md5Util {<br>    public static String md5(String args) {<br>        return DigestUtils.md5Hex(args);<br>    }<br>    private static final String salt=”1a2b3c4d”;</p><pre><code>public static String inputPassToFormPass(String inputPass)&#123;    String str = salt.charAt(0)+salt.charAt(2)+inputPass+salt.charAt(5)+salt.charAt(4);    return md5(str);&#125;//二次加密  后端密码到数据库密码public static String fromPassToDBPass(String formPass,String salt)&#123;    String str = salt.charAt(0)+salt.charAt(2)+formPass+salt.charAt(5)+salt.charAt(4);    return md5(str);&#125;public static String inputPassToDBPass(String inputPass,String salt)&#123;    String fromPass = inputPassToFormPass(inputPass);    String dbPass = fromPassToDBPass(fromPass,salt);    return dbPass;&#125;</code></pre><p>//    public static void main(String[] args) {<br>//        System.out.println(inputPassToFormPass(“123456”));<br>//        System.out.println(fromPassToDBPass(“ce21b747de5af71ab5c2e20ff0a60eea”,”1a2b3c4d”));<br>//        System.out.println(inputPassToDBPass(“123456”,”1a2b3c4d”));<br>//    }</p><p>}</p><p>代码JSR303参数校验简化代码<br>依赖</p><!-- validation组件 --><dependency>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-starter-validation</artifactId></dependency><p>@Valid注解<br>public RespBean doLogin(@Valid LoginVo loginVo){<br>    log.info(“输入的登录信息为{}”,loginVo);<br>    return userService.doLogin(loginVo);<br>}</p><p>@notnull等注解 + 自定义注解<br>@Data<br>public class LoginVo {<br>    @NotNull<br>    @IsMobile<br>    private String mobile;<br>    @NotNull<br>    @Length(min=32)<br>    private String password;<br>}</p><p>自定义注解@IsMobile<br>package com.xxxx.seckill.validator;</p><p>import javax.validation.Constraint;<br>import javax.validation.Payload;<br>import java.lang.annotation.*;</p><p>/*<br> *@program:seckill-demo<br> *@author: Tomasonlee<br> *@Time: 2021/1/18  19:16</p><ul><li><p>lee写的第一个自定义注解</p></li><li><p>/<br>@Target({ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE})<br>@Retention(RetentionPolicy.RUNTIME)<br>@Documented<br>@Constraint(</p><pre><code>  validatedBy = &#123;IsMobileValidator.class&#125;</code></pre><p>)<br>public @interface IsMobile {</p><p>  boolean required() default true;</p><p>  String message() default “手机号码格式错误”;</p><p>  Class&lt;?&gt;[] groups() default {};</p><p>  Class&lt;? extends Payload&gt;[] payload() default {};<br>}</p></li></ul><p>IsMobileValidator<br>package com.xxxx.seckill.validator;</p><p>import com.xxxx.seckill.util.ValidatorUtil;<br>import org.springframework.util.StringUtils;</p><p>import javax.validation.ConstraintValidator;<br>import javax.validation.ConstraintValidatorContext;</p><p>/*<br> *@program:seckill-demo<br> *@author: Tomasonlee<br> *@Time: 2021/1/18  19:19<br> */<br>public class IsMobileValidator implements ConstraintValidator&lt;IsMobile, String&gt; {<br>    private boolean required = false;</p><pre><code>@Overridepublic void initialize(IsMobile constraintAnnotation) &#123;    required = constraintAnnotation.required();&#125;@Overridepublic boolean isValid(String value, ConstraintValidatorContext context) &#123;    if (required) &#123;        return ValidatorUtil.isMobile(value);    &#125; else &#123;        if (StringUtils.isEmpty(value)) &#123;            return true;        &#125; else &#123;            return ValidatorUtil.isMobile(value);        &#125;    &#125;&#125;</code></pre><p>}</p><p>ValidatorUtil<br>package com.xxxx.seckill.util;</p><p>import org.springframework.util.StringUtils;</p><p>import java.util.regex.Matcher;<br>import java.util.regex.Pattern;</p><p>/*<br> *@program:seckill-demo<br> *@author: Tomasonlee<br> *@Time: 2021/1/18  19:23<br> */<br>public class ValidatorUtil {<br>    private static final Pattern mobile_pattern = Pattern.compile(“<a href="%5B3-9%5D">1</a>[0-9]{9}$”);</p><pre><code>public static boolean isMobile(String mobile) &#123;    if (StringUtils.isEmpty(mobile)) &#123;        return false;    &#125;    Matcher matcher = mobile_pattern.matcher(mobile);    return matcher.matches();&#125;</code></pre><p>}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>生活随笔3</title>
    <link href="http://tomasonl.github.io/2021/01/17/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%942/"/>
    <id>http://tomasonl.github.io/2021/01/17/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%942/</id>
    <published>2021-01-17T12:34:29.000Z</published>
    <updated>2021-01-17T12:36:09.253Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一切都在往好的方向发展"><a href="#一切都在往好的方向发展" class="headerlink" title="一切都在往好的方向发展"></a>一切都在往好的方向发展</h1><h2 id="心动2021！干就完了！！！"><a href="#心动2021！干就完了！！！" class="headerlink" title="心动2021！干就完了！！！"></a>心动2021！干就完了！！！</h2><p>冲，越努力，越幸运！ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="生活随笔" scheme="http://tomasonl.github.io/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>华为云PaaS平台-服务引擎CSE开发-（2）</title>
    <link href="http://tomasonl.github.io/2021/01/02/PaaS2/"/>
    <id>http://tomasonl.github.io/2021/01/02/PaaS2/</id>
    <published>2021-01-02T08:29:32.000Z</published>
    <updated>2021-01-11T05:54:20.638Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="华为云实战"><a href="#华为云实战" class="headerlink" title="华为云实战"></a>华为云实战</h1><h2 id="ServiceComb-项目接入CSE"><a href="#ServiceComb-项目接入CSE" class="headerlink" title="ServiceComb 项目接入CSE"></a>ServiceComb 项目接入CSE</h2><p>父工程依赖管理配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;      </span><br><span class="line">&lt;dependencies&gt;  </span><br><span class="line">&lt;dependency&gt;              </span><br><span class="line">      &lt;groupId&gt;com.huawei.paas.cse&lt;&#x2F;groupId&gt;              </span><br><span class="line">      &lt;artifactId&gt;cse‐dependency&lt;&#x2F;artifactId&gt;              </span><br><span class="line">      &lt;version&gt;2.3.20&lt;&#x2F;version&gt;              </span><br><span class="line">      &lt;type&gt;pom&lt;&#x2F;type&gt;              </span><br><span class="line">      &lt;scope&gt;import&lt;&#x2F;scope&gt;          </span><br><span class="line">&lt;&#x2F;dependency&gt;  </span><br><span class="line">&lt;&#x2F;dependencies&gt;  </span><br><span class="line">&lt;&#x2F;dependencyManagement&gt;</span><br></pre></td></tr></table></figure><p>消费和服务方引入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.huawei.paas.cse&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cse‐solution‐service‐engine&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>注册中心配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PPLICATION_ID: helloworld</span><br><span class="line">service_description:</span><br><span class="line">  name: helloworld‐provider</span><br><span class="line">  version: 1.0.0</span><br><span class="line">cse:</span><br><span class="line">  service:</span><br><span class="line">    registry:</span><br><span class="line">      address: https:&#x2F;&#x2F;cse.cn‐north‐1.myhuaweicloud.com</span><br><span class="line">      instance:</span><br><span class="line">        watch: false</span><br><span class="line">  credentials:</span><br><span class="line">    accessKey: CMPEUCGEDINQKGWBGHVB</span><br><span class="line">    secretKey: HEYSZL5zTw6HLfPEOxzGnWpbzLwHWAylUc99vMtd</span><br><span class="line">    akskCustomCipher: default</span><br><span class="line">  rest:</span><br><span class="line">    address: 0.0.0.0:8080</span><br></pre></td></tr></table></figure><p>然后就可以访问和消费服务了。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>华为云PaaS平台-服务引擎CSE开发-（1）</title>
    <link href="http://tomasonl.github.io/2021/01/01/%E5%8D%8E%E4%B8%BA%E4%BA%91PaaS%E5%B9%B3%E5%8F%B0-%E6%9C%8D%E5%8A%A1%E5%BC%95%E6%93%8ECSE%E5%BC%80%E5%8F%91/"/>
    <id>http://tomasonl.github.io/2021/01/01/%E5%8D%8E%E4%B8%BA%E4%BA%91PaaS%E5%B9%B3%E5%8F%B0-%E6%9C%8D%E5%8A%A1%E5%BC%95%E6%93%8ECSE%E5%BC%80%E5%8F%91/</id>
    <published>2021-01-01T04:29:32.000Z</published>
    <updated>2021-01-11T06:03:19.021Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="初识华为云"><a href="#初识华为云" class="headerlink" title="初识华为云"></a>初识华为云</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;华为云PaaS平台以华为FusionStage2.0项目为基础，基于Docker、Kubernetes等主流开源容器项目，提供了开发、测试、部署、运维的全流程自动化流水线能力，提供先进的微服务框架和丰富的服务组件，致力于让开发者专注于代码开发本身，提升开发效率，支持丰富的应用生态，推动企业更好的云化转型。<br>&nbsp;&nbsp;&nbsp;&nbsp;华为云PaaS平台不光提供云容器部署、微服务治理的功能，而且提供微服务开发、测试、部署、运维一站式解决方 案，支持Dubbo、SpringCloud等技术开发的微服务接入PaaS平台，也支持老系统的接入，并且对于Apache ServiceComb开的微服务应用更是零修改代码接入。华为云PaaS平台提供微服务引擎CSE框架，此框架在ServiceComb框架的基础上另外提供更多的商业功能支持。</p><h2 id="华为WeatherMap案例体验"><a href="#华为WeatherMap案例体验" class="headerlink" title="华为WeatherMap案例体验"></a>华为WeatherMap案例体验</h2><img src="https://img-blog.csdnimg.cn/20210107155857525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_16,color_FFFFFF,t_70"><ul><li>Weathermapweb ：前端界面服务，提供天气信息展示及查询界面。</li><li>Fusionweather ：汇聚服务，前端请求查询天气统一Fusionweather服务，它相当于一个网关。</li><li>Weather ：当前天气查询，前端请求汇聚服务查询天气，汇聚服务请求Weather查询天气。</li><li>Forecast ：预报天气，查询未来天气信息，同Weather服务，汇聚服务请求Forecast查询未来天气信息。</li></ul><ol><li>配置环境<br>华为云环境部署-微服务会连接华为云上的CSE服务中心、配置中心、仪表盘，本节配置华为云账号。</li></ol><p><strong>AK/SK访问密钥</strong>验证调用API发起请求的访问者身份，与密码的功能相似，需要使用成对的AK/SK进行加密签名确保请求的机密性、完整性和请求双方身份的正确性。用户可以在“我的凭证”中生成并管理访问密钥。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取步骤：</span><br><span class="line">1. 单击用户名，在下拉列表中单击“基本信息”。</span><br><span class="line">2. 在基本信息页面单击“管理我的凭证”。</span><br><span class="line">3. 单击“管理访问密钥”。</span><br><span class="line">4. 单击“新增访问密钥”，进入“新增访问密钥”页面。</span><br><span class="line">5. 输入当前用户的登录密码。</span><br><span class="line">6. 通过邮箱或者手机进行验证，输入对应的验证码。</span><br><span class="line">7. 下载credentials.csv文件，文件内容包括了 AK和SK。</span><br></pre></td></tr></table></figure><p>也就是一个服务注册的东西。本地没有注册中心，注册中心在云上，本地启动服务注册到云平台。微服务引擎CSE，里面的服务目录就知道你跑了多少实例微服务。<br>所以需要解决问题1：怎样把我们的微服务注册到云平台注册中心。<br>2. 服务治理<br><img src="https://img-blog.csdnimg.cn/20210107161954345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_16,color_FFFFFF,t_70"><br>治理过程主要包括{服务的监控、服务降级（合理分配资源，砍掉不重要服务）、负载均衡等}</p><h2 id="微服务框架ServiceComb"><a href="#微服务框架ServiceComb" class="headerlink" title="微服务框架ServiceComb"></a>微服务框架ServiceComb</h2><p>2017年华为开源的微服务框架，主要也是微服务开发治理。相比于SpringCloud，华为积淀了很多企业级开发经验。service comb（service koumu）服务们的大梳子，梳理服务<br>ServiceComb相比SpringCloud的优势有什么？</p><ol><li>通信协议方面<br>SpringCloud仅支持Http的Rest。ServiceComb支持多种通信协议, Rest、RPC等;Highway（RPC）协议性能更高，Highway是基于二进制的序列化方式传输数据，性能远高于采用文本的HTTP协议。</li><li>集成与服务提供方面<br>ServiceComb的商业版本CSE相比SpringCloud不仅提供了微服务开发框架，还提供了微服务云部署，管理、治理等一站式解决方案。而且华为自己当然和自家产品无缝集成。</li></ol><p><strong>最小服务搭建</strong><br>通过@RestSchema替换@RestController<br>需要显示声明@RequestMapping</p><ul><li>provider服务提供方：<br>microservice.yaml：<figure class="highlight plain"><figcaption><span>helloworldproject</span></figcaption><table><tr><td class="code"><pre><span class="line">service_description:</span><br><span class="line">  name: helloworld‐provider</span><br><span class="line">  version: 1.0.0</span><br><span class="line">servicecomb:</span><br><span class="line">  rest:</span><br><span class="line">    address: 0.0.0.0:8080</span><br><span class="line">  service:</span><br><span class="line">    registry:</span><br><span class="line">      address: http:&#x2F;&#x2F;127.0.0.1:30100</span><br></pre></td></tr></table></figure></li><li>启动类：<br>@EnableServiceComb：启用java.chassis核心功能。<br>@SpringBootApplication：springBoot提供的注解，实现包扫描、自动配置。</li><li>provider服务消费方：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">APPLICATION_ID: helloworldproject</span><br><span class="line">service_description:</span><br><span class="line">  name: helloworld‐consumer</span><br><span class="line">  version: 1.0.0</span><br><span class="line">servicecomb:</span><br><span class="line">  rest:</span><br><span class="line">    address: 0.0.0.0:8081</span><br><span class="line">  service:</span><br><span class="line">    registry:</span><br><span class="line">      address: http:&#x2F;&#x2F;127.0.0.1:30100</span><br></pre></td></tr></table></figure></li></ul><p>至于调用方式：<br>SServiceComb提供RestTemplate、AsynRestTemplate、透明RPC方式调用服务接口。</p><ul><li>RestTemplate：Spring提供的RESTful访问接口，ServiceComb提供该接口的实现类用于服务的调用。</li><li>AsynRestTemplate：允许用户异步的进行服务调用。</li><li>透明RPC方式：允许用户通过简单的java interface像本地调用一样进行服务调用。透明在与与服务接口的协议、开发方式（使用SpringMVC方式、RPC/Jax-RS）无关，所以推荐。<br>采用透明PRC方式向服务调用controller中注入接口代理对象：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RpcReference(microserviceName&#x3D;&quot;helloworld‐provider&quot;,schemaId&#x3D;&quot;helloworld&quot;)</span><br><span class="line">HelloWorldInterface helloWorldInterface;</span><br></pre></td></tr></table></figure><h2 id="华为云Paas平台微服务引擎CSE"><a href="#华为云Paas平台微服务引擎CSE" class="headerlink" title="华为云Paas平台微服务引擎CSE"></a>华为云Paas平台微服务引擎CSE</h2><p>接触设施-平台-软件   Infrastructure 、Paltform、Software as a Service；<br>华为云：FusionCloud分为三部分</p><ul><li>Iaas-FusionSphere</li><li>Paas-FusionStage</li><li>大数据-FusionInsight</li></ul><p><strong>CSE</strong>cloudServiceEngine是华为云Paas提供的企业微服务应用管理平台。<br>提供：服务SDK（开发）、服务注册、配置和治理中心;<br>快速构建、实时监控和高可用。兼容主流开源生态，不绑定特定开发框架和平台。</p><p><strong>ServiceComb与CSE有什么不同？</strong><br>1、 CSE是ServiceComb的商业版本，CSE的大部分组件来自于开源的ServiceComb，CSE没有开源但可以免费使用。<br>2、 使用ServiceComb开发的微服务不依赖华为云，使用CSE开发的微服务则依赖华为云。</p><p><strong>所以为什么要用微服务引擎CSE？</strong><br>在云上使用CSE，用户无需关心自己业务之外的微服务基础设施，保证系统整体稳定性。<br>微服务部署，管理、治理全部开箱即用，还可以获得开发时期的指导和帮助，以及后续技术发展的最新信息。</p><p>英语角哈哈ヾ(≧▽≦*)o</p><ol><li>Fusion[ˈfjuːʒn]<br>n. 融合; 熔接; 结合; 核聚变; —fusionstage聚合平台；</li><li>Comb[kəʊm]<br>n. 梳子; 篦子; 压发梳; (作为装饰物的)发插; 梳理(头发); (公鸡的)鸡冠;<br>v. 梳，梳理(头发); 仔细搜索; 搜寻; 梳理(羊毛、棉花等) —serviceComb服务梳理；</li><li>KuberNets 库伯耐踢死 K8s 类似I18n（internationalization）<br>管理云平台中多个主机上的容器化，提供了应用部署，规划，更新，维护的一种机制。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>责任链设计模式</title>
    <link href="http://tomasonl.github.io/2020/12/23/%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://tomasonl.github.io/2020/12/23/%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-12-23T03:36:46.000Z</published>
    <updated>2020-12-23T03:52:11.637Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>抽象、归纳。总结</p><p>比如缓存，抽离出来功能，降低复杂度和耦合性！</p><p>每一个实现指向下一个，沿着链条传递。<br>1，扩展强。<br>2，灵活性。<br>3，独立性。</p><p>责任链模式：由多个部件，基于引用组成链条。行为上请求从链条的头部传递到各个节点，从而触发执行各个节点要负责的业务逻辑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis源码剖析</title>
    <link href="http://tomasonl.github.io/2020/12/23/MyBatis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    <id>http://tomasonl.github.io/2020/12/23/MyBatis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</id>
    <published>2020-12-23T00:53:31.000Z</published>
    <updated>2020-12-23T03:36:26.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MyBatis是什么？"><a href="#MyBatis是什么？" class="headerlink" title="MyBatis是什么？"></a>MyBatis是什么？</h1><p>orm框架—把字段映射为对象的属性；</p><p>比如一个User<br>id int primary_key auto_increament;<br>name varchar(10) not null;<br><strong>映射为User类，建立关联</strong><br>class User{<br>    pravite Integer id;<br>    private String name;<br>}</p><hr><p>之所以建立关联，可以想下之前我们传统JDBC步骤：</p><ol><li>导入JDBC驱动包。</li><li>Drivermanager注册驱动。</li><li>创建连接，Connection接口类连接数据库。</li><li>创建Statement，接口创建运行对象来执行SQL。</li><li>CRUD操作。</li><li>操作结果集，ResultSet保存查询结果。</li><li>关闭连接。</li></ol><p>手动操作Statement啦，Java里面写一大堆sql啦等等问题，很难！<br>ps：关于Iterator三个方法：hasNext()、next()、remove()<br>  hasNext:没有指针下移操作，只是判断是否存在下一个元素<br>  next：指针下移，返回该指针所指向的元素<br>  remove：删除当前指针所指向的元素，一般和next方法一起用，这时候的作用就是删除next方法返回的元素；</p><p>代理模式：接口不能实例化，Proxy提供一个静态方法，动态创建代理类，实现这个接口。</p><p>Mybatis架构设计：<br><img src="https://img-blog.csdnimg.cn/20201223103228930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_11,color_FFFFFF,t_70"><br>然后与Spring整合！</p><p>源码：打开入口点，想想如何实现。<br>问题：怎么映射的？xml怎么解析的？还有那写@Select注解，整个注解就能给我映射？带着问题，冲！</p><p>先找到配置文件，把他的流拿出来，调用javax.xml封装到xpath里面解析configuration里面的xml属性，塞进configuration对象，返回给一个sqlSessionFactory。<br>解析sql 考虑-r -n这种然后取”&lt;”之间的内容 遍历建树”&gt;”；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch分布式搜索分析引擎-B</title>
    <link href="http://tomasonl.github.io/2020/12/19/ElasticSearch%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%88%86%E6%9E%90%E5%BC%95%E6%93%8E-B/"/>
    <id>http://tomasonl.github.io/2020/12/19/ElasticSearch%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%88%86%E6%9E%90%E5%BC%95%E6%93%8E-B/</id>
    <published>2020-12-19T07:33:10.000Z</published>
    <updated>2020-12-23T03:52:13.462Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="旅程目标："><a href="#旅程目标：" class="headerlink" title="旅程目标："></a>旅程目标：</h2><ol><li>能够使用java客户端完成创建、删除索引的操作、完成文档的增删改查的操作</li><li>能够完成文档的分页操作、高亮查询操作</li><li>能够搭建Spring Data ElasticSearch的环境、基本增删改查操作、掌握基本条件查询的方法命名规则</li></ol><h1 id="ElasticSearch编程操作"><a href="#ElasticSearch编程操作" class="headerlink" title="ElasticSearch编程操作"></a>ElasticSearch编程操作</h1><h2 id="1-1-创建工程，导入坐标"><a href="#1-1-创建工程，导入坐标" class="headerlink" title="1.1 创建工程，导入坐标"></a>1.1 创建工程，导入坐标</h2><p>pom.xml坐标</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-创建索引index"><a href="#1-2-创建索引index" class="headerlink" title="1.2 创建索引index"></a>1.2 创建索引index</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//创建索引</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 创建Client连接对象</span></span><br><span class="line">    Settings settings = Settings.builder().put(<span class="string">&quot;cluster.name&quot;</span>, <span class="string">&quot;my-elasticsearch&quot;</span>).build();</span><br><span class="line">    TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">        .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9300</span>));</span><br><span class="line">    <span class="comment">//创建名称为blog2的索引</span></span><br><span class="line">    client.admin().indices().prepareCreate(<span class="string">&quot;blog2&quot;</span>).get();</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-创建映射mapping"><a href="#1-3-创建映射mapping" class="headerlink" title="1.3 创建映射mapping"></a>1.3 创建映射mapping</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//创建映射</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 创建Client连接对象</span></span><br><span class="line">    Settings settings = Settings.builder().put(<span class="string">&quot;cluster.name&quot;</span>, <span class="string">&quot;my-elasticsearch&quot;</span>).build();</span><br><span class="line">    TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">        .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9300</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加映射</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 格式：</span></span><br><span class="line"><span class="comment">         * &quot;mappings&quot; : &#123;</span></span><br><span class="line"><span class="comment">             &quot;article&quot; : &#123;</span></span><br><span class="line"><span class="comment">                &quot;dynamic&quot; : &quot;false&quot;,</span></span><br><span class="line"><span class="comment">                 &quot;properties&quot; : &#123;</span></span><br><span class="line"><span class="comment">                    &quot;id&quot; : &#123; &quot;type&quot; : &quot;string&quot; &#125;,</span></span><br><span class="line"><span class="comment">                     &quot;content&quot; : &#123; &quot;type&quot; : &quot;string&quot; &#125;,</span></span><br><span class="line"><span class="comment">                    &quot;author&quot; : &#123; &quot;type&quot; : &quot;string&quot; &#125;</span></span><br><span class="line"><span class="comment">                 &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    XContentBuilder builder = XContentFactory.jsonBuilder()</span><br><span class="line">        .startObject()</span><br><span class="line">        .startObject(<span class="string">&quot;article&quot;</span>)</span><br><span class="line">        .startObject(<span class="string">&quot;properties&quot;</span>)</span><br><span class="line">        .startObject(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">        .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;integer&quot;</span>).field(<span class="string">&quot;store&quot;</span>, <span class="string">&quot;yes&quot;</span>)</span><br><span class="line">        .endObject()</span><br><span class="line">        .startObject(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">        .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;string&quot;</span>).field(<span class="string">&quot;store&quot;</span>, <span class="string">&quot;yes&quot;</span>).field(<span class="string">&quot;analyzer&quot;</span>, <span class="string">&quot;ik_smart&quot;</span>)</span><br><span class="line">        .endObject()</span><br><span class="line">        .startObject(<span class="string">&quot;content&quot;</span>)</span><br><span class="line">        .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;string&quot;</span>).field(<span class="string">&quot;store&quot;</span>, <span class="string">&quot;yes&quot;</span>).field(<span class="string">&quot;analyzer&quot;</span>, <span class="string">&quot;ik_smart&quot;</span>)</span><br><span class="line">        .endObject()</span><br><span class="line">        .endObject()</span><br><span class="line">        .endObject()</span><br><span class="line">        .endObject();</span><br><span class="line">    <span class="comment">// 创建映射</span></span><br><span class="line">    PutMappingRequest mapping = Requests.putMappingRequest(<span class="string">&quot;blog2&quot;</span>)</span><br><span class="line">        .type(<span class="string">&quot;article&quot;</span>).source(builder);</span><br><span class="line">    client.admin().indices().putMapping(mapping).get();</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-建立文档document"><a href="#1-4-建立文档document" class="headerlink" title="1.4 建立文档document"></a>1.4 建立文档document</h2><h3 id="1-4-1-建立文档（通过XContentBuilder）"><a href="#1-4-1-建立文档（通过XContentBuilder）" class="headerlink" title="1.4.1 建立文档（通过XContentBuilder）"></a>1.4.1 建立文档（通过XContentBuilder）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//创建文档(通过XContentBuilder)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 创建Client连接对象</span></span><br><span class="line">    Settings settings = Settings.builder().put(<span class="string">&quot;cluster.name&quot;</span>, <span class="string">&quot;my-elasticsearch&quot;</span>).build();</span><br><span class="line">    TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">        .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建文档信息</span></span><br><span class="line">    XContentBuilder builder = XContentFactory.jsonBuilder()</span><br><span class="line">        .startObject()</span><br><span class="line">        .field(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)</span><br><span class="line">        .field(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;ElasticSearch是一个基于Lucene的搜索服务器&quot;</span>)</span><br><span class="line">        .field(<span class="string">&quot;content&quot;</span>,</span><br><span class="line">               <span class="string">&quot;它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。&quot;</span>)</span><br><span class="line">        .endObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立文档对象</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数一blog1：表示索引对象</span></span><br><span class="line"><span class="comment">         * 参数二article：类型</span></span><br><span class="line"><span class="comment">         * 参数三1：建立id</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    client.prepareIndex(<span class="string">&quot;blog2&quot;</span>, <span class="string">&quot;article&quot;</span>, <span class="string">&quot;1&quot;</span>).setSource(builder).get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-建立文档（使用Jackson转换实体）"><a href="#1-4-2-建立文档（使用Jackson转换实体）" class="headerlink" title="1.4.2 建立文档（使用Jackson转换实体）"></a>1.4.2 建立文档（使用Jackson转换实体）</h3><p>1）创建Article实体</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> String content;</span><br><span class="line">    getter/setter...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）添加jackson坐标</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//创建文档(通过实体转json)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 创建Client连接对象</span></span><br><span class="line">    Settings settings = Settings.builder().put(<span class="string">&quot;cluster.name&quot;</span>, <span class="string">&quot;my-elasticsearch&quot;</span>).build();</span><br><span class="line">    TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">        .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 描述json 数据</span></span><br><span class="line">    <span class="comment">//&#123;id:xxx, title:xxx, content:xxx&#125;</span></span><br><span class="line">    Article article = <span class="keyword">new</span> Article();</span><br><span class="line">    article.setId(<span class="number">2</span>);</span><br><span class="line">    article.setTitle(<span class="string">&quot;搜索工作其实很快乐&quot;</span>);</span><br><span class="line">    article.setContent(<span class="string">&quot;我们希望我们的搜索解决方案要快，我们希望有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP的索引数据，我们希望我们的搜索服务器始终可用，我们希望能够一台开始并扩展到数百，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。Elasticsearch旨在解决所有这些问题和更多的问题。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立文档</span></span><br><span class="line">    client.prepareIndex(<span class="string">&quot;blog2&quot;</span>, <span class="string">&quot;article&quot;</span>, article.getId().toString())</span><br><span class="line">        <span class="comment">//.setSource(objectMapper.writeValueAsString(article)).get();</span></span><br><span class="line">        .setSource(objectMapper.writeValueAsString(article).getBytes(), XContentType.JSON).get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-查询文档操作"><a href="#1-5-查询文档操作" class="headerlink" title="1.5 查询文档操作"></a>1.5 查询文档操作</h2><h3 id="1-5-1关键词查询"><a href="#1-5-1关键词查询" class="headerlink" title="1.5.1关键词查询"></a>1.5.1关键词查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTermQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//1、创建es客户端连接对象</span></span><br><span class="line">    Settings settings = Settings.builder().put(<span class="string">&quot;cluster.name&quot;</span>, <span class="string">&quot;my-elasticsearch&quot;</span>).build();</span><br><span class="line">    TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">        .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、设置搜索条件</span></span><br><span class="line">    SearchResponse searchResponse = client.prepareSearch(<span class="string">&quot;blog2&quot;</span>)</span><br><span class="line">        .setTypes(<span class="string">&quot;article&quot;</span>)</span><br><span class="line">        .setQuery(QueryBuilders.termQuery(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;搜索&quot;</span>)).get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、遍历搜索结果数据</span></span><br><span class="line">    SearchHits hits = searchResponse.getHits(); <span class="comment">// 获取命中次数，查询结果有多少对象</span></span><br><span class="line">    System.out.println(<span class="string">&quot;查询结果有：&quot;</span> + hits.getTotalHits() + <span class="string">&quot;条&quot;</span>);</span><br><span class="line">    Iterator&lt;SearchHit&gt; iterator = hits.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        SearchHit searchHit = iterator.next(); <span class="comment">// 每个查询对象</span></span><br><span class="line">        System.out.println(searchHit.getSourceAsString()); <span class="comment">// 获取字符串格式打印</span></span><br><span class="line">        System.out.println(<span class="string">&quot;title:&quot;</span> + searchHit.getSource().get(<span class="string">&quot;title&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、释放资源</span></span><br><span class="line">    client.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-2-字符串查询"><a href="#2-5-2-字符串查询" class="headerlink" title="2.5.2  字符串查询"></a>2.5.2  字符串查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStringQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//1、创建es客户端连接对象</span></span><br><span class="line">    Settings settings = Settings.builder().put(<span class="string">&quot;cluster.name&quot;</span>, <span class="string">&quot;my-elasticsearch&quot;</span>).build();</span><br><span class="line">    TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">        .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、设置搜索条件</span></span><br><span class="line">    SearchResponse searchResponse = client.prepareSearch(<span class="string">&quot;blog2&quot;</span>)</span><br><span class="line">        .setTypes(<span class="string">&quot;article&quot;</span>)</span><br><span class="line">        .setQuery(QueryBuilders.queryStringQuery(<span class="string">&quot;搜索&quot;</span>)).get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、遍历搜索结果数据</span></span><br><span class="line">    SearchHits hits = searchResponse.getHits(); <span class="comment">// 获取命中次数，查询结果有多少对象</span></span><br><span class="line">    System.out.println(<span class="string">&quot;查询结果有：&quot;</span> + hits.getTotalHits() + <span class="string">&quot;条&quot;</span>);</span><br><span class="line">    Iterator&lt;SearchHit&gt; iterator = hits.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        SearchHit searchHit = iterator.next(); <span class="comment">// 每个查询对象</span></span><br><span class="line">        System.out.println(searchHit.getSourceAsString()); <span class="comment">// 获取字符串格式打印</span></span><br><span class="line">        System.out.println(<span class="string">&quot;title:&quot;</span> + searchHit.getSource().get(<span class="string">&quot;title&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、释放资源</span></span><br><span class="line">    client.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-5-2-使用文档ID查询文档"><a href="#2-5-2-使用文档ID查询文档" class="headerlink" title="2.5.2 使用文档ID查询文档"></a>2.5.2 使用文档ID查询文档</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIdQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//client对象为TransportClient对象</span></span><br><span class="line">        SearchResponse response = client.prepareSearch(<span class="string">&quot;blog1&quot;</span>)</span><br><span class="line">                .setTypes(<span class="string">&quot;article&quot;</span>)</span><br><span class="line">                <span class="comment">//设置要查询的id</span></span><br><span class="line">                .setQuery(QueryBuilders.idsQuery().addIds(<span class="string">&quot;test002&quot;</span>))</span><br><span class="line">                <span class="comment">//执行查询</span></span><br><span class="line">                .get();</span><br><span class="line">        <span class="comment">//取查询结果</span></span><br><span class="line">        SearchHits searchHits = response.getHits();</span><br><span class="line">        <span class="comment">//取查询结果总记录数</span></span><br><span class="line">        System.out.println(searchHits.getTotalHits());</span><br><span class="line">        Iterator&lt;SearchHit&gt; hitIterator = searchHits.iterator();</span><br><span class="line">        <span class="keyword">while</span>(hitIterator.hasNext()) &#123;</span><br><span class="line">            SearchHit searchHit = hitIterator.next();</span><br><span class="line">            <span class="comment">//打印整行数据</span></span><br><span class="line">            System.out.println(searchHit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-查询文档分页操作"><a href="#2-6-查询文档分页操作" class="headerlink" title="2.6 查询文档分页操作"></a>2.6 查询文档分页操作</h2><h3 id="2-6-1-批量插入数据"><a href="#2-6-1-批量插入数据" class="headerlink" title="2.6.1 批量插入数据"></a>2.6.1 批量插入数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="comment">//批量插入100条数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 创建Client连接对象</span></span><br><span class="line">        Settings settings = Settings.builder().put(<span class="string">&quot;cluster.name&quot;</span>, <span class="string">&quot;my-elasticsearch&quot;</span>).build();</span><br><span class="line">        TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">                .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 描述json 数据</span></span><br><span class="line">            Article article = <span class="keyword">new</span> Article();</span><br><span class="line">            article.setId(i);</span><br><span class="line">            article.setTitle(i + <span class="string">&quot;搜索工作其实很快乐&quot;</span>);</span><br><span class="line">            article.setContent(i</span><br><span class="line">                    + <span class="string">&quot;我们希望我们的搜索解决方案要快，我们希望有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP的索引数据，我们希望我们的搜索服务器始终可用，我们希望能够一台开始并扩展到数百，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。Elasticsearch旨在解决所有这些问题和更多的问题。&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 建立文档</span></span><br><span class="line">            client.prepareIndex(<span class="string">&quot;blog2&quot;</span>, <span class="string">&quot;article&quot;</span>, article.getId().toString())</span><br><span class="line">                    <span class="comment">//.setSource(objectMapper.writeValueAsString(article)).get();</span></span><br><span class="line">                    .setSource(objectMapper.writeValueAsString(article).getBytes(),XContentType.JSON).get();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image/12.png"></p><h3 id="2-6-2-分页查询"><a href="#2-6-2-分页查询" class="headerlink" title="2.6.2 分页查询"></a>2.6.2 分页查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 创建Client连接对象</span></span><br><span class="line">    Settings settings = Settings.builder().put(<span class="string">&quot;cluster.name&quot;</span>, <span class="string">&quot;my-elasticsearch&quot;</span>).build();</span><br><span class="line">    TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">        .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 搜索数据</span></span><br><span class="line">    SearchRequestBuilder searchRequestBuilder = client.prepareSearch(<span class="string">&quot;blog2&quot;</span>).setTypes(<span class="string">&quot;article&quot;</span>)</span><br><span class="line">        .setQuery(QueryBuilders.matchAllQuery());<span class="comment">//默认每页10条记录</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询第2页数据，每页20条</span></span><br><span class="line">    <span class="comment">//setFrom()：从第几条开始检索，默认是0。</span></span><br><span class="line">    <span class="comment">//setSize():每页最多显示的记录数。</span></span><br><span class="line">    searchRequestBuilder.setFrom(<span class="number">0</span>).setSize(<span class="number">5</span>);</span><br><span class="line">    SearchResponse searchResponse = searchRequestBuilder.get();</span><br><span class="line"></span><br><span class="line">    SearchHits hits = searchResponse.getHits(); <span class="comment">// 获取命中次数，查询结果有多少对象</span></span><br><span class="line">    System.out.println(<span class="string">&quot;查询结果有：&quot;</span> + hits.getTotalHits() + <span class="string">&quot;条&quot;</span>);</span><br><span class="line">    Iterator&lt;SearchHit&gt; iterator = hits.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        SearchHit searchHit = iterator.next(); <span class="comment">// 每个查询对象</span></span><br><span class="line">        System.out.println(searchHit.getSourceAsString()); <span class="comment">// 获取字符串格式打印</span></span><br><span class="line">        System.out.println(<span class="string">&quot;id:&quot;</span> + searchHit.getSource().get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;title:&quot;</span> + searchHit.getSource().get(<span class="string">&quot;title&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;content:&quot;</span> + searchHit.getSource().get(<span class="string">&quot;content&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image/13.png"></p><h2 id="2-7-查询结果高亮操作"><a href="#2-7-查询结果高亮操作" class="headerlink" title="2.7 查询结果高亮操作"></a>2.7 查询结果高亮操作</h2><h3 id="2-7-1-什么是高亮显示"><a href="#2-7-1-什么是高亮显示" class="headerlink" title="2.7.1 什么是高亮显示"></a>2.7.1 什么是高亮显示</h3><p>在进行关键字搜索时，搜索出的内容中的关键字会显示不同的颜色，称之为高亮</p><p>百度搜索关键字”传智播客”</p><p><img src="image/14.png"></p><p>京东商城搜索”笔记本”</p><p><img src="image/15.png"></p><h3 id="2-7-2-高亮显示的html分析"><a href="#2-7-2-高亮显示的html分析" class="headerlink" title="2.7.2 高亮显示的html分析"></a>2.7.2 高亮显示的html分析</h3><p>通过开发者工具查看高亮数据的html代码实现：</p><p><img src="image/16.png"></p><p>ElasticSearch可以对查询出的内容中关键字部分进行标签和样式的设置，但是你需要告诉ElasticSearch使用什么标签对高亮关键字进行包裹</p><h3 id="2-7-3-高亮显示代码实现"><a href="#2-7-3-高亮显示代码实现" class="headerlink" title="2.7.3 高亮显示代码实现"></a>2.7.3 高亮显示代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//高亮查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test11</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 创建Client连接对象</span></span><br><span class="line">    Settings settings = Settings.builder().put(<span class="string">&quot;cluster.name&quot;</span>, <span class="string">&quot;my-elasticsearch&quot;</span>).build();</span><br><span class="line">    TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">        .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 搜索数据</span></span><br><span class="line">    SearchRequestBuilder searchRequestBuilder = client</span><br><span class="line">        .prepareSearch(<span class="string">&quot;blog2&quot;</span>).setTypes(<span class="string">&quot;article&quot;</span>)</span><br><span class="line">        .setQuery(QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;搜索&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置高亮数据</span></span><br><span class="line">    HighlightBuilder hiBuilder=<span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">    hiBuilder.preTags(<span class="string">&quot;&lt;font style=&#x27;color:red&#x27;&gt;&quot;</span>);</span><br><span class="line">    hiBuilder.postTags(<span class="string">&quot;&lt;/font&gt;&quot;</span>);</span><br><span class="line">    hiBuilder.field(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">    searchRequestBuilder.highlighter(hiBuilder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得查询结果数据</span></span><br><span class="line">    SearchResponse searchResponse = searchRequestBuilder.get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取查询结果集</span></span><br><span class="line">    SearchHits searchHits = searchResponse.getHits();</span><br><span class="line">    System.out.println(<span class="string">&quot;共搜到:&quot;</span>+searchHits.getTotalHits()+<span class="string">&quot;条结果!&quot;</span>);</span><br><span class="line">    <span class="comment">//遍历结果</span></span><br><span class="line">    <span class="keyword">for</span>(SearchHit hit:searchHits)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;String方式打印文档搜索内容:&quot;</span>);</span><br><span class="line">        System.out.println(hit.getSourceAsString());</span><br><span class="line">        System.out.println(<span class="string">&quot;Map方式打印高亮内容&quot;</span>);</span><br><span class="line">        System.out.println(hit.getHighlightFields());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历高亮集合，打印高亮片段:&quot;</span>);</span><br><span class="line">        Text[] text = hit.getHighlightFields().get(<span class="string">&quot;title&quot;</span>).getFragments();</span><br><span class="line">        <span class="keyword">for</span> (Text str : text) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image/17.png"></p><h1 id="第三章-Spring-Data-ElasticSearch-使用"><a href="#第三章-Spring-Data-ElasticSearch-使用" class="headerlink" title="第三章 Spring Data ElasticSearch 使用"></a>第三章 Spring Data ElasticSearch 使用</h1><h2 id="3-1-Spring-Data-ElasticSearch简介"><a href="#3-1-Spring-Data-ElasticSearch简介" class="headerlink" title="3.1 Spring Data ElasticSearch简介"></a>3.1 Spring Data ElasticSearch简介</h2><h3 id="3-1-1-什么是Spring-Data"><a href="#3-1-1-什么是Spring-Data" class="headerlink" title="3.1.1 什么是Spring Data"></a>3.1.1 什么是Spring Data</h3><p>Spring Data是一个用于简化数据库访问，并支持云服务的开源框架。其主要目标是使得对数据的访问变得方便快捷，并支持map-reduce框架和云计算数据服务。 Spring Data可以极大的简化JPA的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。除了CRUD外，还包括如分页、排序等一些常用的功能。</p><p>Spring Data的官网：<a href="http://projects.spring.io/spring-data/">http://projects.spring.io/spring-data/</a></p><p>Spring Data常用的功能模块如下：</p><p><img src="image%5C18.png"></p><p><img src="image%5C19.png"></p><h3 id="3-1-2-什么是Spring-Data-ElasticSearch"><a href="#3-1-2-什么是Spring-Data-ElasticSearch" class="headerlink" title="3.1.2 什么是Spring Data ElasticSearch"></a>3.1.2 什么是Spring Data ElasticSearch</h3><p>Spring Data ElasticSearch 基于 spring data API 简化 elasticSearch操作，将原始操作elasticSearch的客户端API 进行封装 。Spring Data为Elasticsearch项目提供集成搜索引擎。Spring Data Elasticsearch POJO的关键功能区域为中心的模型与Elastichsearch交互文档和轻松地编写一个存储库数据访问层。</p><p>官方网站：<a href="http://projects.spring.io/spring-data-elasticsearch/">http://projects.spring.io/spring-data-elasticsearch/</a> </p><h2 id="3-2-Spring-Data-ElasticSearch入门"><a href="#3-2-Spring-Data-ElasticSearch入门" class="headerlink" title="3.2 Spring Data ElasticSearch入门"></a>3.2 Spring Data ElasticSearch入门</h2><p>1）导入Spring Data ElasticSearch坐标</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itheima_elasticsearch_demo3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.plugin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport-netty4-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）创建applicationContext.xml配置文件，引入elasticsearch命名空间</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:elasticsearch</span>=<span class="string">&quot;http://www.springframework.org/schema/data/elasticsearch&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/data/elasticsearch</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch-1.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）编写实体Article</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Article [id=&quot;</span> + id + <span class="string">&quot;, title=&quot;</span> + title + <span class="string">&quot;, content=&quot;</span> + content + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）编写Dao</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Article;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.repository.ElasticsearchRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5）编写Service</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Article;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Article article)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.ArticleRepository;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Article;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.ArticleService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArticleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleRepository articleRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">        articleRepository.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6） 配置applicationContext.xml </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:elasticsearch</span>=<span class="string">&quot;http://www.springframework.org/schema/data/elasticsearch&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/data/elasticsearch</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch-1.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 扫描Dao包，自动创建实例 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch:repositories</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.dao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描Service包，创建Service的实体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置elasticSearch的连接 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置elasticSearch的连接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch:transport-client</span> <span class="attr">id</span>=<span class="string">&quot;client&quot;</span> <span class="attr">cluster-nodes</span>=<span class="string">&quot;localhost:9300&quot;</span> <span class="attr">cluster-name</span>=<span class="string">&quot;my-elasticsearch&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ElasticSearch模版对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;elasticsearchTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.data.elasticsearch.core.ElasticsearchTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;client&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;client&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7）配置实体</p><p>基于spring data elasticsearch注解配置索引、映射和实体的关系</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Field;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.FieldType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Document 文档对象 （索引信息、文档类型 ）</span></span><br><span class="line"><span class="meta">@Document(indexName=&quot;blog3&quot;,type=&quot;article&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Id 文档主键 唯一标识</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="comment">//@Field 每个文档的字段配置（类型、是否分词、是否存储、分词器 ）</span></span><br><span class="line">    <span class="meta">@Field(store=true, index = false,type = FieldType.Integer)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Field(index=true,analyzer=&quot;ik_smart&quot;,store=true,searchAnalyzer=&quot;ik_smart&quot;,type = FieldType.text)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@Field(index=true,analyzer=&quot;ik_smart&quot;,store=true,searchAnalyzer=&quot;ik_smart&quot;,type = FieldType.text)</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Article [id=&quot;</span> + id + <span class="string">&quot;, title=&quot;</span> + title + <span class="string">&quot;, content=&quot;</span> + content + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其中，注解解释如下：</span><br><span class="line">@Document(indexName&#x3D;&quot;blob3&quot;,type&#x3D;&quot;article&quot;)：</span><br><span class="line">    indexName：索引的名称（必填项）</span><br><span class="line">    type：索引的类型</span><br><span class="line">@Id：主键的唯一标识</span><br><span class="line">@Field(index&#x3D;true,analyzer&#x3D;&quot;ik_smart&quot;,store&#x3D;true,searchAnalyzer&#x3D;&quot;ik_smart&quot;,type &#x3D; FieldType.text)</span><br><span class="line">    index：是否设置分词</span><br><span class="line">    analyzer：存储时使用的分词器</span><br><span class="line">    searchAnalyze：搜索时使用的分词器</span><br><span class="line">    store：是否存储</span><br><span class="line">    type: 数据类型</span><br></pre></td></tr></table></figure><p>8）创建测试类SpringDataESTest</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Article;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.ArticleService;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.ElasticsearchTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations=&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataESTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransportClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**创建索引和映射*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        elasticsearchTemplate.createIndex(Article.class);</span><br><span class="line">        elasticsearchTemplate.putMapping(Article.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**测试保存文档*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveArticle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">100</span>);</span><br><span class="line">        article.setTitle(<span class="string">&quot;测试SpringData ElasticSearch&quot;</span>);</span><br><span class="line">        article.setContent(<span class="string">&quot;Spring Data ElasticSearch 基于 spring data API 简化 elasticSearch操作，将原始操作elasticSearch的客户端API 进行封装 \n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    Spring Data为Elasticsearch Elasticsearch项目提供集成搜索引擎&quot;</span>);</span><br><span class="line">        articleService.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3-Spring-Data-ElasticSearch的常用操作"><a href="#3-3-Spring-Data-ElasticSearch的常用操作" class="headerlink" title="3.3 Spring Data ElasticSearch的常用操作"></a>3.3 Spring Data ElasticSearch的常用操作</h2><h3 id="3-3-1-增删改查方法测试"><a href="#3-3-1-增删改查方法测试" class="headerlink" title="3.3.1 增删改查方法测试"></a>3.3.1 增删改查方法测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Article;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Article article)</span></span>;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Article article)</span></span>;</span><br><span class="line">    <span class="comment">//查询全部</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Article&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Article&gt; <span class="title">findAll</span><span class="params">(Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.ArticleRepository;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Article;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.ArticleService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArticleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleRepository articleRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">        articleRepository.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">        articleRepository.delete(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Article&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterable&lt;Article&gt; iter = articleRepository.findAll();</span><br><span class="line">        <span class="keyword">return</span> iter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Article&gt; <span class="title">findAll</span><span class="params">(Pageable pageable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> articleRepository.findAll(pageable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Article;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.ArticleService;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.ElasticsearchTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations=&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataESTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransportClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**创建索引和映射*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        elasticsearchTemplate.createIndex(Article.class);</span><br><span class="line">        elasticsearchTemplate.putMapping(Article.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**测试保存文档*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveArticle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">100</span>);</span><br><span class="line">        article.setTitle(<span class="string">&quot;测试SpringData ElasticSearch&quot;</span>);</span><br><span class="line">        article.setContent(<span class="string">&quot;Spring Data ElasticSearch 基于 spring data API 简化 elasticSearch操作，将原始操作elasticSearch的客户端API 进行封装 \n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    Spring Data为Elasticsearch Elasticsearch项目提供集成搜索引擎&quot;</span>);</span><br><span class="line">        articleService.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**测试保存*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">1001</span>);</span><br><span class="line">        article.setTitle(<span class="string">&quot;elasticSearch 3.0版本发布&quot;</span>);</span><br><span class="line">        article.setContent(<span class="string">&quot;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口&quot;</span>);</span><br><span class="line">        articleService.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**测试更新*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">1001</span>);</span><br><span class="line">        article.setTitle(<span class="string">&quot;elasticSearch 3.0版本发布...更新&quot;</span>);</span><br><span class="line">        article.setContent(<span class="string">&quot;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口&quot;</span>);</span><br><span class="line">        articleService.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**测试删除*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">1001</span>);</span><br><span class="line">        articleService.delete(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**批量插入*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save100</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            Article article = <span class="keyword">new</span> Article();</span><br><span class="line">            article.setId(i);</span><br><span class="line">            article.setTitle(i+<span class="string">&quot;elasticSearch 3.0版本发布..，更新&quot;</span>);</span><br><span class="line">            article.setContent(i+<span class="string">&quot;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口&quot;</span>);</span><br><span class="line">            articleService.save(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**分页查询*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">        Page&lt;Article&gt; page = articleService.findAll(pageable);</span><br><span class="line">        <span class="keyword">for</span>(Article article:page.getContent())&#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-常用查询命名规则"><a href="#3-3-2-常用查询命名规则" class="headerlink" title="3.3.2 常用查询命名规则"></a>3.3.2 常用查询命名规则</h3><table><thead><tr><th>关键字</th><th>命名规则</th><th>解释</th><th>示例</th></tr></thead><tbody><tr><td>and</td><td>findByField1AndField2</td><td>根据Field1和Field2获得数据</td><td>findByTitleAndContent</td></tr><tr><td>or</td><td>findByField1OrField2</td><td>根据Field1或Field2获得数据</td><td>findByTitleOrContent</td></tr><tr><td>is</td><td>findByField</td><td>根据Field获得数据</td><td>findByTitle</td></tr><tr><td>not</td><td>findByFieldNot</td><td>根据Field获得补集数据</td><td>findByTitleNot</td></tr><tr><td>between</td><td>findByFieldBetween</td><td>获得指定范围的数据</td><td>findByPriceBetween</td></tr><tr><td>lessThanEqual</td><td>findByFieldLessThan</td><td>获得小于等于指定值的数据</td><td>findByPriceLessThan</td></tr></tbody></table><h3 id="3-3-3-查询方法测试"><a href="#3-3-3-查询方法测试" class="headerlink" title="3.3.3 查询方法测试"></a>3.3.3 查询方法测试</h3><p>1）dao层实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Article;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.repository.ElasticsearchRepository;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//根据标题查询</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByTitle</span><span class="params">(String condition)</span></span>;</span><br><span class="line">    <span class="comment">//根据标题查询(含分页)</span></span><br><span class="line">    <span class="function">Page&lt;Article&gt; <span class="title">findByTitle</span><span class="params">(String condition, Pageable pageable)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）service层实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据标题查询</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByTitle</span><span class="params">(String condition)</span></span>;</span><br><span class="line">    <span class="comment">//根据标题查询(含分页)</span></span><br><span class="line">    <span class="function">Page&lt;Article&gt; <span class="title">findByTitle</span><span class="params">(String condition, Pageable pageable)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.ArticleRepository;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Article;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.ArticleService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArticleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleRepository articleRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">findByTitle</span><span class="params">(String condition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> articleRepository.findByTitle(condition);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Article&gt; <span class="title">findByTitle</span><span class="params">(String condition, Pageable pageable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> articleRepository.findByTitle(condition,pageable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3）测试代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Article;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.ArticleService;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.ElasticsearchTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations=&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataESTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransportClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**条件查询*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String condition = <span class="string">&quot;版本&quot;</span>;</span><br><span class="line">        List&lt;Article&gt; articleList = articleService.findByTitle(condition);</span><br><span class="line">        <span class="keyword">for</span>(Article article:articleList)&#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**条件分页查询*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByTitlePage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String condition = <span class="string">&quot;版本&quot;</span>;</span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">2</span>,<span class="number">10</span>);</span><br><span class="line">        Page&lt;Article&gt; page = articleService.findByTitle(condition,pageable);</span><br><span class="line">        <span class="keyword">for</span>(Article article:page.getContent())&#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>###3.3.4使用Elasticsearch的原生查询对象进行查询。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByNativeQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个SearchQuery对象</span></span><br><span class="line">        SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">                <span class="comment">//设置查询条件，此处可以使用QueryBuilders创建多种查询</span></span><br><span class="line">                .withQuery(QueryBuilders.queryStringQuery(<span class="string">&quot;备份节点上没有数据&quot;</span>).defaultField(<span class="string">&quot;title&quot;</span>))</span><br><span class="line">                <span class="comment">//还可以设置分页信息</span></span><br><span class="line">                .withPageable(PageRequest.of(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">                <span class="comment">//创建SearchQuery对象</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用模板对象执行查询</span></span><br><span class="line">        elasticsearchTemplate.queryForList(searchQuery, Article.class)</span><br><span class="line">                .forEach(a-&gt; System.out.println(a));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>云服务模式-SaaS-PaaS-IaaS</title>
    <link href="http://tomasonl.github.io/2020/12/15/%E4%BA%91%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%BC%8F-IaaS-PaaS-SaaS/"/>
    <id>http://tomasonl.github.io/2020/12/15/%E4%BA%91%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%BC%8F-IaaS-PaaS-SaaS/</id>
    <published>2020-12-15T08:29:32.000Z</published>
    <updated>2020-12-15T02:11:38.461Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>基础架构-服务；基础设施服务，服务器交换机硬盘等。华为云、阿里云、腾讯云。红帽，VMWare、微软、亚马逊等。<br>平台-服务；提供软件应用开发组件运行环境，需要有技术背景。软件开发套件：SDK；<br>软件-服务；面向用户的应用层，最流行的概念。通过浏览器、app使用。不用技术人员支持。</p><p>基础资源，软件部署平台，<br>服务商是餐馆的话<br>Iaas：</p><ul><li><em>平台提供</em>最基础设施（CPU、存储、网络等资源）：厨房，烟机灶具，锅碗瓢盆；</li><li><em>用户</em>自己搭建平台去开发应用：省了买厨房的钱，自己做饭（买米面粮油就行，炒菜！）<br>Paas：</li><li><em>平台提供</em>IaaS基础上提供开发以及分发平台，（服务器、操作系统）</li><li><em>用户</em>不用安装开发环境。 用户直接做饭。<br>SaaS：</li><li>做好了，可以堂食可以外卖。</li></ul><p>买车–租车–租车+司机—公交</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>为什么？游戏可以打一天学习只能三分钟</title>
    <link href="http://tomasonl.github.io/2020/12/11/%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F-%E4%B8%8D%E8%83%BD%E6%8B%BF%E5%87%BA%E6%89%93%E6%B8%B8%E6%88%8F%E7%9A%84%E7%B2%BE%E6%B0%94%E7%A5%9E%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    <id>http://tomasonl.github.io/2020/12/11/%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F-%E4%B8%8D%E8%83%BD%E6%8B%BF%E5%87%BA%E6%89%93%E6%B8%B8%E6%88%8F%E7%9A%84%E7%B2%BE%E6%B0%94%E7%A5%9E%E5%8E%BB%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-12-11T09:50:35.000Z</published>
    <updated>2020-12-15T03:25:26.745Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>这个周末给你自由选择，你会：</strong><br>A. 学习自己工作相关技术<br>B. 出去游山玩水，锻炼身体<br>C. 宅在家里看一天的剧/打一天的游戏</p><p>大部分朋友的结果应该是这😂( •̀ ω •́ )✧<br><img src="https://pic1.zhimg.com/9d54466c0161fb7c25a4387941a7e56c_r.jpg"><br>但是，这几件事，对于我们更有意义的是哪一件？虽然不能否定欢愉的过程，但是大多数人还是会有一种懊悔，感觉虚度了光阴。</p><h2 id="为什么我们明明知道一件事（学习）是有益的，却不愿意去做；而一件无益的事情（玩手机）却可以做个不停"><a href="#为什么我们明明知道一件事（学习）是有益的，却不愿意去做；而一件无益的事情（玩手机）却可以做个不停" class="headerlink" title="为什么我们明明知道一件事（学习）是有益的，却不愿意去做；而一件无益的事情（玩手机）却可以做个不停?"></a>为什么我们明明知道一件事（学习）是有益的，却不愿意去做；而一件无益的事情（玩手机）却可以做个不停?</h2><p><strong>奖励越丰富</strong>，<strong>对行为的强化作用越强</strong>。这很容易解释，“假如我好好学习，就能得到一百万”和“假如我好好学习，就能得到一分钱”二者强化作用肯定不同。<br><strong>奖励越及时</strong>，<strong>强化作用越强</strong>。<br>因为我们在玩手机的过程中，一直在获得快乐的反馈，于是玩手机这一行为不断得到强化；相反，我们在学习时，知识的奖励作用并不能立即的体现，所以学习这一行为也就得不到强化，自然难以一直学习下去了。</p><h2 id="嗑瓜子"><a href="#嗑瓜子" class="headerlink" title="嗑瓜子"></a>嗑瓜子</h2><ol><li>因为简单，人们很容易开始这种行为；因为简单，人们很容易掌握技巧，成为熟手；并且不断改进嗑瓜子的方法，这个过程增强了人们的自信，在潜意识中人们期望享受这个过程。</li><li>一盘瓜子一个一个嗑起来，过一会就有一堆瓜子皮——能够看到嗑瓜子的成就<br>作为管理者，如果谁有办法能够让他的下属像吃瓜子一样愉快地完成工作，那么他就成功了。通过上述分析，我们已经发现，要做到这一点并不困难。</li><li>每嗑开一颗瓜子人们马上就会享受到一粒瓜子仁。<br>这一点至关重要。嗑开瓜子后马上享受到香香的瓜子仁，这对嗑瓜子的人来说是一个即时回报；就是这种即时回报微妙地发挥着作用——激励着人们不停地去嗑下一颗瓜子。</li></ol><h2 id="管理者如何运用"><a href="#管理者如何运用" class="headerlink" title="管理者如何运用"></a>管理者如何运用</h2><p>作为管理者，如果谁有办法能够让他的下属像吃瓜子一样愉快地完成工作，那么他就成功了。通过上述分析，我们已经发现，要做到这一点并不困难。</p><ul><li>首先，我们要学会分解任务，把复杂任务分解为若干个简单的、容易做的小任务。就像嗑瓜子一样容易做，再把这些容易完成的小任务分到员工手中。员工一定会乐于接受这样的任务</li><li>第二、我们要及时促使下属开始工作。例如，给他明确工作目标，提供工作条件，规定开始的时间。在下属对任务充满热情的时候就让他开始工作。</li><li>第三、对于员工每一次完成任务都要给予及时的激励。这种激励应该是及时的。就是说，员工完成任务以后，第一要激励，第二要马上激励。</li><li>第四、向你的下属展示他的工作成就。并且让他知道，你很开心看到他的成就</li></ul><p>比如说，你的助理刚刚帮你润色完一个讲稿，把讲稿交给你。你看后觉得很满意，那你就马上告诉她“真棒！又快又好。”你绝对不可以没有任何表示，说“好，我看了。”又例如，如果你的某个下属本月完成任务很好，你就应该按照制度当月兑现奖金，不要拖到下个月。更不能闭口不谈兑现奖金的事。如果员工出色的工作表现不能得到上司的及时肯定或者奖励，员工的工作热情就会减弱。如果，您的助理花了半天的时间给你整理好了你要的资料，你不但没有称赞他，反而因为他的一些小的失误批评一通。那他会自觉地、愉快地完成其他可做可不做的任务吗？就好比在吃瓜子时，如果你吃了一个臭瓜子以后，你对吃下一个瓜子就会心有余悸。如果连续吃到两个臭瓜子，你可能就会不再吃了。作为上司，你给下属的任务就是嗑开瓜子，你对下属的态度就是瓜子仁。如果你让你的下属连续两次吃了臭瓜子，你的下属恐怕再也不会愿意嗑你的瓜子了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="生活随笔" scheme="http://tomasonl.github.io/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch分布式搜索分析引擎-A</title>
    <link href="http://tomasonl.github.io/2020/12/09/ElasticSearch%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%88%86%E6%9E%90%E5%BC%95%E6%93%8E/"/>
    <id>http://tomasonl.github.io/2020/12/09/ElasticSearch%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%88%86%E6%9E%90%E5%BC%95%E6%93%8E/</id>
    <published>2020-12-09T07:33:10.000Z</published>
    <updated>2020-12-21T02:33:53.116Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="旅程目标："><a href="#旅程目标：" class="headerlink" title="旅程目标："></a>旅程目标：</h2><ol><li>能够理解ElasticSearch服务是什么？</li><li>能够使用Postman发送Restful请求操作ElasticSearch</li><li>理解分词器的作用、集成IK分词器、完成es集群搭建<h1 id="第一章-ElasticSearch简介"><a href="#第一章-ElasticSearch简介" class="headerlink" title="第一章 ElasticSearch简介"></a>第一章 ElasticSearch简介</h1><h2 id="1-1-什么是ElasticSearch"><a href="#1-1-什么是ElasticSearch" class="headerlink" title="1.1 什么是ElasticSearch"></a>1.1 什么是ElasticSearch</h2>Elaticsearch，简称为es， es是一个开源的高扩展的分布式全文检索引擎，它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。es也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。<h2 id="1-3-ElasticSearch对比Solr"><a href="#1-3-ElasticSearch对比Solr" class="headerlink" title="1.3 ElasticSearch对比Solr"></a>1.3 ElasticSearch对比Solr</h2></li></ol><ul><li>Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能;</li><li>Solr 支持更多格式的数据，而 Elasticsearch 仅支持json文件格式；</li><li>Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供；</li><li>Solr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch</li></ul><h1 id="第二章-ElasticSearch安装与启动"><a href="#第二章-ElasticSearch安装与启动" class="headerlink" title="第二章 ElasticSearch安装与启动"></a>第二章 ElasticSearch安装与启动</h1><h2 id="2-1-下载ES压缩包"><a href="#2-1-下载ES压缩包" class="headerlink" title="2.1 下载ES压缩包"></a>2.1 下载ES压缩包</h2><p>ElasticSearch分为Linux和Window版本，基于我们主要学习的是ElasticSearch的Java客户端的使用，所以我们课程中使用的是安装较为简便的Window版本，项目上线后，公司的运维人员会安装Linux版的ES供我们连接使用。<br>ElasticSearch的官方地址： <a href="https://www.elastic.co/products/elasticsearch">https://www.elastic.co/products/elasticsearch</a><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584250290822&di=0f7ca8066c95a7748289cac348c99db1&imgtype=0&src=http%3A%2F%2Fku.90sjimg.com%2Felement_origin_min_pic%2F00%2F92%2F56%2F0656f228207555b.jpg" width="30" height="30" align=left> <a href="/download/elasticsearch-5.6.8.zip">安装包下载elasticsearch-5.6.8.zip</a><br><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584250290822&di=0f7ca8066c95a7748289cac348c99db1&imgtype=0&src=http%3A%2F%2Fku.90sjimg.com%2Felement_origin_min_pic%2F00%2F92%2F56%2F0656f228207555b.jpg" width="30" height="30" align=left> <a href="/download/elasticsearch-analysis-ik-5.6.8.zip">安装包下载elasticsearch-analysis-ik-5.6.8.zip</a><br><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584250290822&di=0f7ca8066c95a7748289cac348c99db1&imgtype=0&src=http%3A%2F%2Fku.90sjimg.com%2Felement_origin_min_pic%2F00%2F92%2F56%2F0656f228207555b.jpg" width="30" height="30" align=left> <a href="/download/elasticsearch-head-master.zip">安装包下载elasticsearch-head-master.zip</a></p><h2 id="2-2-启动ES服务"><a href="#2-2-启动ES服务" class="headerlink" title="2.2 启动ES服务"></a>2.2 启动ES服务</h2><p>点击ElasticSearch下的bin目录下的elasticsearch.bat启动，</p><p>注意：9300是tcp通讯端口，集群间和TCPClient都执行该端口，9200是http协议的RESTful接口 。<br>通过浏览器访问ElasticSearch服务器，看到如下返回的json信息，代表服务启动成功<br><em>注意：ElasticSearch是使用java开发的，且本版本的es需要的jdk版本要是1.8以上，所以安装ElasticSearch之前保证JDK1.8+安装完毕，并正确的配置好JDK环境变量，否则启动ElasticSearch失败。</em></p><h2 id="2-3-ES的图形界面插件"><a href="#2-3-ES的图形界面插件" class="headerlink" title="2.3 ES的图形界面插件"></a>2.3 ES的图形界面插件</h2><p>ElasticSearch不同于Solr自带图形化界面，我们可以通过安装ElasticSearch的head插件，完成图形化界面的效果，完成索引数据的查看。安装插件的方式有两种，在线安装和本地安装。本文档采用本地安装方式进行head插件的安装。elasticsearch-5-*以上版本安装head需要安装node和grunt</p><p>1）elasticsearch-head-master解压到任意目录，但是要和elasticsearch的安装目录区别开<br>2）安装node环境：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a> 。<br>3）将grunt安装为全局命令 —-Grunt是基于Node.js的项目构建工具</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g grunt-cli</span><br></pre></td></tr></table></figure><p>4）进入elasticsearch-head-master目录启动head</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;npm install</span><br><span class="line">&gt;grunt server</span><br></pre></td></tr></table></figure><p>5）打开浏览器，输入 <a href="http://localhost:9100，">http://localhost:9100，</a><br>如果不能成功连接到es服务，需要修改ElasticSearch的config/elasticsearch.yml，增加：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure><p>允许elasticsearch跨域访问。重新启动ElasticSearch服务。<br><img src="https://tomasonl.oss-cn-hangzhou.aliyuncs.com/ES%E5%90%AF%E5%8A%A8head%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2.png?Expires=1607908603&OSSAccessKeyId=TMP.3Kewx9TYbp6dwqsvxxTn1vS9Z8WrNs2rZFtRNXxDodd5YfXq7d8tk827LDuDE6hkaqaXsZJJDjfwWx3Dhdv5dXiW9Lsc7x&Signature=o5EtCZKZQTxsiUE2LXQ0j1OPk6I%3D"></p><h1 id="第三章-ElasticSearch相关概念"><a href="#第三章-ElasticSearch相关概念" class="headerlink" title="第三章 ElasticSearch相关概念"></a>第三章 ElasticSearch相关概念</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p>Elasticsearch是面向文档(document oriented)的，这意味着它可以存储整个对象或文档(document)。然而它不仅仅是存储，还会索引(index)每个文档的内容使之可以被搜索。在Elasticsearch中，你可以对文档（而非成行成列的数据）进行索引、搜索、排序、过滤。Elasticsearch比传统关系型数据库如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Relational DB -&gt; Databases -&gt; Tables -&gt; Rows -&gt; Columns</span><br><span class="line">Elasticsearch -&gt; Indices   -&gt; Types  -&gt; Documents -&gt; Fields</span><br></pre></td></tr></table></figure><h2 id="3-2-Elasticsearch核心概念"><a href="#3-2-Elasticsearch核心概念" class="headerlink" title="3.2 Elasticsearch核心概念"></a>3.2 <strong>Elasticsearch核心概念</strong></h2><h3 id="3-2-1-索引-index-数据库"><a href="#3-2-1-索引-index-数据库" class="headerlink" title="3.2.1 索引 index 数据库"></a>3.2.1 索引 index 数据库</h3><p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对对应于这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。</p><h3 id="3-2-2-类型-type-表"><a href="#3-2-2-类型-type-表" class="headerlink" title="3.2.2 类型 type 表"></a>3.2.2 类型 type 表</h3><p>在一个索引中，你可以定义一种或多种类型。一个类型是你的索引的一个逻辑上的分类/分区，其语义完全由你来定。通常，会为具有一组共同字段的文档定义一个类型。比如说，我们假设你运营一个博客平台并且将你所有的数据存储到一个索引中。在这个索引中，你可以为用户数据定义一个类型，为博客数据定义另一个类型，当然，也可以为评论数据定义另一个类型。</p><h3 id="3-2-3-字段-Field-一条记录"><a href="#3-2-3-字段-Field-一条记录" class="headerlink" title="3.2.3 字段 Field 一条记录"></a>3.2.3 字段 Field 一条记录</h3><p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识</p><h3 id="3-2-4-映射-mapping-表结构定义"><a href="#3-2-4-映射-mapping-表结构定义" class="headerlink" title="3.2.4 映射 mapping 表结构定义"></a>3.2.4 映射 mapping 表结构定义</h3><p>mapping是处理数据的方式和规则方面做一些限制，如某个字段的数据类型、默认值、分析器、是否被索引等等，这些都是映射里面可以设置的，其它就是处理es里面数据的一些使用规则设置也叫做映射，按着最优规则处理数据对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好。</p><h3 id="3-2-5-文档-document"><a href="#3-2-5-文档-document" class="headerlink" title="3.2.5 文档 document"></a>3.2.5 文档 document</h3><p>一个文档是一个可被索引的基础信息单元。比如，你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以JSON（Javascript Object Notation）格式来表示，而JSON是一个到处存在的互联网数据交互格式。</p><p>在一个index/type里面，你可以存储任意多的文档。注意，尽管一个文档，物理上存在于一个索引之中，文档必须被索引/赋予一个索引的type。</p><h3 id="3-2-7-集群-cluster"><a href="#3-2-7-集群-cluster" class="headerlink" title="3.2.7 集群 cluster"></a>3.2.7 集群 cluster</h3><p>一个集群就是由一个或多个节点组织在一起，它们共同持有整个的数据，并一起提供索引和搜索功能。一个集群由一个唯一的名字标识，这个名字默认就是“elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。</p><h3 id="3-2-8-节点-node"><a href="#3-2-8-节点-node" class="headerlink" title="3.2.8 节点 node"></a>3.2.8 节点 node</h3><p>一个节点是集群中的一个服务器，作为集群的一部分，它存储数据，参与集群的索引和搜索功能。和集群类似，一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于Elasticsearch集群中的哪些节点。</p><p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。</p><p>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何Elasticsearch节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。</p><h3 id="3-2-9-分片和复制-shards-amp-replicas"><a href="#3-2-9-分片和复制-shards-amp-replicas" class="headerlink" title="3.2.9 分片和复制 shards&amp;replicas"></a>3.2.9 分片和复制 shards&amp;replicas</h3><p>一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有10亿文档的索引占据1TB的磁盘空间，而任一节点都没有这样大的磁盘空间；或者单个节点处理搜索请求，响应太慢。为了解决这个问题，Elasticsearch提供了将索引划分成多份的能力，这些份就叫做分片。当你创建一个索引的时候，你可以指定你想要的分片的数量。每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。分片很重要，主要有两方面的原因：<br>1）允许你水平分割/扩展你的内容容量。<br>2）允许你在分片（潜在地，位于多个节点上）之上进行分布式的、并行的操作，进而提高性能/吞吐量。</p><p>至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由Elasticsearch管理的，对于作为用户的你来说，这些都是透明的。</p><p>在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的，Elasticsearch允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片，或者直接叫复制。</p><p>复制之所以重要，有两个主要原因： 在分片/节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分片从不与原/主要（original/primary）分片置于同一节点上是非常重要的。扩展你的搜索量/吞吐量，因为搜索可以在所有的复制上并行运行。总之，每个索引可以被分成多个分片。一个索引也可以被复制0次（意思是没有复制）或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。<br>默认情况下，Elasticsearch中的每个索引被分片5个主分片和1个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有5个主分片和另外5个复制分片（1个完全拷贝），这样的话每个索引总共就有10个分片。</p><h1 id="第四章-ElasticSearch的客户端操作"><a href="#第四章-ElasticSearch的客户端操作" class="headerlink" title="第四章 ElasticSearch的客户端操作"></a>第四章 ElasticSearch的客户端操作</h1><p>实际开发中，主要有三种方式可以作为elasticsearch服务的客户端：</p><ul><li>第一种，elasticsearch-head插件</li><li>第二种，使用elasticsearch提供的Restful接口直接访问</li><li>第三种，使用elasticsearch提供的API进行访问<h2 id="4-1-安装Postman工具"><a href="#4-1-安装Postman工具" class="headerlink" title="4.1 安装Postman工具"></a>4.1 安装Postman工具</h2>Postman中文版是postman这款强大网页调试工具的windows客户端，提供功能强大的Web API &amp; HTTP 请求调试。软件功能非常强大，界面简洁明晰、操作方便快捷，设计得很人性化。Postman中文版能够发送任何类型的HTTP 请求 (GET, HEAD, POST, PUT..)，且可以附带任何数量的参数。<h2 id="4-2-使用Postman工具进行Restful接口访问"><a href="#4-2-使用Postman工具进行Restful接口访问" class="headerlink" title="4.2 使用Postman工具进行Restful接口访问"></a>4.2 使用Postman工具进行Restful接口访问</h2><h3 id="4-2-1-ElasticSearch的接口语法"><a href="#4-2-1-ElasticSearch的接口语法" class="headerlink" title="4.2.1 ElasticSearch的接口语法"></a>4.2.1 ElasticSearch的接口语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X&lt;VERB&gt; &#39;&lt;PROTOCOL&gt;:&#x2F;&#x2F;&lt;HOST&gt;:&lt;PORT&gt;&#x2F;&lt;PATH&gt;?&lt;QUERY_STRING&gt;&#39; -d &#39;&lt;BODY&gt;&#39;</span><br></pre></td></tr></table></figure>其中：<table><thead><tr><th>参数</th><th>内容</th></tr></thead><tbody><tr><td><code>VERB</code></td><td>适当的 HTTP <em>方法</em> 或 <em>谓词</em> : <code>GET</code>、 <code>POST</code>、 <code>PUT</code>、 <code>HEAD</code> 或者 <code>DELETE</code>。</td></tr><tr><td><code>PROTOCOL</code></td><td><code>http</code> 或者 <code>https</code>（如果你在 Elasticsearch 前面有一个 <code>https</code> 代理）</td></tr><tr><td><code>HOST</code></td><td>Elasticsearch 集群中任意节点的主机名，或者用 <code>localhost</code> 代表本地机器上的节点。</td></tr><tr><td><code>PORT</code></td><td>运行 Elasticsearch HTTP 服务的端口号，默认是 <code>9200</code> 。</td></tr><tr><td><code>PATH</code></td><td>API 的终端路径（例如 <code>_count</code> 将返回集群中文档数量）。Path 可能包含多个组件，例如：<code>_cluster/stats</code> 和 <code>_nodes/stats/jvm</code> 。</td></tr><tr><td><code>QUERY_STRING</code></td><td>任意可选的查询字符串参数 (例如 <code>?pretty</code> 将格式化地输出 JSON 返回值，使其更容易阅读)</td></tr><tr><td><code>BODY</code></td><td>一个 JSON 格式的请求体 (如果请求需要的话)</td></tr></tbody></table></li></ul><h3 id="4-2-2-创建索引index和映射mapping"><a href="#4-2-2-创建索引index和映射mapping" class="headerlink" title="4.2.2 创建索引index和映射mapping"></a>4.2.2 创建索引index和映射mapping</h3><p>请求url：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUTlocalhost:9200/blog1</span><br></pre></td></tr></table></figure><p>请求体：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;article&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;store&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;not_analyzed&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;title&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;store&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;analyzed&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;standard&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;content&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;store&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;analyzed&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;standard&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>elasticsearch-head查看：</p><p>###4.2.3 创建索引后设置Mapping</p><p>我们可以在创建索引时设置mapping信息，当然也可以先创建索引然后再设置mapping。</p><p>在上一个步骤中不设置maping信息，直接使用put方法创建一个索引，然后设置mapping信息。</p><p>请求的url：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POSThttp:&#x2F;&#x2F;127.0.0.1:9200&#x2F;blog2&#x2F;hello&#x2F;_mapping</span><br></pre></td></tr></table></figure><p>请求体：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;hello&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;long&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;store&quot;</span>:<span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;title&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;store&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">                <span class="attr">&quot;index&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">                <span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;standard&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;content&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;store&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">                <span class="attr">&quot;index&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">                <span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;standard&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PostMan截图<br><img src="image%5C61.png"></p><h3 id="4-2-4-删除索引index"><a href="#4-2-4-删除索引index" class="headerlink" title="4.2.4 删除索引index"></a>4.2.4 删除索引index</h3><p>请求url：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">DELETElocalhost:9200/blog1</span><br></pre></td></tr></table></figure><p>postman截图：</p><p><img src="image%5C48.png"></p><p>elasticsearch-head查看：</p><p><img src="image%5C49.png"></p><h3 id="4-2-5-创建文档document"><a href="#4-2-5-创建文档document" class="headerlink" title="4.2.5 创建文档document"></a>4.2.5 创建文档document</h3><p>请求url：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">POSTlocalhost:9200/blog1/article/1</span><br></pre></td></tr></table></figure><p>请求体：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">&quot;title&quot;</span>:<span class="string">&quot;ElasticSearch是一个基于Lucene的搜索服务器&quot;</span>,</span><br><span class="line"><span class="attr">&quot;content&quot;</span>:<span class="string">&quot;它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>postman截图：</p><p><img src="image%5C50.png"></p><p>elasticsearch-head查看：</p><p><img src="image%5C51.png"></p><h3 id="4-2-6-修改文档document"><a href="#4-2-6-修改文档document" class="headerlink" title="4.2.6 修改文档document"></a>4.2.6 修改文档document</h3><p>请求url：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">POSTlocalhost:9200/blog1/article/1</span><br></pre></td></tr></table></figure><p>请求体：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">&quot;title&quot;</span>:<span class="string">&quot;【修改】ElasticSearch是一个基于Lucene的搜索服务器&quot;</span>,</span><br><span class="line"><span class="attr">&quot;content&quot;</span>:<span class="string">&quot;【修改】它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>postman截图：</p><p><img src="image%5C52.png"></p><p>elasticsearch-head查看：</p><p><img src="image%5C53.png"></p><h3 id="4-2-7-删除文档document"><a href="#4-2-7-删除文档document" class="headerlink" title="4.2.7 删除文档document"></a>4.2.7 删除文档document</h3><p>请求url：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">DELETElocalhost:9200/blog1/article/1</span><br></pre></td></tr></table></figure><p>postman截图：</p><p><img src="image%5C54.png"></p><p>elasticsearch-head查看：</p><p><img src="image%5C55.png"></p><h3 id="4-2-8-查询文档-根据id查询"><a href="#4-2-8-查询文档-根据id查询" class="headerlink" title="4.2.8 查询文档-根据id查询"></a>4.2.8 查询文档-根据id查询</h3><p>请求url：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GETlocalhost:9200/blog1/article/1</span><br></pre></td></tr></table></figure><p>postman截图：</p><p><img src="image%5C56.png"></p><h3 id="4-2-9-查询文档-querystring查询"><a href="#4-2-9-查询文档-querystring查询" class="headerlink" title="4.2.9 查询文档-querystring查询"></a>4.2.9 查询文档-querystring查询</h3><p>请求url：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">POSTlocalhost:9200/blog1/article/_search</span><br></pre></td></tr></table></figure><p>请求体：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query_string&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;default_field&quot;</span>: <span class="string">&quot;title&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;搜索服务器&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>postman截图：</p><p><img src="image%5C57.png"></p><p>注意：</p><p>将搜索内容”搜索服务器”修改为”钢索”，同样也能搜索到文档，该原因会在下面讲解中得到答案</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query_string&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;default_field&quot;</span>: <span class="string">&quot;title&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;钢索&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-10-查询文档-term查询"><a href="#4-2-10-查询文档-term查询" class="headerlink" title="4.2.10 查询文档-term查询"></a>4.2.10 查询文档-term查询</h3><p>请求url：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">POSTlocalhost:9200/blog1/article/_search</span><br></pre></td></tr></table></figure><p>请求体：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;搜索&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>postman截图：</p><p><img src="image%5C58.png"></p><h1 id="第五章-IK-分词器和ElasticSearch集成使用"><a href="#第五章-IK-分词器和ElasticSearch集成使用" class="headerlink" title="第五章 IK 分词器和ElasticSearch集成使用"></a>第五章 IK 分词器和ElasticSearch集成使用</h1><h2 id="5-1-上述查询存在问题分析"><a href="#5-1-上述查询存在问题分析" class="headerlink" title="5.1 上述查询存在问题分析"></a>5.1 上述查询存在问题分析</h2><p>在进行字符串查询时，我们发现去搜索”搜索服务器”和”钢索”都可以搜索到数据；</p><p>而在进行词条查询时，我们搜索”搜索”却没有搜索到数据；</p><p>究其原因是ElasticSearch的标准分词器导致的，当我们创建索引时，字段使用的是标准分词器：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;article&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;store&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;not_analyzed&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;title&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;store&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;analyzed&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;standard&quot;</span><span class="comment">//标准分词器</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;content&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;store&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;analyzed&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;standard&quot;</span><span class="comment">//标准分词器</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如对 “我是程序员” 进行分词</p><p>标准分词器分词效果测试：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/_analyze?analyzer=standard&amp;pretty=true&amp;text=我是程序员</span><br></pre></td></tr></table></figure><p>分词结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;我&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;是&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;程&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;序&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;员&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而我们需要的分词效果是：我、是、程序、程序员</p><p>这样的话就需要对中文支持良好的分析器的支持，支持中文分词的分词器有很多，word分词器、庖丁解牛、盘古分词、Ansj分词等，但我们常用的还是下面要介绍的IK分词器。</p><h2 id="5-2-IK分词器简介"><a href="#5-2-IK分词器简介" class="headerlink" title="5.2 IK分词器简介"></a>5.2 IK分词器简介</h2><p>IKAnalyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包。从2006年12月推出1.0版开始，IKAnalyzer已经推出 了3个大版本。最初，它是以开源项目Lucene为应用主体的，结合词典分词和文法分析算法的中文分词组件。新版本的IKAnalyzer3.0则发展为 面向Java的公用分词组件，独立于Lucene项目，同时提供了对Lucene的默认优化实现。</p><p>IK分词器3.0的特性如下：</p><p>1）采用了特有的“正向迭代最细粒度切分算法“，具有60万字/秒的高速处理能力。<br>2）采用了多子处理器分析模式，支持：英文字母（IP地址、Email、URL）、数字（日期，常用中文数量词，罗马数字，科学计数法），中文词汇（姓名、地名处理）等分词处理。<br>3）对中英联合支持不是很好,在这方面的处理比较麻烦.需再做一次查询,同时是支持个人词条的优化的词典存储，更小的内存占用。<br>4）支持用户词典扩展定义。<br>5）针对Lucene全文检索优化的查询分析器IKQueryParser；采用歧义分析算法优化查询关键字的搜索排列组合，能极大的提高Lucene检索的命中率。</p><h2 id="5-3-ElasticSearch集成IK分词器"><a href="#5-3-ElasticSearch集成IK分词器" class="headerlink" title="5.3 ElasticSearch集成IK分词器"></a>5.3 ElasticSearch集成IK分词器</h2><h3 id="5-3-1-IK分词器的安装"><a href="#5-3-1-IK分词器的安装" class="headerlink" title="5.3.1 IK分词器的安装"></a>5.3.1 IK分词器的安装</h3><p>1）下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a>   </p><p>课程资料也提供了IK分词器的压缩包：</p><p><img src="image/34.png"></p><p>2）解压，将解压后的elasticsearch文件夹拷贝到elasticsearch-5.6.8\plugins下，并重命名文件夹为analysis-ik</p><p><img src="image/35.png"></p><p>3）重新启动ElasticSearch，即可加载IK分词器</p><p><img src="image/36.png"></p><h3 id="5-3-2-IK分词器测试"><a href="#5-3-2-IK分词器测试" class="headerlink" title="5.3.2 IK分词器测试"></a>5.3.2 IK分词器测试</h3><p>IK提供了两个分词算法ik_smart 和 ik_max_word</p><p>其中 ik_smart 为最少切分，ik_max_word为最细粒度划分</p><p>我们分别来试一下</p><p>1）最小切分：在浏览器地址栏输入地址</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/_analyze?analyzer=ik_smart&amp;pretty=true&amp;text=我是程序员</span><br></pre></td></tr></table></figure><p>输出的结果为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;我&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 1,</span><br><span class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;是&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 1,</span><br><span class="line">      &quot;end_offset&quot; : 2,</span><br><span class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;程序员&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 2,</span><br><span class="line">      &quot;end_offset&quot; : 5,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 2</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）最细切分：在浏览器地址栏输入地址</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/_analyze?analyzer=ik_max_word&amp;pretty=true&amp;text=我是程序员</span><br></pre></td></tr></table></figure><p>输出的结果为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;我&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 1,</span><br><span class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;是&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 1,</span><br><span class="line">      &quot;end_offset&quot; : 2,</span><br><span class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;程序员&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 2,</span><br><span class="line">      &quot;end_offset&quot; : 5,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;程序&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 2,</span><br><span class="line">      &quot;end_offset&quot; : 4,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;员&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 4,</span><br><span class="line">      &quot;end_offset&quot; : 5,</span><br><span class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot; : 4</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-修改索引映射mapping"><a href="#5-4-修改索引映射mapping" class="headerlink" title="5.4 修改索引映射mapping"></a>5.4 修改索引映射mapping</h2><h3 id="5-4-1-重建索引"><a href="#5-4-1-重建索引" class="headerlink" title="5.4.1 重建索引"></a>5.4.1 重建索引</h3><p>删除原有blog1索引</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">DELETElocalhost:9200/blog1</span><br></pre></td></tr></table></figure><p>创建blog1索引，此时分词器使用ik_max_word</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUTlocalhost:9200/blog1</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;article&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;store&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;not_analyzed&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;title&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;store&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;analyzed&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;content&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;store&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;analyzed&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建文档</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">POSTlocalhost:9200/blog1/article/1</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">&quot;title&quot;</span>:<span class="string">&quot;ElasticSearch是一个基于Lucene的搜索服务器&quot;</span>,</span><br><span class="line"><span class="attr">&quot;content&quot;</span>:<span class="string">&quot;它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-2-再次测试queryString查询"><a href="#5-4-2-再次测试queryString查询" class="headerlink" title="5.4.2 再次测试queryString查询"></a>5.4.2 再次测试queryString查询</h3><p>请求url：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">POSTlocalhost:9200/blog1/article/_search</span><br></pre></td></tr></table></figure><p>请求体：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query_string&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;default_field&quot;</span>: <span class="string">&quot;title&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;搜索服务器&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>postman截图：</p><p><img src="image/57.png"></p><p>将请求体搜索字符串修改为”钢索”，再次查询：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query_string&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;default_field&quot;</span>: <span class="string">&quot;title&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;钢索&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>postman截图：</p><p><img src="image%5C59.png"></p><h3 id="5-4-3-再次测试term测试"><a href="#5-4-3-再次测试term测试" class="headerlink" title="5.4.3 再次测试term测试"></a>5.4.3 再次测试term测试</h3><p>请求url：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">POSTlocalhost:9200/blog1/article/_search</span><br></pre></td></tr></table></figure><p>请求体：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;搜索&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>postman截图：</p><p><img src="image%5C60.png"></p><h1 id="第六章-ElasticSearch集群"><a href="#第六章-ElasticSearch集群" class="headerlink" title="第六章 ElasticSearch集群"></a>第六章 ElasticSearch集群</h1><p>​    ES集群是一个 P2P类型(使用 gossip 协议)的分布式系统，除了集群状态管理以外，其他所有的请求都可以发送到集群内任意一台节点上，这个节点可以自己找到需要转发给哪些节点，并且直接跟这些节点通信。所以，从网络架构及服务配置上来说，构建集群所需要的配置极其简单。在 Elasticsearch 2.0 之前，无阻碍的网络下，所有配置了相同 cluster.name 的节点都自动归属到一个集群中。2.0 版本之后，基于安全的考虑避免开发环境过于随便造成的麻烦，从 2.0 版本开始，默认的自动发现方式改为了单播(unicast)方式。配置里提供几台节点的地址，ES 将其视作 gossip router 角色，借以完成集群的发现。由于这只是 ES 内一个很小的功能，所以 gossip router 角色并不需要单独配置，每个 ES 节点都可以担任。所以，采用单播方式的集群，各节点都配置相同的几个节点列表作为 router 即可。</p><p>​    集群中节点数量没有限制，一般大于等于2个节点就可以看做是集群了。一般处于高性能及高可用方面来考虑一般集群中的节点数量都是3个及3个以上。</p><h2 id="6-1-集群的相关概念"><a href="#6-1-集群的相关概念" class="headerlink" title="6.1 集群的相关概念"></a>6.1 集群的相关概念</h2><h3 id="6-1-1-集群-cluster"><a href="#6-1-1-集群-cluster" class="headerlink" title="6.1.1 集群 cluster"></a>6.1.1 集群 cluster</h3><p>一个集群就是由一个或多个节点组织在一起，它们共同持有整个的数据，并一起提供索引和搜索功能。一个集群由一个唯一的名字标识，这个名字默认就是“elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群</p><h3 id="6-1-2-节点-node"><a href="#6-1-2-节点-node" class="headerlink" title="6.1.2 节点 node"></a>6.1.2 节点 node</h3><p>一个节点是集群中的一个服务器，作为集群的一部分，它存储数据，参与集群的索引和搜索功能。和集群类似，一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于Elasticsearch集群中的哪些节点。</p><p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。</p><p>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何Elasticsearch节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。</p><h3 id="6-1-3-分片和复制-shards-amp-replicas"><a href="#6-1-3-分片和复制-shards-amp-replicas" class="headerlink" title="6.1.3 分片和复制 shards&amp;replicas"></a>6.1.3 分片和复制 shards&amp;replicas</h3><p>一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有10亿文档的索引占据1TB的磁盘空间，而任一节点都没有这样大的磁盘空间；或者单个节点处理搜索请求，响应太慢。为了解决这个问题，Elasticsearch提供了将索引划分成多份的能力，这些份就叫做分片。当你创建一个索引的时候，你可以指定你想要的分片的数量。每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。分片很重要，主要有两方面的原因：<br>1）允许你水平分割/扩展你的内容容量。<br>2）允许你在分片（潜在地，位于多个节点上）之上进行分布式的、并行的操作，进而提高性能/吞吐量。</p><p>至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由Elasticsearch管理的，对于作为用户的你来说，这些都是透明的。</p><p>在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的，Elasticsearch允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片，或者直接叫复制。</p><p>复制之所以重要，有两个主要原因： 在分片/节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分片从不与原/主要（original/primary）分片置于同一节点上是非常重要的。扩展你的搜索量/吞吐量，因为搜索可以在所有的复制上并行运行。总之，每个索引可以被分成多个分片。一个索引也可以被复制0次（意思是没有复制）或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。</p><p>默认情况下，Elasticsearch中的每个索引被分片5个主分片和1个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有5个主分片和另外5个复制分片（1个完全拷贝），这样的话每个索引总共就有10个分片。</p><h2 id="6-2-集群的搭建"><a href="#6-2-集群的搭建" class="headerlink" title="6.2 集群的搭建"></a>6.2 集群的搭建</h2><h3 id="6-2-1-准备三台elasticsearch服务器"><a href="#6-2-1-准备三台elasticsearch服务器" class="headerlink" title="6.2.1 准备三台elasticsearch服务器"></a>6.2.1 准备三台elasticsearch服务器</h3><p>创建elasticsearch-cluster文件夹，在内部复制三个elasticsearch服务</p><h3 id="6-2-2-修改每台服务器配置"><a href="#6-2-2-修改每台服务器配置" class="headerlink" title="6.2.2 修改每台服务器配置"></a>6.2.2 修改每台服务器配置</h3><p>修改elasticsearch-cluster\node*\config\elasticsearch.yml配置文件</p><h4 id="node1节点："><a href="#node1节点：" class="headerlink" title="node1节点："></a>node1节点：</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#节点1的配置信息：</span></span><br><span class="line"><span class="comment">#集群名称，保证唯一</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">my-elasticsearch</span></span><br><span class="line"><span class="comment">#节点名称，必须不一样</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="comment">#必须为本机的ip地址</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment">#服务端口号，在同一机器下必须不一样</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="comment">#集群间通信端口号，在同一机器下必须不一样</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9300</span></span><br><span class="line"><span class="comment">#设置集群自动发现机器ip集合</span></span><br><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> [<span class="string">&quot;127.0.0.1:9300&quot;</span>,<span class="string">&quot;127.0.0.1:9301&quot;</span>,<span class="string">&quot;127.0.0.1:9302&quot;</span>]</span><br></pre></td></tr></table></figure><h4 id="node2节点："><a href="#node2节点：" class="headerlink" title="node2节点："></a>node2节点：</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#节点2的配置信息：</span></span><br><span class="line"><span class="comment">#集群名称，保证唯一</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">my-elasticsearch</span></span><br><span class="line"><span class="comment">#节点名称，必须不一样</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-2</span></span><br><span class="line"><span class="comment">#必须为本机的ip地址</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment">#服务端口号，在同一机器下必须不一样</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9201</span></span><br><span class="line"><span class="comment">#集群间通信端口号，在同一机器下必须不一样</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9301</span></span><br><span class="line"><span class="comment">#设置集群自动发现机器ip集合</span></span><br><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> [<span class="string">&quot;127.0.0.1:9300&quot;</span>,<span class="string">&quot;127.0.0.1:9301&quot;</span>,<span class="string">&quot;127.0.0.1:9302&quot;</span>]</span><br></pre></td></tr></table></figure><h4 id="node3节点："><a href="#node3节点：" class="headerlink" title="node3节点："></a>node3节点：</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#节点3的配置信息：</span></span><br><span class="line"><span class="comment">#集群名称，保证唯一</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">my-elasticsearch</span></span><br><span class="line"><span class="comment">#节点名称，必须不一样</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-3</span></span><br><span class="line"><span class="comment">#必须为本机的ip地址</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment">#服务端口号，在同一机器下必须不一样</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9202</span></span><br><span class="line"><span class="comment">#集群间通信端口号，在同一机器下必须不一样</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9302</span></span><br><span class="line"><span class="comment">#设置集群自动发现机器ip集合</span></span><br><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> [<span class="string">&quot;127.0.0.1:9300&quot;</span>,<span class="string">&quot;127.0.0.1:9301&quot;</span>,<span class="string">&quot;127.0.0.1:9302&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="6-2-3-启动各个节点服务器"><a href="#6-2-3-启动各个节点服务器" class="headerlink" title="6.2.3 启动各个节点服务器"></a>6.2.3 启动各个节点服务器</h3><p>双击elasticsearch-cluster\node*\bin\elasticsearch.bat</p><h4 id="启动节点1："><a href="#启动节点1：" class="headerlink" title="启动节点1："></a>启动节点1：</h4><p><img src="image%5C21.png"></p><h4 id="启动节点2："><a href="#启动节点2：" class="headerlink" title="启动节点2："></a>启动节点2：</h4><p><img src="image%5C22.png"></p><h4 id="启动节点3："><a href="#启动节点3：" class="headerlink" title="启动节点3："></a>启动节点3：</h4><p><img src="image%5C23.png"></p><h3 id="6-2-4-集群测试"><a href="#6-2-4-集群测试" class="headerlink" title="6.2.4 集群测试"></a>6.2.4 集群测试</h3><h4 id="添加索引和映射"><a href="#添加索引和映射" class="headerlink" title="添加索引和映射"></a>添加索引和映射</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUTlocalhost:9200/blog1</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;article&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;store&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;not_analyzed&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;title&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;store&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;analyzed&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;standard&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;content&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;store&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;analyzed&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;standard&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加文档"><a href="#添加文档" class="headerlink" title="添加文档"></a>添加文档</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">POSTlocalhost:9200/blog1/article/1</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">&quot;title&quot;</span>:<span class="string">&quot;ElasticSearch是一个基于Lucene的搜索服务器&quot;</span>,</span><br><span class="line"><span class="attr">&quot;content&quot;</span>:<span class="string">&quot;它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用elasticsearch-header查看集群情况"><a href="#使用elasticsearch-header查看集群情况" class="headerlink" title="使用elasticsearch-header查看集群情况"></a>使用elasticsearch-header查看集群情况</h4><p><img src="image%5C62.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>SM2国密算法-学习札记</title>
    <link href="http://tomasonl.github.io/2020/12/05/SM2%E5%9B%BD%E5%AF%86%E7%AE%97%E6%B3%95-%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/"/>
    <id>http://tomasonl.github.io/2020/12/05/SM2%E5%9B%BD%E5%AF%86%E7%AE%97%E6%B3%95-%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/</id>
    <published>2020-12-05T02:56:59.000Z</published>
    <updated>2020-12-08T03:01:17.482Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>国密算法是我国自主研发创新的一套数据加密处理系列算法。从SM1-SM4分别实现了对称、非对称、摘要等算法功能。特别适合应用于嵌入式物联网等相关领域，完成身份认证和数据加解密等功能。当然，默认的前提条件是算法密钥必须保证安全性，因此要将国密算法嵌入到硬件加密芯片中结合使用。</p><h1 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h1><p>国密即国家密码局认定的国产密码算法。主要有SM1，SM2，SM3，SM4。密钥长度和分组长度均为128位。</p><ul><li>SM1 为对称加密。其加密强度与AES相当。该算法不公开，调用该算法时，需要通过加密芯片的接口进行调用。</li><li>SM2为非对称加密，基于ECC。该算法已公开。由于该算法基于ECC，故其签名速度与秘钥生成速度都快于RSA。ECC 256位（SM2采用的就是ECC 256位的一种）安全强度比RSA 2048位高，但运算速度快于RSA。</li><li>SM3 消息摘要。可以用MD5作为对比理解。该算法已公开。校验结果为256位。</li><li>SM4 无线局域网标准的分组数据算法。对称加密，密钥长度和分组长度均为128位。<br>由于SM1、SM4加解密的分组大小为128bit，故对消息进行加解密时，若消息长度过长，需要进行分组，要消息长度不足，则要进行填充。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>分布式微服务治理</title>
    <link href="http://tomasonl.github.io/2020/12/02/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/"/>
    <id>http://tomasonl.github.io/2020/12/02/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/</id>
    <published>2020-12-02T08:29:32.000Z</published>
    <updated>2020-12-05T01:27:18.373Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>微服务</strong>——一种软开技术，面向服务SOA架构的一种变体，把程序构造为很多松耦合的服务。<br><strong>分布式</strong>——一种部署方式，提高系统稳定性，优化性能。<br>分散部署在不同的机器。是一种面向SOA架构的，服务之间也是通过RPC等方式交互的。逻辑架构设计完后就该做物理架构设计，系统应用部署在超过一台服务器或虚拟机上，且各分开部署的部分彼此通过各种通讯协议交互信息，就可算作分布式部署，生产环境下的微服务肯定是分布式部署的，分布式部署的应用不一定是微服务架构的，比如集群部署，它是把相同应用复制到不同服务器上，但是逻辑功能上还是单体应用。</p><h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><h2 id="1、微服务设计原则"><a href="#1、微服务设计原则" class="headerlink" title="1、微服务设计原则"></a>1、微服务设计原则</h2><ul><li>单一职责—-每个微服务只需实现自己的业务逻辑；</li><li>服务自治—-每个微服务从开发、测试、运维、存储等均独立,不依赖于其它模块;</li><li>轻量级通信—-通信的语言轻量,通信方式需跨语言、跨平台的；</li><li>接口明确—-接口尽量做的更通用,更灵活,从而尽量避免其它模块连带调整。</li></ul><h2 id="2、微服务四个核心问题："><a href="#2、微服务四个核心问题：" class="headerlink" title="2、微服务四个核心问题："></a>2、微服务四个核心问题：</h2><ul><li>这么多服务，客户端如何访问？</li><li>这么多服务，服务间如何通信？</li><li>这么多服务，如何实现和治理？</li><li>这么多服务，服务挂了怎么办？</li></ul><h2 id="3、微服务的优缺点？"><a href="#3、微服务的优缺点？" class="headerlink" title="3、微服务的优缺点？"></a>3、微服务的优缺点？</h2><ul><li>单一职责，聚焦指定业务功能，开发效率高；</li><li>松耦合，各阶段独立、存储可以独立也可以统一；</li><li>易于与第三方平台集成，自动部署（jenkins、Hudson、bamboo…）；</li><li>开发人员要处理分布式系统的复杂性、运维测试成本增大；</li><li>服务器通信成本，部署依赖问题，内存开销大；</li></ul><h2 id="4、微服务通信方式"><a href="#4、微服务通信方式" class="headerlink" title="4、微服务通信方式"></a>4、微服务通信方式</h2><h3 id="1、RPC通信介绍"><a href="#1、RPC通信介绍" class="headerlink" title="1、RPC通信介绍"></a>1、RPC通信介绍</h3><p>   RPC（Remote Procedure Call Protocol）远程过程调用，要从一台计算机上执行另外一台计算机上的程序。跨越了物理服务器的限制，在网络中完成。基于Socket，工作在会话层。自定义数据格式，速度快，效率高。</p><p>1、两个重点：能否快速建立连接、序列化和反序列化机制快不快；<br>2、框架很多：Dubbo、HSF、早期的webservice、谷歌开源的gRPC、Apache的Thrift、新浪微博的Montan等；</p><p>RPC调用过程<br><strong>序列化：</strong>把对象转换为字节序列的过程称为对象的序列化，编码过程。<br><strong>反序列化：</strong>把字节序列恢复为对象的过程称为对象的反序列化，也解码过程。</p><h3 id="2、HTTP通信介绍"><a href="#2、HTTP通信介绍" class="headerlink" title="2、HTTP通信介绍"></a>2、HTTP通信介绍</h3><p>http其实是一种网络传输协议，基于TCP，工作在应用层，规定了数据传输的格式。现在客户端浏览器与服务端通信基本都是采用Http协议，也可以用来进行远程服务调用。缺点是消息封装臃肿，优势是对服务的提供和调用方没有任何技术限定，自由灵活，更符合微服务理念。开源http客户端工具，例如：HttpClient（Apache）-OKHttp（android轻量网络通信框架,移动支付Square公司贡献(还提供Picasso图片缓存框架)，okhttp用于替代HttpUrlConnection和Apache HttpClient)-URLConnection（URLConnection任何网络连接都需要经过socket才能连接，HttpURLConnection不需要设置socket，所以，HttpURLConnection并不是底层的连接，而是在底层连接上的一个请求。这就是为什么HttpURLConneciton只是一个抽象类，自身不能被实例化的原因。）</p><p>Spring提供了一种简单便捷的模板—RestTemplate。底层是HttpURLConnection实现！使用restTemplate访问restful接口非常的简单粗暴无脑。(url、requestMap、ResponseBean.class)这三个参数分别代表 请求地址、请求参数、HTTP响应转换被转换成的对象类型。RestTemplate方法的名称遵循命名约定，第一部分指出正在调用什么HTTP方法，第二部分指示返回的内容。本例中调用了restTemplate.postForObject方法，post指调用了HTTP的post方法，Object指将HTTP响应转换为您选择的对象类型。</p><p>小结：</p><p>1.调用的各种实现所谓的http连接的api(包括java自带的httpurlconnection)其底层基本上都是调用的jdk的socket接口。<br>2.socket是基于tcp/ip协议封装的一套实现tcp连接的接口，或者说是工具。<br>3.所以会说其实http也是通过socket来实现的这种看似没有问题但又含糊不清的说法。<br>4.http只是一种协议，什么请求头，请求题，响应头都是根据固定的格式制定的报文，然后最终(可能不直接调用volley,okhttp等)都会通过socket接口将这些报文发给服务器或者客户端。</p><h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><p>SpringCloud是个生态，并不是一门技术。六大模块：负载均衡、服务注册与发现、监控、配置管理、网关、分布式追踪；</p><h2 id="1、Eureka注册中心"><a href="#1、Eureka注册中心" class="headerlink" title="1、Eureka注册中心"></a>1、Eureka注册中心</h2><p>首先我们来解决第一问题，服务的管理。犹瑞卡，注册中心来自NetFlix。<br>Eureka负责管理、记录服务提供者的信息。服务调像下单一样吧需求告诉Eureka，Eureka就会告诉所需服务。同时，服务提供方与Eureka之间通过 “心跳” 机制进行监控，当某个服务提供方出现问题，Eureka自然会把它从服务列表中剔除。这就实现了服务的自动注册、发现、状态监控。</p><p>Eureka：就是服务注册中心（可以是一个集群），对外暴露自己的地址<br>提供者：启动后向Eureka注册自己信息（地址，提供什么服务）<br>消费者：向Eureka订阅服务，Eureka会将对应服务的所有提供者地址列表发送给消费者，并且定期更新<br>心跳(续约)：提供者定期通过http方式向Eureka刷新自己的状态<br>1，启动器依赖<br>        <dependency><br>            <groupId>org.springframework.cloud</groupId><br>            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId><br>        </dependency><br>2，配置文件<br>server:<br>  port: 10086<br>spring:<br>  application:<br>    name: eureka-server<br>eureka:<br>  client:<br>    service-url:<br>      # eureka 服务地址，如果是集群的话；需要指定其它集群eureka地址<br>      defaultZone: <a href="http://127.0.0.1:10086/eureka">http://127.0.0.1:10086/eureka</a><br>    # 不注册自己，集群的话就注册<br>    register-with-eureka: false<br>    # 不拉取服务<br>    fetch-registry: false<br>3，服务注册与发现<br>服务注册：在服务提供工程user-service上添加Eureka客户端依赖；自动将服务注册到EurekaServer服务地址列表。<br>Provider启动时，会检测配置属性中的： eureka.client.register-with-erueka=true 参数是否正确，默认true。会向EurekaServer发起一个Rest请求，并携带自己的元数据信息，EurekaServer会把这些信息保存到一个双层Map结构中。<br>第一层Map的Key—服务id，一般是配置中的 spring.application.name 属性<br>第二层Map的key—服务实例id。一般host+ serviceId + port，例如： localhost:user-service:8081<br>值则是服务的实例对象，也就是说一个服务，可以同时启动多个不同实例，形成集群。<br>服务发现：在服务消费工程consumer-demo上添加Eureka客户端依赖；可以使用工具类根据服务名称获取对应的服务地址列表。<br>添加Eureka客户端依赖<br>        <dependency><br>            <groupId>org.springframework.cloud</groupId><br>            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId><br>        </dependency><br>添加启动引导类注解<br>启动类加入@EnableDiscoveryClient 注解<br>修改配置<br>spring:<br>  application:<br>    name: consumer-demo（两个服务的名字）<br>eureka:<br>  client:<br>    service-url:<br>      defaultZone: <a href="http://127.0.0.1:10086/eureka%EF%BC%88Eureka%E4%B8%AD%E5%BF%83%E5%9C%B0%E5%9D%80%EF%BC%89">http://127.0.0.1:10086/eureka（Eureka中心地址）</a><br>4，Eureka高可用<br>eureka-server</p><p>eureka:<br>  server:<br>    # 服务失效剔除时间间隔，默认60秒<br>    eviction-interval-timer-in-ms: 60000<br>    # 关闭自我保护模式（默认是打开的）<br>    enable-self-preservation: false<br>user-service </p><p>eureka:<br>  client:<br>    service-url:<br>      defaultZone: <a href="http://127.0.0.1:10086/eureka">http://127.0.0.1:10086/eureka</a><br>  instance:<br>    # 更倾向使用ip地址，而不是host名<br>    prefer-ip-address: true<br>    # ip地址<br>    ip-address: 127.0.0.1<br>    # 续约间隔，默认30秒<br>    lease-renewal-interval-in-seconds: 5<br>    # 服务失效时间，默认90秒<br>    lease-expiration-duration-in-seconds: 5<br>consumer-demo </p><p>eureka:<br>  client:<br>    service-url:<br>      defaultZone: <a href="http://127.0.0.1:10086/eureka">http://127.0.0.1:10086/eureka</a><br>    # 获取服务地址列表间隔时间，默认30秒<br>    registry-fetch-interval-seconds: 10<br>5，Eureka失效剔除以及自我保护<br>默认注册时使用的是主机名或者localhost，如果想用ip进行注册，可以在 user-service 中添加配置如下：<br>prefer-ip-address: true # 更倾向于使用ip，而不是host名。</p><p>服务续约<br>注册服务完成以后，提供者会维持一个心跳（定时向EurekaServer发起Rest请求），告诉EurekaServer：“我还活着”。这个我们称为服务的续约（renew）；<br>lease-expiration-duration-in-seconds: 90 90秒没报告，中心可能会判定服务死了。😁provider<br>lease-renewal-interval-in-seconds: 30 间隔30秒报告自己还活着。🙂provider<br>eureka.server.eviction-interval-timer-in-ms： 中心定时移除已经挂了的提供者。😭server—-失效剔除<br>registry-fetch-interval-seconds: 30 服务消费者每隔30秒拉取中心当前服务列表。🤔 consumer</p><p>自我保护<br>我们关停一个服务，很可能会在Eureka面板警告，触发了Eureka的自我保护机制。<br>当服务未按时进行心跳续约时，Eureka会统计服务实例最近15分钟心跳续约的比例是否低于了85%。在生产环境下，因为网络延迟等原因，心跳失败实例的比例很有可能超标，但是此时就把服务剔除列表并不妥当，因为服务可能没有宕机。Eureka在这段时间内不会剔除任何服务实例，直到网络恢复正常。生产环境下这很有效，保证了大多数服务依然可用，不过也有可能获取到失败的服务实例，因此服务调用者必须做好服务的失败容错。<br>可以通过下面的配置来关停自我保护：</p><p>enable-self-preservation: false # 关闭自我保护模式（默认打开）</p><h2 id="2、Ribbon负载均衡"><a href="#2、Ribbon负载均衡" class="headerlink" title="2、Ribbon负载均衡"></a>2、Ribbon负载均衡</h2><p>同属Netflix，使用负载均衡算法，例如轮询、随机或者自定义等算法,自动帮消费者在服务列表选择服务。默认轮询策略。在实例化RestTemplate的时候使用@LoadBalanced，服务地址直接可以使用服务名。</p><p>负载均衡器有三大组件：<br>1.负载规则 ,从服务器列表中决定用哪个服务器<br>2.ping任务,后台运行的任务，用来验证服务器是否可用<br>3.服务器列表,可以是静态也可以是动态，如果是动态，那么就要有一个后台线程定时去刷新和过滤列表。</p><p>均衡策略：</p><pre><code>@Beanpublic IRule ribbonRule() &#123;    return new RetryRule(new BestAvailableRule());//这里配置策略，和配置文件对应&#125;</code></pre><p>RoundRobinRule：轮询。默认超过10次获取到的server都不可用，会返回一个空的server<br>RandomRule：随机，如果随机到的server为null或者不可用的话，会while不停的循环选取<br>RetryRule：一定时限内循环重试。默认继承RoundRobinRule，也支持自定义注入，RetryRule会在每次选取之后，对选举的server进行判断，是否为null，是否alive，并且在500ms内会不停的选取判断。而RoundRobinRule失效的策略是超过10次，RandomRule是没有失效时间的概念，只要serverList没都挂。<br>BestAvailableRule：最小连接数。遍历serverList，选取出可用的且连接数最小的一个server。该算法里面有一个LoadBalancerStats的成员变量，会存储所有server的运行状况和连接数。如果选取到的server为null，那么会调用RoundRobinRule重新选取。<br>WeightedResponseTimeRule：最小响应时间。这个策略整合了随机算法和响应时间加权算法。会开启定时任务，每30秒计算一次所有Provider的响应时间，以响应时间作为权重，响应时间越短的服务器被选中的概率越大。<br>比如Node1:node2:node3的平均响应时间为100ms：200ms:300ms，那么nodes的的权重值是300:500:600，每次以600为基础*随机值，那么落在 0–300的概率为50%，300–500的概率33%，100–600的概率为17%，也就是平均响应时间越短的节点，被选中的概率越大<br>    double totalResponseTime = 0;<br>    //遍历获取所有节点的总的平均响应时间<br>    for (Server server : nlb.getAllServers()) {<br>        ServerStats ss = stats.getSingleServerStat(server);<br>        totalResponseTime += ss.getResponseTimeAvg();<br>    }<br>    Double weightSoFar = 0.0;<br>    //然后从第一个节点开始设置自增的weightSoFar，每个结点的权重值weight为总响应时间-自己的相应时间，也就是说，node的响应时间越短，weight的值就越大，就越有可能被随机数命中<br>    List<Double> finalWeights = new ArrayList<Double>();<br>    for (Server server : nlb.getAllServers()) {<br>        ServerStats ss = stats.getSingleServerStat(server);<br>        double weight = totalResponseTime - ss.getResponseTimeAvg();<br>        weightSoFar += weight;<br>        finalWeights.add(weightSoFar);<br>    }<br>    setWeights(finalWeights);</p><h2 id="3、hystrix服务熔断"><a href="#3、hystrix服务熔断" class="headerlink" title="3、hystrix服务熔断"></a>3、hystrix服务熔断</h2><p>海思锤科斯—哈哈，同属Netglix。Hystrix是一个延迟和容错库，用于隔离访问远程服务，防止出现级联失败。</p><p>Hystrix解决雪崩问题的手段主要是</p><p>1.服务降级:就是在雪崩情况下,防止用户一直等待,使用服务降级方式(返回一个友好的提示给客户端,不会去处理请求,调用fallBack本地方法),目的是为了客户的体验.<br>2.服务熔断:服务熔断是为了保护服务,假设服务最高并发10000,设置9000并发，超过就开启保护机制,使用服务降级改善体验,服务降级和服务熔断是一起使用的.<br>3.服务隔离:隔离分为线程池隔离和信号量隔离线程池隔离就是在重要的几个接口上都配置一个独立的线程池,它们之间互不影响,从而缓解雪崩效应.</p><p>服务隔离：用户请求不直接访问服务，而是使用线程池中空闲的线程访问服务，加速失败判断时间。<br>服务降级和熔断：及时返回服务调用失败的结果，让线程不因为等待服务而阻塞。线程池满或者请求超时—触发。</p><p>1，添加依赖</p><p>        <dependency></p><p>            <groupId>org.springframework.cloud</groupId></p><p>            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId></p><p>        </dependency></p><p>2，开启熔断</p><p>在启动类 ConsumerApplication 上添加注解：@EnableCircuitBreaker<br>至此，@SpringBootApplication+@EnableDiscoveryClient+@EnableCirciuitBreaker<br>经常引入这三个注解，Spring提供了@SpringCloudApplication的组合注解代替。</p><p>-3，降级逻辑</p><p>@RestController<br>@RequestMapping(“/consumer”)<br>@Slf4j<br>@DefaultProperties(defaultFallback = “defaultFallback”)</p><p>public class ConsumerController {<br>    @Autowired<br>    private RestTemplate restTemplate;<br>    @Autowired<br>    private DiscoveryClient discoveryClient;</p><p>    @GetMapping(“/{id}”)</p><p>    //@HystrixCommand(fallbackMethod = “queryByIdFallback”)<br>    @HystrixCommand</p><p>    public String queryById(@PathVariable Long id){<br>        /<em>String url = “<a href="http://localhost:9091/user/&quot;+id">http://localhost:9091/user/&quot;+id</a>;<br>      <br>        //获取eureka中注册的user-service的实例<br>        List<ServiceInstance> serviceInstances = discoveryClient.getInstances(“user-service”);<br>        ServiceInstance serviceInstance = serviceInstances.get(0);<br>        url = “http://“ + serviceInstance.getHost() + “:” + serviceInstance.getPort() + “/user/“ + id;</em>/</p><p>        String url = “<a href="http://user-service/user/&quot;">http://user-service/user/&quot;</a> + id;<br>        return restTemplate.getForObject(url, String.class);<br>    }</p><p>    public String queryByIdFallback(Long id){<br>        log.error(“查询用户信息失败。id：{}”, id);<br>        return “对不起，网络太拥挤了！”;<br>    }</p><p>    public String defaultFallback(){<br>        return “默认提示：对不起，网络太拥挤了！”;<br>    }</p><p>}<br>4，修改超时配置</p><p>hystrix:<br>  command:<br>    default:<br>      execution:<br>        isolation:<br>          thread:<br>            timeoutInMilliseconds: 2000<br>Hystrix的服务熔断机制，可以实现弹性容错；当服务请求情况好转之后，可以自动重连。通过断路的方式，将后续请求直接拒绝，一段时间（默认5秒）之后允许部分请求通过，如果调用成功则回到断路器关闭状态，否则继续打开，拒绝请求的服务。</p><h1 id="配置修改熔断策略："><a href="#配置修改熔断策略：" class="headerlink" title="配置修改熔断策略："></a>配置修改熔断策略：</h1><p>hystrix:<br>command:<br> default:<br>  circuitBreaker:<br>   errorThresholdPercentage: 50 # 触发熔断错误比例阈值，默认值50%<br>   sleepWindowInMilliseconds: 10000 # 熔断后休眠时长，默认值5秒<br>   requestVolumeThreshold: 10 # 熔断触发最小请求次数，默认值是20<br>  execution:<br>   isolation:<br>    thread:<br>     timeoutInMilliseconds: 2000 # 熔断超时设置，默认为1秒</p><h2 id="4，Feign伪装请求"><a href="#4，Feign伪装请求" class="headerlink" title="4，Feign伪装请求"></a>4，Feign伪装请求</h2><p>feign是声明式的web service客户端，它让微服务之间的调用变得更简单了，类似controller调用service。Spring Cloud集成了Ribbon和Eureka，可在使用Feign时提供负载均衡的http客户端。</p><p>Feign原理简述</p><p>启动时，程序会进行包扫描，扫描所有包下所有@FeignClient注解的类，并将这些类注入到spring的IOC容器中。当定义的Feign中的接口被调用时，通过JDK的动态代理来生成RequestTemplate。<br>RequestTemplate中包含请求的所有信息，如请求参数，请求URL等。<br>RequestTemplate声场Request，然后将Request交给client处理，这个client默认是JDK的HTTPUrlConnection，也可以是OKhttp、Apache的HTTPClient等。<br>最后client封装成LoadBaLanceClient，结合ribbon负载均衡地发起调用。<br>1，引入Feign</p><p>引入依赖后进行yaml配置：</p><p>server:<br>  port: 8082</p><p>#配置eureka<br>eureka:<br>  client:<br>    service-url:<br>      defaultZone: <a href="http://localhost:8761/eureka">http://localhost:8761/eureka</a><br>  instance:<br>    status-page-url-path: /info<br>    health-check-url-path: /health</p><p>#服务名称<br>spring:<br>  application:<br>    name: product<br>  profiles:<br>    active: ${boot.profile:dev}<br>#feign的配置，连接超时及读取超时配置<br>feign:<br>  client:<br>    config:<br>      default:<br>        connectTimeout: 5000<br>        readTimeout: 5000<br>        loggerLevel: basic<br>2，Feign的使用</p><p>@FeignClient(value = “CART”)<br>public interface CartFeignClient {</p><pre><code>@PostMapping(&quot;/cart/&#123;productId&#125;&quot;)Long addCart(@PathVariable(&quot;productId&quot;)Long productId);</code></pre><p>}<br>上面是最简单的feign client的使用，声明完为feign client后，其他spring管理的类，如service就可以直接注入使用了，例如：</p><p>//这里直接注入feign client<br>@Autowired<br>private CartFeignClient cartFeignClient;</p><p>@PostMapping(“/toCart/{productId}”)<br>public ResponseEntity addCart(@PathVariable(“productId”) Long productId){<br>    Long result = cartFeignClient.addCart(productId);<br>    return ResponseEntity.ok(result);<br>}<br>可以看到，使用feign之后，我们调用eureka 注册的其他服务，在代码中就像各个service之间相互调用那么简单。</p><p>FeignClient注解的一些属性</p><p>属性名    默认值    作用    备注<br>value    空字符串    调用服务名称，和name属性相同<br>serviceId    空字符串    服务id，作用和name属性相同    已过期<br>name    空字符串    调用服务名称，和value属性相同<br>url    空字符串    全路径地址或hostname，http或https可选<br>decode404    false    配置响应状态码为404时是否应该抛出FeignExceptions<br>configuration    {}    自定义当前feign client的一些配置    参考FeignClientsConfiguration<br>fallback    void.class    熔断机制，调用失败时，走的一些回退方法，可以用来抛出异常或给出默认返回数据。    底层依赖hystrix，启动类要加上@EnableHystrix<br>path    空字符串    自动给所有方法的requestMapping前加上前缀，类似与controller类上的requestMapping<br>primary    true    </p><p>此外，还有qualifier及fallbackFactory，这里就不再赘述。</p><p>Feign自定义处理返回的异常</p><p>这里贴上GitHub上openFeign的wiki给出的自定义errorDecoder例子。</p><p>public class StashErrorDecoder implements ErrorDecoder {</p><pre><code>@Overridepublic Exception decode(String methodKey, Response response) &#123;    if (response.status() &gt;= 400 &amp;&amp; response.status() &lt;= 499) &#123;        //这里是给出的自定义异常        return new StashClientException(                response.status(),                response.reason()        );    &#125;    if (response.status() &gt;= 500 &amp;&amp; response.status() &lt;= 599) &#123;        //这里是给出的自定义异常        return new StashServerException(                response.status(),                response.reason()        );    &#125;    //这里是其他状态码处理方法    return errorStatus(methodKey, response);&#125;</code></pre><p>}<br>自定义好异常处理类后，要在@Configuration修饰的配置类中声明此类。</p><p>Feign使用OKhttp发送request</p><p>Feign底层默认是使用jdk中的HttpURLConnection发送HTTP请求，feign也提供了OKhttp来发送请求，具体配置如下：</p><p>feign:<br>  client:<br>    config:<br>      default:<br>        connectTimeout: 5000<br>        readTimeout: 5000<br>        loggerLevel: basic<br>  okhttp:<br>    enabled: true<br>  hystrix:<br>    enabled: true<br>Dubbo学习<br>Dubbo概述<br>Dubbo是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。<br>阿里11年giuhub–14年dubbo2.4–当当dubbox、网易dubbok—17年SpringCloud出现—阿里18年把dubbox和dubbo合并dubbo2.6<br>2018.02.15 阿里把Dubbo开源给了Apache；<br>2011年，阿里宣布开源SOA服务化治理方案核心框架—Dubbo2.0.7；<br>2014年，当当网Fork一个分支，支持HttpRest协议，命名-Dubbox2.8.0；<br>2014年10月，阿里发布2.3.11。后来就有了SpringCloud；<br>2017年9月，阿里重启Dubbo，发布2.5.4、2.5.5；<br>2018年2月，捐赠Apache基金会，社区生态完善；7月官网Dubbo.apache.org，新logo</p><p> register注册       subscribe订阅           notify通知             invoke调用               count统计</p><p>                                 </p><p>注册中心Register     推荐Zookeeper（修改zoo.cfg），注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者<br>服务提供者Provider<br>暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p>服务消费者Consumer    调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。<br>容器Container    服务运行容器<br>监控中心Monitor<br>监控中心dubbo-monitor-simple 负责统计各服务调用次数，调用时间等，统计先在内存汇总后，每分钟一次发送到监控中心服务器，并以报表展示总结，为服务的运维采集数据。<br>可视化后台 dubbo-admin，jar包形式运行（2.5之前war包）。</p><p>二者都是针对特定的注册中心进行监控，因此需要配置对应的注册中心的地址，dubbo.properties或applications.properties。</p><p>Dubbo配置步骤<br>服务提供者注册到注册中心（暴露服务）<br>1、引入dubbo<br>        <dependency><br>            <groupId>com.alibaba</groupId><br>            <artifactId>dubbo</artifactId><br>            <version>2.6.2</version><br>        </dependency><br>//由于我们使用zookeeper作为注册中心，所以需要操作zookeeperdubbo<br>2.6前引入zkclient,dubbo 2.6后curator操作zookeeper;2选1即可–&gt;<br>        <dependency><br>            <groupId>com.101tec</groupId><br>            <artifactId>zkclient</artifactId><br>            <version>0.10</version><br>        </dependency></p><pre><code>    &lt;dependency&gt;        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;        &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;        &lt;version&gt;2.12.0&lt;/version&gt;    &lt;/dependency&gt;</code></pre><p>2、配置提供者</p><!--当前应用的名字  --><pre><code>&lt;dubbo:application name=&quot;gmall-user&quot;&gt;&lt;/dubbo:application&gt;</code></pre><!--指定注册中心的地址  --><pre><code>&lt;dubbo:registry address=&quot;zookeeper://118.24.44.169:2181&quot; /&gt;</code></pre><!--使用dubbo协议，将服务暴露在20880端口  --><pre><code>&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;</code></pre><!-- 指定需要暴露的服务 --><pre><code>&lt;dubbo:service interface=&quot;com.atguigu.gmall.service.UserService&quot; ref=&quot;userServiceImpl&quot; /&gt;</code></pre><p>3、启动服务<br>    public static void main(String[] args) throws IOException {<br>        ClassPathXmlApplicationContext context =<br>                new ClassPathXmlApplicationContext(“classpath:spring-beans.xml”);<br>        System.in.read();<br>    }<br>服务消费者去服务中心订阅服务<br>1、引入dubbo<br>        <dependency><br>            <groupId>com.alibaba</groupId><br>            <artifactId>dubbo</artifactId><br>            <version>2.6.2</version><br>        </dependency></p><!-- 由于我们使用zookeeper作为注册中心，所以需要引入zkclient和curator操作zookeeper --><pre><code>    &lt;dependency&gt;        &lt;groupId&gt;com.101tec&lt;/groupId&gt;        &lt;artifactId&gt;zkclient&lt;/artifactId&gt;        &lt;version&gt;0.10&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;        &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;        &lt;version&gt;2.12.0&lt;/version&gt;    &lt;/dependency&gt;</code></pre><p>2、配置消费者信息</p><!-- 应用名 --><pre><code>&lt;dubbo:application name=&quot;gmall-order-web&quot;&gt;&lt;/dubbo:application&gt;</code></pre><!-- 指定注册中心地址 --><pre><code>&lt;dubbo:registry address=&quot;zookeeper://118.24.44.169:2181&quot; /&gt;</code></pre><!-- 生成远程服务代理，可以和本地bean一样使用demoService --><pre><code>&lt;dubbo:reference id=&quot;userService&quot; interface=&quot;com.atguigu.gmall.service.UserService&quot;&gt;</code></pre><p></dubbo:reference><br>注解标记</p><p>1、服务提供方<br>&lt;dubbo:application name=”gmall-user”&gt;</dubbo:application><br>&lt;dubbo:registry address=”zookeeper://118.24.44.169:2181” /&gt;<br>&lt;dubbo:protocol name=”dubbo” port=”20880” /&gt;<br>&lt;dubbo:annotation package=”com.atguigu.gmall.user.impl”/&gt;<br>import com.alibaba.dubbo.config.annotation.Service;<br>import com.atguigu.gmall.bean.UserAddress;<br>import com.atguigu.gmall.service.UserService;<br>import com.atguigu.gmall.user.mapper.UserAddressMapper;</p><p>@Service //使用dubbo提供的service注解，注册暴露服务<br>public class UserServiceImpl implements UserService {<br>    @Autowired<br>    UserAddressMapper userAddressMapper；</p><p>2、服务消费方<br>&lt;dubbo:application name=”gmall-order-web”&gt;</dubbo:application><br>&lt;dubbo:registry address=”zookeeper://118.24.44.169:2181” /&gt;<br>&lt;dubbo:annotation package=”com.atguigu.gmall.order.controller”/&gt;</p><p>@Controller<br>public class OrderController {<br>    @Reference  //使用dubbo提供的reference注解引用远程服务<br>    UserService userService;<br>Zookeeper服务注册<br>Xshell rz上传到linux服务器。tar -zxvf 解压后新建data文件夹 然后把zoo-simple.cfg 文件cp一份修改 dataDir为自己创建的目录</p><p>进入Zookeeper的bin目录，启动服务命令<br>./zkServer.sh start</p><p>停止服务命令<br>./zkServer.sh stop</p><p>查看服务状态：<br>./zkServer.sh status</p><p>服务提供方：注意使用Dubbo提供的Service注解，对外发布服务。applicationContext-service.xml配置如下</p><?xml version="1.0" encoding="UTF-8"?><p><beans xmlns="http://www.springframework.org/schema/beans"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:p="http://www.springframework.org/schema/p"        xmlns:context="http://www.springframework.org/schema/context"        xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"        xmlns:mvc="http://www.springframework.org/schema/mvc"        xsi:schemaLocation="http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd         http://www.springframework.org/schema/mvc         http://www.springframework.org/schema/mvc/spring-mvc.xsd         http://code.alibabatech.com/schema/dubbo         http://code.alibabatech.com/schema/dubbo/dubbo.xsd         http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context.xsd"><br>    <!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --><br>    &lt;dubbo:application name=”dubbodemo_provider” /&gt;<br>    <!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--><br>    &lt;dubbo:registry address=”zookeeper://ip:2181”/&gt;<br>    <!-- 注册  协议和port   端口默认是20880 --><br>    &lt;dubbo:protocol name=”dubbo” port=”20881”&gt;</dubbo:protocol><br>    <!-- 扫描指定包，加入@Service注解的类会被发布为服务  --><br>    &lt;dubbo:annotation package=”com.leo.service.impl” /&gt;<br></beans><br>服务消费方：Controller中注入HelloService使用的是Dubbo提供的@Reference注解 </p><?xml version="1.0" encoding="UTF-8"?><p><beans xmlns="http://www.springframework.org/schema/beans"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xmlns:p="http://www.springframework.org/schema/p"    xmlns:context="http://www.springframework.org/schema/context"    xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"    xmlns:mvc="http://www.springframework.org/schema/mvc"    xsi:schemaLocation="http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans.xsd            http://www.springframework.org/schema/mvc            http://www.springframework.org/schema/mvc/spring-mvc.xsd            http://code.alibabatech.com/schema/dubbo            http://code.alibabatech.com/schema/dubbo/dubbo.xsd            http://www.springframework.org/schema/context            http://www.springframework.org/schema/context/spring-context.xsd"></p><pre><code>&lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;&lt;dubbo:application name=&quot;dubbodemo-consumer&quot; /&gt;&lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;&lt;dubbo:registry address=&quot;zookeeper://ip:2181&quot;/&gt;&lt;!-- 扫描的方式暴露接口  --&gt;&lt;dubbo:annotation package=&quot;com.leo.controller&quot; /&gt;</code></pre></beans>Dubbo配置说明包扫描<dubbo:annotation package="com.leo.service" /> 提供者和消费者都需要配置。也可通过配置的方式，但是一个配置项(dubbo:service、dubbo:reference)只能发布或者引用一个服务，不太方便。<p>发布服务：<br><bean id="helloService" class="com.itheima.service.impl.HelloServiceImpl" /><br>&lt;dubbo:service interface=”com.itheima.api.HelloService” ref=”helloService” /&gt;</p><p>引用服务：</p><!-- 生成远程服务代理，可以和本地bean一样使用helloService --><p>&lt;dubbo:reference id=”helloService” interface=”com.itheima.api.HelloService” /&gt;<br>协议<br>&lt;dubbo:protocol name=”dubbo” port=”20880”/&gt; 服务提供者处配置，可以指定协议名称和端口号。<br>Dubbo支持协议：dubbo、rmi、hessian、http、webservice、rest、redis等。推荐使用dubbo协议。<br>dubbo 协议: 采用单一长连接和 NIO 异步通讯，适合于小数据量大并发的服务调用，以及消费者机器数远大于提供者机器数时。不适合传传文件，传视频等大数据量服务。<br>也可同一个工程中配置多个协议，不同服务使用不同协议：</p><!-- 多协议配置 --><p>&lt;dubbo:protocol name=”dubbo” port=”20880” /&gt;<br>&lt;dubbo:protocol name=”http” port=”1099” /&gt;</p><!-- 使用dubbo协议暴露服务 --><p>&lt;dubbo:service interface=”com.itheima.api.HelloService” ref=”Service1” protocol=”dubbo” /&gt;</p><!-- 使用http协议暴露服务 --><p>&lt;dubbo:service interface=”com.itheima.api.DemoService” ref=”Service2” protocol=”http” /&gt;<br>启动时检查<br>&lt;dubbo:consumer check=”false”/&gt; 配置在消费者处，默认值为true。启动时检查依赖的服务是否可用，不可用抛出异常，阻止 Spring 初始化，排除问题。可以通过将check值改为false来关闭检查。一般开发阶段false，生产环境为true。</p><p>负载均衡</p><p>既可在服务提供者一方配置，也可以在服务消费者一方配置。<br>负载均衡—–将请求分摊到多个操作单元上进行执行，从而共同完成工作任务。均衡策略（包括随机、轮询、最少活跃调用数、一致性Hash），缺省为random随机调用。</p><p>//在服务消费者一方配置负载均衡策略<br>    @Reference(check = false,loadbalance = “random”)<br>//在服务提供者一方配置负载均衡<br>    @Service(loadbalance = “random”)<br>Ps1：开发时候一台机器上启动多个提供者，要修改tomcat、Dubbo服务的端口号防止端口冲突。实际生产环境中，服务提供者是部署在不同的机器上，不存在端口冲突问题。</p><p>Ps2：加入事务注解后@Transactional，Spring会为此类基于JDK动态代理技术创建代理对象，创建的代理对象完整类名为com.sun.proxy.$ProxyXX(35/42等等)，导致Dubbo在进行包匹配时没有成功，发布服务的代码没有执行。</p><p>可以通过修改applicationContext-service.xml配置文件，使用cglib代理方式为Service类创建代理对象<br>&lt;tx:annotation-driven transaction-manager=”transactionManager” proxy-target-class=”true”/&gt;</p><hr><p>1、负载均衡-将请求均衡地分配到多个系统上。常见的技术：</p><p>DNS:一般用来实现地理级别的均衡，耗费IP不适用于做机器级别。</p><p>Nginx-&gt;LVS-&gt;F5:同地点机器级负载均衡。Nginx软件7层，LVS内核4层，F5是硬件4层</p><p>2、负载均衡策略LoadBalance</p><p>Random 随机，按权重设置随机概率。</p><p>RoundRobin 轮循，按公约后的权重设置轮循比率。会产生请求积累问题。</p><p>LeastActive 最少活跃调用数，正在处理请求数（连接数）最少，处理效率高，优先。，</p><p>ConsistentHash一致性Hash，相同参数的请求总是发到同一提供者。</p><p>3、session共享–Session在服务器之间不互通；解决</p><p>session粘滞-将请求都落到同一个服务器上，如Nginx的url hash ；</p><p>session复制-每台服务器都保存一份相同的session；</p><p>session集中存储-数据库或者缓存；</p><p>cookie (主流)-将信息存在加密后的cookie中；</p><p>4，数据库读写分离：</p><p>搭建主从集群，一主一从或一主多从。数据主从复制，主从均包涵全部业务数据。<br>业务服务器将写操作分给数据库主机，将读操作分给数据库从机，<br>     实现方式</p><p>     1、程序代码–代码中抽象一个数据访问层来实现</p><p>     2、中间件—独立一套系统。 MySQL Router、Mycat等</p><p>5、业务分库-按照业务模块将数据分散到不同的数据库服务器。</p><p>join操作问题：业务分库后无法使用一些SQL的关联查询。<br>事务问题：无法通过事务统一修改<br>成本问题：增加更多服务器需求。<br>6、数据分表</p><p>垂直分表：垂直分表适合将表中某些不常用且占了大量空间的列拆分出去。</p><p>水平分表：水平分表适合表行数特别大的表，如单表行&gt;5000万就可以考虑分表。</p><p>水平分表后，使用加路由算法确定数据与表对应关系。</p><p>7、常见的路由算法</p><p>范围路由：用有序数据列为基准。</p><p>Hash路由：用列的值进行Hash运算得Hash结果。</p><p>配置路由：用独立路由表记录路由信息。</p><p>8、微服务通信RPC技术</p><p>Dubbo、Webservice、Hessian、HTTP、RMI等。</p><p>9、微服务治理：</p><p>服务注册与发现 、负载均衡、限流、断融降级</p><p>10、Docker容器</p><p>（1）启动快-是底层进程-秒级，虚拟机进程-分钟。</p><p>（2）资源占用少-不占无用资源；虚拟机占用更多资源。容器还可以共享资源。</p><p>（3）体积小-容器类似轻量级虚拟机，通过小体积提供虚拟化的环境。</p><p>来几个面试题：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown语法总结</title>
    <link href="http://tomasonl.github.io/2020/04/30/MarkDown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://tomasonl.github.io/2020/04/30/MarkDown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2020-04-30T03:43:33.000Z</published>
    <updated>2020-12-05T01:27:19.183Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MarkDown语法总结"><a href="#MarkDown语法总结" class="headerlink" title="MarkDown语法总结"></a>MarkDown语法总结</h1><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">斜体：*XXX* &lt;br&gt;</span><br><span class="line">加粗：**XXX**  &lt;br&gt; </span><br><span class="line">斜体加粗： ***XXX***  &lt;br&gt; </span><br><span class="line">删除： ~~XXX~~  &lt;br&gt;</span><br><span class="line">分割线：***    ---</span><br><span class="line">代码 &#96;&#96;&#96;XXX&#96;&#96;&#96;</span><br></pre></td></tr></table></figure><p>斜体：<em>人生啊</em><br>加粗：<strong>茫茫啊</strong><br>斜体加粗： <strong><em>人生啊</em></strong><br>删除： <del>过时不用</del><br>分割线：</p><hr><hr><p>代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// An highlighted block</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. AA</span><br><span class="line">2. BBB</span><br><span class="line">3. CCC</span><br><span class="line">- A</span><br><span class="line">- B</span><br><span class="line">- C</span><br></pre></td></tr></table></figure><ol><li>AA</li><li>BBB</li><li>CCC</li></ol><ul><li>A</li><li>B</li><li>C</li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">链接: [link](https:&#x2F;&#x2F;www.csdn.net&#x2F;).</span><br><span class="line"></span><br><span class="line">图片: ![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)</span><br><span class="line"></span><br><span class="line">带尺寸的图片: ![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw &#x3D;30x30)</span><br><span class="line"></span><br><span class="line">居中的图片: ![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)</span><br><span class="line"></span><br><span class="line">居中并且带尺寸的图片: ![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center &#x3D;30x30)</span><br><span class="line"></span><br><span class="line">超链接： [小狂神MarkDown](https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;BV12J41137hu?p&#x3D;6)</span><br><span class="line"></span><br><span class="line">&gt; 箭头表示引用或者重要的话！</span><br></pre></td></tr></table></figure><blockquote><p>箭头表示引用或者重要的话！<br><img src="https://img-blog.csdnimg.cn/20200512085528846.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_16,color_FFFFFF,t_70" alt="图片"><br>超链接： <a href="https://www.bilibili.com/video/BV12J41137hu?p=6">小狂神MarkDown</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工具模块" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E5%85%B7%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>JAVA多线程</title>
    <link href="http://tomasonl.github.io/2020/04/06/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://tomasonl.github.io/2020/04/06/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2020-04-05T22:12:39.000Z</published>
    <updated>2020-12-05T01:27:19.431Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1，线程和进程"><a href="#1，线程和进程" class="headerlink" title="1，线程和进程"></a>1，线程和进程</h2><p>   一个进程执行过程中可以有多个线程，同类多个线程共享进程的堆和方法区，独享程序计数器、虚拟机栈和本地方法栈。</p><a id="more"></a><p>堆：存放对象实例，几乎所有的对象实例都在这里分配内存。<br>方法区：已被虚拟机加载的(元空间) 类信息、常量、静态变量、编译代码</p><p>虚拟机栈：每个方法被执行同时创建一个栈帧，存储局部变量表、操作栈、动态链接、方法出口等信息 。<br>本地方法栈：本地方法栈则是为虚拟机使用到的Native方法服务。<br>(二者保护线程中的局部变量不被别的线程所访问，so私有的啦）<br>程序计数器：字节码解释器通过改变程序计数器实现流程控制、多线程情况下给线程记录位置（so肯定是私有的啦）。也是唯一不会 OutOfMemoryError 的内存区，生命周期随着线程的而创建和销毁。</p><h2 id="2-上下文切换"><a href="#2-上下文切换" class="headerlink" title="2,上下文切换"></a>2,上下文切换</h2><p>     一个CPU在任意时刻只能被一个线程所使用，为了让每一个线程有效执行就给他们分配了时间片进行轮转。当任务执行完当前时间片在进入下一个时间片之前进行状态保存，以便下次使用加载。这个过程就是上下文切换。（纳秒级，Linux&gt;win）</p><h2 id="3-死锁？如何避免？"><a href="#3-死锁？如何避免？" class="headerlink" title="3,死锁？如何避免？"></a>3,死锁？如何避免？</h2><p>多个线程同时被阻塞，都在等待某个资源被释放。</p><p>public class DeadLockDemo {<br>    private static Object resource1 = new Object();//资源 1<br>    private static Object resource2 = new Object();//资源 2</p><pre><code>public static void main(String[] args) &#123;    new Thread(() -&gt; &#123;    synchronized (resource1) &#123;        System.out.println(Thread.currentThread() + &quot;getresource1&quot;);        try &#123;            Thread.sleep(1000);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        System.out.println(Thread.currentThread() + &quot;waitingget resource2&quot;);        synchronized (resource2) &#123;            System.out.println(Thread.currentThread() + &quot;getresource2&quot;);            &#125;        &#125;    &#125;, &quot;线程 1&quot;).start();    new Thread(() -&gt; &#123;        synchronized (resource2) &#123;            System.out.println(Thread.currentThread() + &quot;getresource2&quot;);        try &#123;            Thread.sleep(1000);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        System.out.println(Thread.currentThread() + &quot;waitingget resource1&quot;);        synchronized (resource1) &#123;            System.out.println(Thread.currentThread() + &quot;getresource1&quot;);          &#125;        &#125;    &#125;, &quot;线程 2&quot;).start();&#125;</code></pre><p>}<br>输出结果：</p><p>Thread[线程 1,5,main]get resource1<br>Thread[线程 2,5,main]get resource2<br>Thread[线程 1,5,main]waiting get resource2<br>Thread[线程 2,5,main]waiting get resource1<br>两个线程休眠结束都会开始请求对方资源，线程进入互相等待状态。产生锁的四个条件和避免方式如下：</p><p>互斥：资源在任意时刻只能被一个线程调用。（无法破坏，临界资源有互斥访问的必要性）<br>请求与保持：进程因请求资源阻塞时，不释放现有资源。（一次性申请所有资源）<br>不剥夺：线程获得的资源没用完释放之前不能被剥夺。（申请不到，主动释放自占资源）<br>循环等待：几个进程形成头尾相接的循环等待。（按序申请）</p><h2 id="4，sleep（）和wait（）的区别和共同点？"><a href="#4，sleep（）和wait（）的区别和共同点？" class="headerlink" title="4，sleep（）和wait（）的区别和共同点？"></a>4，sleep（）和wait（）的区别和共同点？</h2><p>都可以暂停线程，Thread类的方法：sleep(),yield()等Object的方法：wait()和notify()等<br>sleep没有释放锁，暂停执行。wait释放了锁，用于线程间交互。wait不会自动苏醒，需要别的线程调用同一个对象的notify或者notifyall方法。sleep传入参数自动唤醒。<br>[      为什么wait、notify和notifyAll方法要和synchronized关键字一起使用?因为wait方法使一个线程进入等待状态，并释放其所持有的锁对象，notify方法是通知等待该锁对象的线程重新获得锁对象。所以前提是获得锁对象。锁对象就像一个传话的人，他对某个线程说停下来等待，然后对另一个线程说你可以执行了（实质上是被捕获了），这一过程是线程通信。sleep方法是让某个线程暂停运行一段时间，其控制范围是由当前线程决定，运行的主动权是由当前线程来控制（拥有CPU的执行权）]。<br>sleep是你困了，要睡觉，等你睡醒了再干活。<br>wait是你现在没事做，先眯会儿吧，什么时候领导提醒你该干活了再干。</p><h2 id="5，start（）和run（）方法？"><a href="#5，start（）和run（）方法？" class="headerlink" title="5，start（）和run（）方法？"></a>5，start（）和run（）方法？</h2><p>       新建(new)一个Thread线程，调用start()启动线程进入就绪状态，分配到时间片就运行。start()执行线程相应准备工作然后自动执行run()的内容。 单独直接run()的话就是Thread里面的一个普通方法而已。</p><h2 id="6，synchronized关键字"><a href="#6，synchronized关键字" class="headerlink" title="6，synchronized关键字"></a>6，synchronized关键字</h2><p>    解决的是多个线程间访问资源的同步性。被其修饰的方法或者代码块在任意时刻只能有一个线程执行。</p><p>    修饰实例方法:作用于当前对象实例加锁，进入同步代码前要获得当前对象实例的锁。<br>    修饰静态方法:也就是给当前类加锁，会作用于类的所有对象实例，因为静态成员不属于任何一个实例对象，是类成员（ static表明这是该类的一个静态资源，不管new了多少个对象，只有一份）。所以如果一个线程A调用一个实例对象的非静态synchronized方法，而线程B需要调用这个实例对象所属类的静态 synchronized方法，是允许的，不会发生互斥现象，因为访问静态 synchronized方法占用的锁是当前类的锁，而访问非静态 synchronized方法占用的锁是当前实例对象锁。<br>    修饰代码块:指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁。</p><p>    总结: synchronized关键字加到 static静态方法和 synchronized（ class）代码块上都是是给Cass类上锁。 synchronized关键字加到实例方法上是给对象实例上锁。尽量不要使用 synchronized（ string a）因为VM中，字符串常量池具有缓存功能。</p><h2 id="7，说说JDK16之后的-synchronized关键字底层做了哪些优化？"><a href="#7，说说JDK16之后的-synchronized关键字底层做了哪些优化？" class="headerlink" title="7，说说JDK16之后的 synchronized关键字底层做了哪些优化？"></a>7，说说JDK16之后的 synchronized关键字底层做了哪些优化？</h2><p>         jDK1.6锁的实现引入了，如偏向锁、轻量级锁、自旋锁、适应性自旋锁、锁消除、锁粗化等技术来减少锁操作的开销。</p><p>锁主要存在四种状态，依次是:无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，随着竞争激烈而逐渐升级。但是不可降级，这种策略是为了提髙获得锁和释放锁的效率。</p><h2 id="8，synchronized关键字和-volatile关键字的区别"><a href="#8，synchronized关键字和-volatile关键字的区别" class="headerlink" title="8，synchronized关键字和 volatile关键字的区别"></a>8，synchronized关键字和 volatile关键字的区别</h2><p>      volatile关键字是线程同步的轻量级实现，性能稍微好些。但 volatile只修饰变量。<br>      synchronized关键字后来引入的偏向锁和轻量级锁等优化方式提升了效率，实际开发场景还是较多。<br>      volatile多线程访问 不会发生阻塞，而 synchronized关键字可能会发生阻塞。<br>      volatile保证数据可见性，但不保证原子性。synchronized关键字两者都能保证。<br>      volatile主要用于解决变量在多个线程之间的可见性，而 synchronized解决的是多个线程之间访问资源的同步性。<br>————————————————<br>版权声明：本文为CSDN博主「Leo秋实先生」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/m0_37676429/article/details/105356634">https://blog.csdn.net/m0_37676429/article/details/105356634</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1，线程和进程&quot;&gt;&lt;a href=&quot;#1，线程和进程&quot; class=&quot;headerlink&quot; title=&quot;1，线程和进程&quot;&gt;&lt;/a&gt;1，线程和进程&lt;/h2&gt;&lt;p&gt;   一个进程执行过程中可以有多个线程，同类多个线程共享进程的堆和方法区，独享程序计数器、虚拟机栈和本地方法栈。&lt;/p&gt;</summary>
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>个人简历</title>
    <link href="http://tomasonl.github.io/2020/03/01/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
    <id>http://tomasonl.github.io/2020/03/01/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/</id>
    <published>2020-03-01T14:09:47.000Z</published>
    <updated>2020-12-05T01:27:18.835Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>凡是不能击败我们的，最终都会让我们更强！</p><a id="more"></a><h1 id="个人基本信息"><a href="#个人基本信息" class="headerlink" title="个人基本信息"></a>个人基本信息</h1><ul><li>李秋实 / 男 / 25 / 硕士</li><li>工作年限：2年</li><li>Email：<a href="mailto:&#116;&#111;&#x6d;&#97;&#115;&#111;&#x6e;&#x6c;&#64;&#49;&#x36;&#x33;&#x2e;&#99;&#x6f;&#109;">&#116;&#111;&#x6d;&#97;&#115;&#111;&#x6e;&#x6c;&#64;&#49;&#x36;&#x33;&#x2e;&#99;&#x6f;&#109;</a> </li><li>QQ/微信号：tomasonl</li><li>Github：<a href="http://github.com/tomasonl">http://github.com/tomasonl</a></li><li>期望职位：Java开发工程师，应用架构师</li><li>期望城市：北京、杭州</li></ul><h1 id="实习经历"><a href="#实习经历" class="headerlink" title="实习经历"></a>实习经历</h1><h2 id="★-浙江省农信联合社-后端开发-2020-07–至今"><a href="#★-浙江省农信联合社-后端开发-2020-07–至今" class="headerlink" title="★ 浙江省农信联合社 后端开发 2020.07–至今"></a>★ 浙江省农信联合社 后端开发 2020.07–至今</h2><h3 id="工作描述："><a href="#工作描述：" class="headerlink" title="工作描述："></a>工作描述：</h3><p>1.参与公司丰收互联APP校园云模块开发，自动化压测，需求规划文档整理。<br>2.参与建设校园金融云后管云平台建设开发，负责与多平台交互查询等相关工作。</p><h2 id="★-睿品智能科技有限公司-后端开发-2019-08–2020-02"><a href="#★-睿品智能科技有限公司-后端开发-2019-08–2020-02" class="headerlink" title="★ 睿品智能科技有限公司 后端开发 2019.08–2020.02"></a>★ 睿品智能科技有限公司 后端开发 2019.08–2020.02</h2><h3 id="工作描述：-1"><a href="#工作描述：-1" class="headerlink" title="工作描述："></a>工作描述：</h3><p>1.参与公司智能消防项目开发，平台分安卓、Unity和Web端，负责后端接口维护与开发。&lt;<br>2.维保模块、巡检模块开发，根据需求进行数据库表结构设计等。</p><h2 id="★-沈阳凡得科技有限公司-软件开发-2019-01-2019-06"><a href="#★-沈阳凡得科技有限公司-软件开发-2019-01-2019-06" class="headerlink" title="★ 沈阳凡得科技有限公司 软件开发 2019.01-2019.06"></a>★ 沈阳凡得科技有限公司 软件开发 2019.01-2019.06</h2><h2 id="工作描述：-2"><a href="#工作描述：-2" class="headerlink" title="工作描述："></a>工作描述：</h2><p>1.参与辽宁某高校教育教学平台等项目开发，主要负责后端代码及平台测试。<br>2.参与数据库设计、通过培训和日常学习对项目开发有了灵活的思维过程。</p><h2 id="★-东北制药集团-数据分析-2018-06–2018-12"><a href="#★-东北制药集团-数据分析-2018-06–2018-12" class="headerlink" title="★ 东北制药集团 数据分析 2018.06–2018.12"></a>★ 东北制药集团 数据分析 2018.06–2018.12</h2><h3 id="工作描述：-3"><a href="#工作描述：-3" class="headerlink" title="工作描述："></a>工作描述：</h3><p>1.东北制药103产线优化项目，Odoo平台模块构建，网站前端页面设计。<br>2.公司信息展示平台Python（Django），linux常用操作，了解学习项目流程。</p><h1 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h1><h2 id="2019-10-2020-01-项目-智慧消防云平台火灾报警系统-后端开发"><a href="#2019-10-2020-01-项目-智慧消防云平台火灾报警系统-后端开发" class="headerlink" title="2019.10 - 2020.01 项目 | 智慧消防云平台火灾报警系统 后端开发"></a>2019.10 - 2020.01 项目 | 智慧消防云平台火灾报警系统 后端开发</h2><p>开发环境：IDEA、MySQL、Redis、Springboot、Shiro权限框架。<br>项目描述：高铁、地铁车站等安消场所智能告警隐患排除平台。<br>技术描述：权限管理使用Apache的Shiro安全框架，对车站角色进行细分。对站点建模收集不同节点传感器信息，实时大屏显示故障、维保以及隐患信息等。</p><h2 id="2019-03-2019-06-项目-辽宁省某特教师专教育教学平台-后端开发"><a href="#2019-03-2019-06-项目-辽宁省某特教师专教育教学平台-后端开发" class="headerlink" title="2019.03 - 2019.06 项目 |  辽宁省某特教师专教育教学平台 后端开发"></a>2019.03 - 2019.06 项目 |  辽宁省某特教师专教育教学平台 后端开发</h2><p>开发环境：IDEA、MySQL、Maven、Tomcat8.0<br>项目描述：完整的前后台综合管理平台。用户权限判断、基础信息管理、培训管理、考勤、宿舍管理、课堂组卷等模块开发检索等功能。<br>技术描述：使用AJAX技术实现局部刷新、COOKIE和SESSION存储、平台采用MVC设计模式，SSM项目框架开发，期间跟前辈学习新技术新知识。个人负责平台学生教师信息模块、学生信息模块、组卷组题模块开发。</p><h2 id="2018-01-2019-01-项目-分布式多传感器多目标边防立体预警系统-算法优化"><a href="#2018-01-2019-01-项目-分布式多传感器多目标边防立体预警系统-算法优化" class="headerlink" title="2018.01 - 2019.01 项目 |  分布式多传感器多目标边防立体预警系统 算法优化"></a>2018.01 - 2019.01 项目 |  分布式多传感器多目标边防立体预警系统 算法优化</h2><p>项目描述：国家级安防科研重点实验项目，电子信息实验室重点项目。<br><br>技术描述：多传感器信息的预处理、目标特征提取、融合，实时传送信息分析系统，融合可见光传感器、红外传感器、车载雷达、激光测距雷达、敌我识别器等信息；本人项目中完成了对TLD目标识别算法进行合理优化，加入惯性效果评价因子，提高算法准确性、稳定性,并发表相关学术论文。</p><h1 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a>技能清单</h1><p>● Java语言基础扎实，熟悉Java项目开发流程，语言特性；<br>● 了解SSM、Springboot 等常用项目开发框架，代码习惯良好；<br>● 熟悉Html、CSS、JS 、Ajax等前端技术及 Bootstrap、EasyUI 等前端框架；<br>● 熟悉MySQL数据库、Redis以及Maven、Gradle等项目管理工具；<br>● 熟悉Linux常用指令，熟练使用SVN、Git等版本控制协同开发工具;<br>● 英语六级、新生校长奖学金、国家三等奖学金，校优秀团干部；</p><h2 id="期待有机会能和您这么优秀的团队共事"><a href="#期待有机会能和您这么优秀的团队共事" class="headerlink" title="期待有机会能和您这么优秀的团队共事!"></a>期待有机会能和您这么优秀的团队共事!</h2><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584250290822&di=0f7ca8066c95a7748289cac348c99db1&imgtype=0&src=http%3A%2F%2Fku.90sjimg.com%2Felement_origin_min_pic%2F00%2F92%2F56%2F0656f228207555b.jpg" width="30" height="30" align=left> <a href="/download/LiXiangResume.pdf">您也可以点击此处下载简历附件</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;凡是不能击败我们的，最终都会让我们更强！&lt;/p&gt;</summary>
    
    
    
    
    <category term="简历中心" scheme="http://tomasonl.github.io/tags/%E7%AE%80%E5%8E%86%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法01</title>
    <link href="http://tomasonl.github.io/2020/02/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    <id>http://tomasonl.github.io/2020/02/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</id>
    <published>2020-02-28T08:18:51.000Z</published>
    <updated>2020-12-05T01:27:18.050Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h1><p>时间复杂度（time complexity）：估算程序指令的执行次数（执行时间）<br>空间复杂度（space complexity）：估算所需占用的存储空间</p><a id="more"></a><h2 id="数据结构和算法的重要性"><a href="#数据结构和算法的重要性" class="headerlink" title="数据结构和算法的重要性"></a>数据结构和算法的重要性</h2><p>算法</p><ol><li>算法是程序的灵魂，即使数据繁杂好的算法依然可以让程序保持高速运转！！！</li><li>算法是程序使用了的内存计算框架(比如 Spark)和缓存技术(比如 Redis 等)等的核心，可以用来优化程序。</li></ol><p>经典语段：<br>       如果说 Java 是自动档轿车，C 就是手动档吉普。数据结构呢？是变速箱的工作原理。<br>你可以不知道变速箱怎样工作，就能开车，而且未必就比懂得的人慢。写程序类似，经验可以起到很大作用，但如果你不知道底层是怎么工作的，就永远只能开车，既不会修车，也不能造车。</p><p>数据结构和算法的关系</p><ol><li>数据结构 (data structure)是一门 研究组织数据方式的学科，可以提高代码效率等。</li><li>数据结构是算法的基础, 程序 = 数据结构 +  算法</li></ol><p>线性结构和非线性结构<br>数据结构包括：线性结构和非线性结构。</p><p>线性结构</p><ol><li>线性结构作为最常用的数据结构，其特点是 数据元素之间是 一对一 的线性关系。</li><li>线性结构有两种不同的存储结构，即 顺序存储结构( 数组)和 链式存储结构( 链表)。</li><li>线性结构常见的有： 数组、队列、链表和栈。。。</li></ol><p>非线性结构<br>非线性结构包括：二维数组，多维数组，广义表，</p><p>稀疏数组：</p><p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。</p><ol><li>记录数组 一共有几行几列，有多少个不同的值</li><li>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而 缩小程序的规模</li></ol><p>队列：</p><ol><li>队列是一个 有序列表，可以用 数组或是 链表来实现。</li><li>遵循 先入先出的原则。<img src="https://img-blog.csdnimg.cn/20190815143112818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3Njc2NDI5,size_16,color_FFFFFF,t_70">冒泡：package com.leo.sort;import java.util.Arrays;public class BubbleSort { public static void main(String[] args) {     int arr[] = {3,9,-1,10,-2};     bubbleSort(arr);     System.out.println(Arrays.toString(arr)); } public static void bubbleSort(int[] arr) {     // 冒泡排序 的时间复杂度 O(n^2), 自己写出     int temp = 0; // 临时变量     boolean flag = false; // 标识变量，表示是否进行过交换     for (int i = 0; i < arr.length - 1; i++) {          for (int j = 0; j < arr.length - 1 - i; j++) {             // 如果前面的数比后面的数大，则交换             if (arr[j] > arr[j + 1]) {                 flag = true;                 temp = arr[j];                 arr[j] = arr[j + 1];                 arr[j + 1] = temp;             }         }         if (!flag) { // 在一趟排序中，一次交换都没有发生过             break;         } else {             flag = false; // 重置flag!!!, 进行下次判断         }     } }}</li></ol><p>Java——Stack详解</p><p><a href="https://www.jianshu.com/p/3587e59948a8">https://www.jianshu.com/p/3587e59948a8</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;数据结构和算法&quot;&gt;&lt;a href=&quot;#数据结构和算法&quot; class=&quot;headerlink&quot; title=&quot;数据结构和算法&quot;&gt;&lt;/a&gt;数据结构和算法&lt;/h1&gt;&lt;p&gt;时间复杂度（time complexity）：估算程序指令的执行次数（执行时间）&lt;br&gt;空间复杂度（space complexity）：估算所需占用的存储空间&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习历程" scheme="http://tomasonl.github.io/tags/%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>权限管理相关</title>
    <link href="http://tomasonl.github.io/2020/02/28/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>http://tomasonl.github.io/2020/02/28/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</id>
    <published>2020-02-27T22:28:39.000Z</published>
    <updated>2020-12-05T01:27:17.403Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="权限管理相关"><a href="#权限管理相关" class="headerlink" title="权限管理相关"></a>权限管理相关</h1><h2 id="1-认证和授权？"><a href="#1-认证和授权？" class="headerlink" title="1.认证和授权？"></a>1.认证和授权？</h2><p>   用户身份(Authentication)和用户权限 (Authorization)的区别。</p><a id="more"></a><h2 id="2-Cookie和Session？"><a href="#2-Cookie和Session？" class="headerlink" title="2.Cookie和Session？"></a>2.Cookie和Session？</h2><p>   都是用来跟踪浏览器用户身份的会话方式。Cookie在客户端保存用户信息，会话cookie自动过期setMaxAge设置会话数据存在时间，大小数量和安全问题20个4k以内。Session默认30分钟有效，setMaxInactiveInterval设置或者部署描述符配置有效期。<br>Cookie保存已经登录用户信息，下次访问可自动登录基本信息。(用户个性化设置，主题)……<br>Cookie保存 session或者 token，后端取到就能记录用户当前的状态，因为HTTP协议是无状态的。<br>Cookie记录和分析用户浏览过程。因为HTTP无状态协议，所以将这些信息存放在 Cookie，看你浏览了啥（商品推荐）。<br>通过SessionId实现特定用户登录，一般存放在Redis中。用户登录系统后服务器生产并返回给客户端带有sessionid的cookies，然后用户在此向服务器发起请求的时候就会带着这个Cookies（sessionId），这样后端就知道身份了。<br><a href="https://www.baeldung.com/spring-session">https://www.baeldung.com/spring-session</a>  （springboot的demo跨程序管理）</p><h2 id="3-Token？"><a href="#3-Token？" class="headerlink" title="3.Token？"></a>3.Token？</h2><p>   CSRF跨站请求伪造。就是别人通过cookie拿到你的sessionid就可以代替你的身份访问资源。<br><strong>典型CSRF攻击流程：</strong></p><ul><li>受害者登录a.com，并保留了登录凭证（Cookie）。</li><li>攻击者引诱受害者访问了b.com。</li><li>b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie。</li><li>a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。</li><li>a.com以受害者的名义执行了act=xx。</li><li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。<br>那么，有没有不用存放session就能认证用户身份呢？Token上场表演。对数据使用算法+密钥进行签名，成为无法伪造的Token。</li></ul><p><strong>基于Token的身份验证JWT：</strong><br>Header：JWT的元数据。定义了生成签名的算法以及Token的类型。<br>Payload：负载、用来存放实际需要传递的数据。<br>Signature：服务器通过Payload/Header和一个密钥（secret）使用Header 中签名算法（默认是HMACSHA256）生成。</p><h2 id="4-SSO与OAuth2-0的区别"><a href="#4-SSO与OAuth2-0的区别" class="headerlink" title="4.SSO与OAuth2.0的区别"></a>4.SSO与OAuth2.0的区别</h2><p>   OAuth2标准授权协议，用来授权第三方应用获取某些权限。SSO(Single Sign On)单点登录 ，解决多个相关的子系统登录一个别的也可以访问。</p><h2 id="5-SpringSecurity"><a href="#5-SpringSecurity" class="headerlink" title="5.SpringSecurity"></a>5.SpringSecurity</h2><p>       <br>提供了可用的安全框架，提供了很多用户认证功能提高开发效率。基于Spring易于集成，有很多封装方法。<br>配置文件较多，RBAC不太明显。对系统中role、user和permission无可操作界面。大数据量下几乎不可以用。</p><h2 id="6-ApacheShiro"><a href="#6-ApacheShiro" class="headerlink" title="6.ApacheShiro"></a>6.ApacheShiro</h2><p>        认证、授权、会话管理和加密。四大基石！<br>subject ：主体 ——-SecurityManager：管家————Realm：安全数据源<br>灵活可用容易集成。自己实现RBAC和操作界面。简单明了！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;权限管理相关&quot;&gt;&lt;a href=&quot;#权限管理相关&quot; class=&quot;headerlink&quot; title=&quot;权限管理相关&quot;&gt;&lt;/a&gt;权限管理相关&lt;/h1&gt;&lt;h2 id=&quot;1-认证和授权？&quot;&gt;&lt;a href=&quot;#1-认证和授权？&quot; class=&quot;headerlink&quot; title=&quot;1.认证和授权？&quot;&gt;&lt;/a&gt;1.认证和授权？&lt;/h2&gt;&lt;p&gt;   用户身份(Authentication)和用户权限 (Authorization)的区别。&lt;/p&gt;</summary>
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>远离电子毒品</title>
    <link href="http://tomasonl.github.io/2020/02/26/%E8%BF%9C%E7%A6%BB%E7%94%B5%E5%AD%90%E6%AF%92%E5%93%81/"/>
    <id>http://tomasonl.github.io/2020/02/26/%E8%BF%9C%E7%A6%BB%E7%94%B5%E5%AD%90%E6%AF%92%E5%93%81/</id>
    <published>2020-02-26T05:33:46.000Z</published>
    <updated>2020-12-05T01:27:16.805Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>你可以旅游，然后你就会拿起手机定酒店看攻略制定计划，发现远的地方不想去近的地方没意思，就此作罢。<br>你可以去看书，你可能觉得出门买纸质书太麻烦选择去当当亚马逊买，但是不知道看什么书于是会逛逛豆瓣知乎，最后发现太麻烦然后下载了一个电子书app看了半天。<br>你可以去学一门乐器<a id="more"></a>比如弹吉他，对着谱捣鼓半天却发现毫无头绪，你苦于没有老师教你会去逛逛贴吧和B站，各种大佬音乐视频看了半天。<br>你可以去找找老朋友聚聚聊天，打电话给他然后发现你的朋友语调迷迷糊糊原来刚刚起床，你们聊了一会微信发现无话可说然后决定一起开黑打游戏。<br>你可以看看新闻，发现电视上的新闻总是按周期准点报送，充斥着与你不太感兴趣的国家基层民生政策与高级领导人的各种会议与活动，决定还是看及时迅速的微博热搜新闻。<br>你可以去学习专业知识，可是坐在桌前不到一会就打瞌睡神游，不知道该怎么办于是来知乎请求大佬答疑解惑贴吧微博找学知识的公众号然而并没啥卵用。<br>天黑了，你点了份外卖吃完洗澡窝在被子里，手机插上充电器，玩到困倦。<br>啊还是玩手机有意思！—————–知乎：16岁的杨先森</p><p>这是一种什么状态<br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584250290822&di=0f7ca8066c95a7748289cac348c99db1&imgtype=0&src=http%3A%2F%2Fku.90sjimg.com%2Felement_origin_min_pic%2F00%2F92%2F56%2F0656f228207555b.jpg" width="30" height="30" align=left><a href="/download/1.pptx">点击此处，下载该课件</a></p><p>　　由于生产力的不断上升，世界上的一大部分人口将不必也无法积极参与产品和服务的生产。为了安慰这些“被遗弃”的人，避免冲突，方法之一就是制造“奶头”、喂之以“奶头”——使令人陶醉的消遺娱乐和充满感官刺激的产品（比如网络、电视和游戏）填满人们的生活、转移其注意力和不满情绪，令其沉浸在“快乐”中不知不觉丧失思考能力、无心挑战现有的统治阶级。</p><p>　　美国旧金山曾于1995年举行过一个集合全球500名经济界、政治界精英的会议，与会者包括萨切尔、老布什、美国有线电视新闻网（CNN）、惠普、Sun微系统的老板等等，该会议的主旨在于为全球化的世界进行分析与规划。会议上，与会者一致认为全球化的高度、快速、激烈的竞争将使全球80%人口”边缘化”，而这80%“边缘化”人口与20%搭上全球化快车的人口之间的冲突将成为今后的主要问题。布热津斯基也及时献计献策，创造了一个新词汇“奶头乐”，英文titty“奶头”与entertainment “娱乐”的组合，一共两种简单的形式第一种是发泄性娱乐，如色情行业、暴力网络、口水战等违反法律和道德的消遣和爱好；第二种是满足性游戏，如肥皂剧、真人秀、短视频等。意指要使彼80%的人安分守己，20%的人高枕无忧，就得采取温情、麻醉、低成本、半满足的办法卸除“边缘化人口”的不满。</p><p>　　想想我们身边的人包括我们自己是否刷抖音和快手的短视频？你想着：“也就是15秒的小视频看看打发一下时间。”但是等你回过神来时，也许早就过了一两个小时。短视频的上瘾除了让我们不自知地丧失时间，也会给我们带来价值观的扭曲。我们是否已经身处娱乐至死的时代而无法抽身，受困于短视频的信息茧房中而不自知？</p><p>　　抖音等短视频应用的出现正是符合了满足性游戏的“奶嘴”形式。当你沉浸在这种短暂和不间断的碎片化娱乐中时 ，你可能会逐渐丧失斗志和创造力。这些搜索成瘾的短视频APP，消耗了你工作之外的时间，甚至干扰你上班的专心程度甚至日常生活。实际上，人性就是喜欢好逸恶劳。抓住了这一致命人性弱点的“奶头乐”正借各种无用的即时反馈产品，钝化人们的思维和上进心。</p><p>你认为不只是你自己耽于享乐，“精英们”也照样在享受人生。其实是你只看到了有钱人的奢华生活，却没有看到他们背后的努力，不否定有些人家庭身世因素，但是这不是我们沉浸与奶头乐的理由。工作是私密枯燥的，真正精英层次的人是不会天天“晒”自己有多努力，多认真的，也不会每天展示自己的成就。</p><p>　　在这个短视频横行、泛娱乐化的时代的我们应该如何自处？明确自己每一个阶段的目标、养成每天思考的习惯是将口中的奶嘴拔出来的第一步。学着打破这种状态</p><p>1，碎片化娱乐时间—-&gt;碎片化学习时间</p><p>　　赶走碎片化娱乐。任何时间不要想着打开手机消磨时光，趴下睡个午觉的话，下午的精力会更加充沛，办事效率会得到提升。远离电子毒品，从电子世界找到丰富自己的东西。有用无用时间占用分辨清晰。</p><p>2，明确,阶段性目标—-&gt;制定计划和自律</p><p>　　庞大的目标会使你倍感压力，但是不要忘了小时候学习的走一步再走一步。将大的目标分解成近期可实现的小目标，及时进行小小的奖励措施，原先遥不可及的目标也许现在会使你干劲满满哦。</p><p>3，养成每天思考的习惯—-&gt;格局决定你走多远</p><p>　　各种无用的诱惑因素都是在挤占了我们大脑的思考时间。我们要学会每天有意识地让自己思考，除了学习计划，思考自己的生活和人生方向，回味一些奋斗过的有趣的历程；或是看一部经典电影，陶醉于音乐，挥洒汗水健身等。</p><p>keep your head up！Focus on real life !</p><p>远离电子毒品,hahaha.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;你可以旅游，然后你就会拿起手机定酒店看攻略制定计划，发现远的地方不想去近的地方没意思，就此作罢。&lt;br&gt;你可以去看书，你可能觉得出门买纸质书太麻烦选择去当当亚马逊买，但是不知道看什么书于是会逛逛豆瓣知乎，最后发现太麻烦然后下载了一个电子书app看了半天。&lt;br&gt;你可以去学一门乐器</summary>
    
    
    
    
    <category term="生活随笔" scheme="http://tomasonl.github.io/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Maven和Grade构建项目</title>
    <link href="http://tomasonl.github.io/2020/02/01/Maven%E5%92%8CGradle%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    <id>http://tomasonl.github.io/2020/02/01/Maven%E5%92%8CGradle%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/</id>
    <published>2020-02-01T00:26:59.000Z</published>
    <updated>2020-12-05T01:27:19.064Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Maven介绍"><a href="#一、Maven介绍" class="headerlink" title="一、Maven介绍"></a>一、Maven介绍</h1><h2 id="一、maven介绍"><a href="#一、maven介绍" class="headerlink" title="一、maven介绍"></a>一、maven介绍</h2><p>maven 是一个项目管理工具，主要作用是在项目开发阶段对Java项目进行依赖管理和项目构建。<br>依赖管理：就是对jar包的管理。通过导入maven坐标，就相当于将仓库中的jar包导入了当前项目中。<br>项目构建：通过maven的一个命令就可以完成项目从清理、编译、测试、报告、打包，部署整个过程。</p><p>①maven中央仓库（地址：<a href="http://repo2.maven.org/maven2/%EF%BC%89">http://repo2.maven.org/maven2/）</a><br>②maven私服（公司局域网内的仓库，需要自己搭建）<br>③其他公共远程仓库（例如apache提供的远程仓库，地址：<a href="http://repo.maven.apache.org/maven2/%EF%BC%89">http://repo.maven.apache.org/maven2/）</a></p><p>clean： 清理<br>compile：编译<br>test： 测试<br>package：打包<br>install： 安装</p><h2 id="二、分模块开发"><a href="#二、分模块开发" class="headerlink" title="二、分模块开发"></a>二、分模块开发</h2><p>继承！！！parent！！！</p><p>聚合！！！ module！！！</p><p>Dependencies和dependencyManagement<br>dependencyManagement—–统一管理项目的版本号，确保应用的各个项目的依赖和版本一致，升级版本方便；<br>子项目需要特定版本号时，只需在其dependencies中声明，就可使用自己的不继承父类的。<br>dependencies—–所有声明在dependencies里的依赖都会自动引入，并默认被所有的子项目继承。</p><p>Build标签<br>一种<build>被称为Project Build，即是<project>子元素。另一种<build>被称为Profile Build，即是<profile>的直接子元素。</p><p>Profile Build包含了基本的build元素，而Project Build还包含两个特殊的元素，即各种&lt;…Directory&gt;和<extensions>。</p><p>plugins—用于指定使用的插件；pluginManagement只是用于继承，使得可以在子pom中使用。</p><h1 id="二、Gradle介绍"><a href="#二、Gradle介绍" class="headerlink" title="二、Gradle介绍"></a>二、Gradle介绍</h1><h2 id="一、Gradle介绍-Groove语言"><a href="#一、Gradle介绍-Groove语言" class="headerlink" title="一、Gradle介绍+Groove语言"></a>一、Gradle介绍+Groove语言</h2><p>       Gradle，使用Groovy语言基于Apache Ant和Apache Maven概念的项目自动化构建开源工具。<br>Groovy是一种基于JVM的语言，它结合了Python、Ruby强大的特性，与 Java 代码易结合、扩展。</p><p>2000Ant—2004Maven—2012Gradle</p><p>轻量化趋势，Gradle优点：简化Maven繁琐xml配置、强大支持多工程构建、Groove语言性能。</p><p>语法：</p><p>输出： println “hello，world！”———比较随意，单引号双引号随意，分号可以不加，括号也可以没有。给力！<br>定义变量：def 赋值决定变量—-类似js 也可以强类型定义 int a=666;不过没有基本类型，都是对象类型。<br>lList：def numbers = [1, 2, 3]；Groovy 不支持 Java 数组初始化符号 {}，因为 {} 可能会被曲解成 Groovy 闭包的符号；<br>Map：def colors = [red: ‘#FF0000’, green: ‘#00FF00’, blue: ‘#0000FF’]   <br>闭包：代码块，可以作为参数在方法之间传递。就是定义一个 def m{sout }<br>build.gradle—-局部设置</p><p>settings.gradle—全局设置</p><h2 id="二、Gradle组成"><a href="#二、Gradle组成" class="headerlink" title="二、Gradle组成"></a>二、Gradle组成</h2><ol><li><p>Project与Task<br>在Gradle中，每一个待构建的工程是一个Project，构建一个Project需要执行一系列Task，比如编译、打包这些构建过程的子过程都对应着一个Task。</p></li><li><p>插件<br>插件用来定义和执行Task。</p></li></ol><p>在新建工程的app模块的build.gradle文件的第一行，往往都是如下这句：</p><p>apply plugin: ‘com.android.application’<br>这句话的意思就是应用“com.android.application“这个插件来构建app模块，app模块就是Gradle中的一个Project。也就是说，这个插件负责定义并执行Java源码编译、资源文件编译、打包等一系列Task。实际上”com.android.application”整个插件中定义了如下4个顶级任务：</p><p>assemble: 构建项目的输出（apk）</p><p>check: 进行校验工作</p><p>build: 执行assemble任务与check任务</p><p>clean: 清除项目的输出</p><p>当我们执行一个任务时，会自动执行它所依赖的任务。比如，执行assemble任务会执行assembleDebug任务和assembleRelease任务，这是因为一个Android项目至少要有debug和release这两个版本的输出。</p><ol start="3"><li>Gradle配置文件<br>我们在Android Studio中新建一个工程，可以得到如下的工程结构图：</li></ol><p>上面我们说过，Android Studio中的一个Module即为Gradle中的一个Project。上图的app目录下，存在一个build.gradle文件，代表了app Module的构建脚本，它定义了应用于本模块的构建规则。我们可以看到，工程根目录下也存在一个build.gradle文件，它代表了整个工程的构建，其中定义了适用于这个工程中所有模块的构建规则。</p><p>接下来我们介绍一下上图中其他几个Gradle配置文件：</p><p>gradle.properties: 从它的名字可以看出，这个文件中定义了一系列“属性”。实际上，这个文件中定义了一系列供build.gradle使用的常量，比如keystore的存储路径、keyalias等等。</p><p>gradlew与gradlew.bat: gradlew为Linux下的shell脚本，gradlew.bat是Windows下的批处理文件。gradlew是gradle wrapper的缩写，也就是说它对gradle的命令进行了包装，比如我们进入到指定Module目录并执行“gradlew.bat assemble”即可完成对当前Module的构建（Windows系统下）。</p><p>local.properties: 从名字就可以看出来，这个文件中定义了一些本地属性，比如SDK的路径。</p><p>settings.gradle: 假如我们的项目包含了不只一个Module时，我们想要一次性构建所有Module以完成整个项目的构建，这时我们需要用到这个文件。比如我们的项目包含了ModuleA和ModuleB这两个模块，则这个文件中会包含这样的语句：include ‘:ModuleA’, ‘:ModuleB’。</p><ol start="4"><li>构建脚本<br>首先我们来看一下工程目录下的build.gradle，它指定了真个整个项目的构建规则，它的内容如下：</li></ol><p>buildscript {<br>    repositories {<br>        jcenter() //构建脚本中所依赖的库都在jcenter仓库下载<br>    }<br>    dependencies {<br>        //指定了gradle插件的版本<br>        classpath ‘com.android.tools.build:gradle:1.5.0’<br>    }<br>}</p><p>allprojects {<br>    repositories {<br>        //当前项目所有模块所依赖的库都在jcenter仓库下载<br>        jcenter()<br>    }<br>}</p><p>我们再来简单介绍下app模块的build.gradle的内容：</p><p>//加载用于构建Android项目的插件<br>apply plugin: ‘com.android.application’</p><p>android { //构建Android项目使用的配置<br>    compileSdkVersion 23 //指定编译项目时使用的SDK版本<br>    buildToolsVersion “23.0.1” //指定构建工具的版本</p><p>    defaultConfig {<br>        applicationId “com.absfree.debugframwork” //包名<br>        minSdkVersion 15  //指定支持的最小SDK版本<br>        targetSdkVersion 23 //针对的目标SDK版本<br>        versionCode 1<br>        versionName “1.0”<br>    }<br>    buildTypes { //针对不同的构建版本进行一些设置<br>        release { //对release版本进行的设置<br>            minifyEnabled false //是否开启混淆<br>            proguardFiles getDefaultProguardFile(‘proguard-android.txt’), ‘proguard-rules.pro’  //指定混淆文件的位置<br>        }<br>    }<br>}</p><p>dependencies { //指定当前模块的依赖<br>    compile fileTree(dir: ‘libs’, include: [‘*.jar’])<br>    testCompile ‘junit:junit:4.12’<br>    compile ‘com.android.support:appcompat-v7:23.1.1’<br>    compile ‘com.android.support:design:23.1.1’<br>}</p><h2 id="三、常见配置"><a href="#三、常见配置" class="headerlink" title="三、常见配置"></a>三、常见配置</h2><p>整个工程的build.gradle通常不需我们改动，这里我们介绍下一些对模块目录下build.gradle文件的常见配置。</p><ol><li>依赖第三方库<br>当我们的项目中用到了了一些第三方库时，我们就需要进行一些配置，以保证能正确导入相关依赖。设置方法很简单，比如我们在app模块中中用到了Fresco，只需要在build.gradle文件中的dependencies块添加如下语句：</li></ol><p>dependencies {<br>    …<br>    compile ‘com.facebook.fresco:fresco:0.11.0’<br>}<br>这样一来，Gradle会自动从jcenter仓库下载我们所需的第三方库并导入到项目中。</p><ol start="2"><li>导入本地jar包<br>在使用第三方库时，除了像上面那样从jcenter仓库下载，我们还可以导入本地的jar包。配置方法也很简单，只需要先把jar文件添加到app\libs目录下，然后在相应jar文件上单击右键，选择“Ad As Library”。然后在build.gradle的dependencies块下添加如下语句：</li></ol><p>compile files(‘libs/xxx.jar’)<br>实际上我们可以看到，系统为我们创建的build.gradle中就已经包含了如下语句：</p><p>compile fileTree(dir: ‘libs’, include: [‘*.jar’])<br>这句话的意思是，将libs目录下的所有jar包都导入。所以实际上我们只需要把jar包添加到libs目录下并“Ad As Library”即可。</p><ol start="3"><li>依赖其它模块<br>假设我们的项目包含了多个模块，并且app模块依赖other模块，那么我们只需app\build.gradle的denpendencies块下添加如下语句：</li></ol><p>compile project(‘:other’)<br>4. 构建输出为aar文件<br>通常我们构建的输出目标都是apk文件，但如果我们的当前项目时Android Library，我们的目标输出就是aar文件。要想达到这个目的也很容易，只需要把build.gradle的第一句改为如下：</p><p>apply plugin:’com.android.library’<br>这话表示我们使用的插件不再是构建Android应用的插件，而是构建Android Library的插件，这个插件定义并执行用于构建Android Library的一系列Task。</p><ol start="5"><li>自动移除不再使用的资源<br>只需进行如下配置：</li></ol><p>android {<br>    …<br>    }<br>    buildTypes {<br>        release {<br>            …<br>            shrinkResources true<br>            …<br>        }<br>    }<br>}<br><strong>TIPS：</strong></p><ol><li><p>深入理解Android之Gradle:<a href="http://blog.csdn.net/Innost/article/details/48228651">http://blog.csdn.net/Innost/article/details/48228651</a></p></li><li><p>Gradle构建最佳实践: <a href="http://www.figotan.org/2016/04/01/gradle-on-android-best-practise/">http://www.figotan.org/2016/04/01/gradle-on-android-best-practise/</a></p></li></ol><p>部分结合作者-Bonker 地址-<a href="https://www.cnblogs.com/Bonker/p/5619458.html">https://www.cnblogs.com/Bonker/p/5619458.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工作记录" scheme="http://tomasonl.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>生活随笔</title>
    <link href="http://tomasonl.github.io/2020/01/29/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    <id>http://tomasonl.github.io/2020/01/29/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/</id>
    <published>2020-01-29T14:09:47.000Z</published>
    <updated>2020-12-05T01:27:16.690Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="在想放弃和懈怠的时候如何去做？"><a href="#在想放弃和懈怠的时候如何去做？" class="headerlink" title="在想放弃和懈怠的时候如何去做？"></a>在想放弃和懈怠的时候如何去做？</h2><ol><li>和各种倦怠症说拜拜<br>为自己找到为什么，找到你愿意争取的事情</li><li>弄明白当下生活的含义<br>最主要的目的是？</li><li>建立习惯，利用习惯的力量<br>把自己想要做的事情变成一种习惯，固定时间点</li></ol><p>努力和后悔？你准备选择哪一个？</p><h1 id="24小时"><a href="#24小时" class="headerlink" title="24小时"></a>24小时</h1><p>How to build?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="生活随笔" scheme="http://tomasonl.github.io/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
